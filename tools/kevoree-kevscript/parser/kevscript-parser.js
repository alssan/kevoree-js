module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "instructions": parse_instructions,
        "instruction": parse_instruction,
        "addEntity": parse_addEntity,
        "addNode": parse_addNode,
        "addComp": parse_addComp,
        "addGroup": parse_addGroup,
        "addChan": parse_addChan,
        "addNodeToGroup": parse_addNodeToGroup,
        "removeNodeFromGroup": parse_removeNodeFromGroup,
        "updateDictionary": parse_updateDictionary,
        "addBinding": parse_addBinding,
        "merge": parse_merge,
        "MergeDefinition": parse_MergeDefinition,
        "MavenDefinition": parse_MavenDefinition,
        "NPMDefinition": parse_NPMDefinition,
        "Dictionary": parse_Dictionary,
        "Attribute": parse_Attribute,
        "NodeList": parse_NodeList,
        "mergestring": parse_mergestring,
        "string": parse_string,
        "AddNodeToken": parse_AddNodeToken,
        "DelNodeToken": parse_DelNodeToken,
        "AddCompToken": parse_AddCompToken,
        "DelCompToken": parse_DelCompToken,
        "AddGroupToken": parse_AddGroupToken,
        "DelGroupToken": parse_DelGroupToken,
        "AddChanToken": parse_AddChanToken,
        "DelChanToken": parse_DelChanToken,
        "AddToken": parse_AddToken,
        "RemoveToken": parse_RemoveToken,
        "UpdateDictionaryToken": parse_UpdateDictionaryToken,
        "MergeToken": parse_MergeToken,
        "char": parse_char,
        "moarchar": parse_moarchar,
        "_": parse__,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_instructions();
        if (result0 !== null) {
          result1 = parse__();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return model; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_instructions() {
        var result0, result1;
        
        result1 = parse_instruction();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_instruction();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_instruction() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_addEntity();
        if (result0 === null) {
          result0 = parse_addNodeToGroup();
          if (result0 === null) {
            result0 = parse_removeNodeFromGroup();
            if (result0 === null) {
              result0 = parse_updateDictionary();
              if (result0 === null) {
                result0 = parse_addBinding();
                if (result0 === null) {
                  result0 = parse_merge();
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addEntity() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_addNode();
        if (result0 === null) {
          result0 = parse_addComp();
          if (result0 === null) {
            result0 = parse_addGroup();
            if (result0 === null) {
              result0 = parse_addChan();
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_Dictionary();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, entity, dictionary) {
            dictionary = dictionary[1];
            if (typeof(dictionary) != 'undefined') {
              processDictionary(entity, dictionary);
            }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addNode() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AddNodeToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, type, name) {
            model.nodes[name] = {type: type, components: {}};
            return model.nodes[name];
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addComp() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AddCompToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 64) {
              result2 = "@";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"@\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_string();
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        result8 = parse_string();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, nodeName, type, name) {
            model.nodes[nodeName].components[name] = {type: type};
            return model.nodes[nodeName].components[name];
          })(pos0, result0[4], result0[6], result0[8]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addGroup() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AddGroupToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, type, name) {
            model.groups[name] = {type: type, subnodes: []};
            return model.groups[name];
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addChan() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AddChanToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, type, name) {
            model.chans[name] = {type: type};
            return model.chans[name];
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addNodeToGroup() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_AddToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, nodeName, groupName) {
            if (!isNode(nodeName)) throw getErrorPosition()+'You must only add nodes to groups. "'+nodeName+'" is not a node or is not defined.';
            if (!isGroup(groupName)) throw getErrorPosition()+'You must only add nodes to groups. "'+groupName+'" is not a group or is not defined.';
            model.groups[groupName].subnodes.push(nodeName);
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_AddToken();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_NodeList();
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_string();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, nodeList, groupName) { 
              if (!isGroup(groupName)) throw getErrorPosition()+'You must only add nodes to groups. "'+groupName+'" is not a group or is not defined.';
              for (var i in nodeList) {
                model.groups[groupName].subnodes.push(nodeList[i]);
              }
            })(pos0, result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_AddToken();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 42) {
                  result2 = "*";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    result4 = parse_string();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, groupName) {
                if (!isGroup(groupName)) throw getErrorPosition()+'You must only add nodes to groups. "'+groupName+'" is not a group or is not defined.';
                for (var nodeName in model.nodes) {
                  model.groups[groupName].subnodes.push(nodeName);
                }
              })(pos0, result0[4]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_removeNodeFromGroup() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_RemoveToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, nodeName, groupName) {
            var subnodes = model.groups[groupName].subnodes;
            subnodes.splice(subnodes.indexOf(nodeName), 1);
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_RemoveToken();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_NodeList();
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_string();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, nodeList, groupName) { 
              var subnodes = model.groups[groupName].subnodes;
              for (var i in nodeList) {
                subnodes.splice(subnodes.indexOf(nodeList[i]), 1);
              }
            })(pos0, result0[2], result0[4]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_RemoveToken();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 42) {
                  result2 = "*";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    result4 = parse_string();
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, groupName) { model.groups[groupName].subnodes.length = 0; })(pos0, result0[4]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_updateDictionary() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_UpdateDictionaryToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_Dictionary();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name, dictionary) {
            var entity = findEntity(name);
            processDictionary(entity, dictionary);
          })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_addBinding() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_string();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                if (input.substr(pos, 2) === "=>") {
                  result4 = "=>";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=>\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_string();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, compName, compPort, chanName) {
            if (isComponent(compName) && isChannel(chanName)) {
              model.bindings.push({from: {comp: compName, port: compPort}, to: chanName});
            } else throw getErrorPosition()+'A binding can only be made between a component\'s port and a channel (they must be defined before)';
          })(pos0, result0[0], result0[2], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_merge() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MergeToken();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_MergeDefinition();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, def) { model.deployUnits.push(def); })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_MergeDefinition() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^['"]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("['\"]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_MavenDefinition();
          if (result1 === null) {
            result1 = parse_NPMDefinition();
          }
          if (result1 !== null) {
            if (/^['"]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("['\"]");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, def) { return def; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_MavenDefinition() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "mvn") {
          result0 = "mvn";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"mvn\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 58) {
              result2 = ":";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_mergestring();
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    if (/^[:\/]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[:\\/]");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        result8 = parse_mergestring();
                        if (result8 !== null) {
                          result9 = parse__();
                          if (result9 !== null) {
                            if (/^[:\/@]/.test(input.charAt(pos))) {
                              result10 = input.charAt(pos);
                              pos++;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("[:\\/@]");
                              }
                            }
                            if (result10 !== null) {
                              result11 = parse__();
                              if (result11 !== null) {
                                result12 = parse_mergestring();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, groupId, name, version) { return {type: 'mvn', name: name, groupId: groupId, version: version}; })(pos0, result0[4], result0[8], result0[12]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NPMDefinition() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "npm") {
          result0 = "npm";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"npm\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 58) {
              result2 = ":";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = parse__();
                  if (result5 !== null) {
                    if (/^[:\/@]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[:\\/@]");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        result8 = parse_mergestring();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name, version) { return {type: 'npm', name: name, version: version[3]}; })(pos0, result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Dictionary() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_Attribute();
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              if (/^[,]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[,]");
                }
              }
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_Attribute();
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                if (/^[,]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[,]");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_Attribute();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 125) {
                    result5 = "}";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, others) {
            var attList = [];
            attList.push(first);
            for (var i=0; i < others.length; i++) {
              attList.push(others[i][2]);
            }
            return attList;
          })(pos0, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Attribute() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_string();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            pos2 = pos;
            if (input.charCodeAt(pos) === 64) {
              result2 = "@";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"@\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_string();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 58) {
                  result4 = ":";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    if (/^["']/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[\"']");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse__();
                      if (result7 !== null) {
                        result8 = parse_string();
                        if (result8 !== null) {
                          result9 = parse__();
                          if (result9 !== null) {
                            if (/^["']/.test(input.charAt(pos))) {
                              result10 = input.charAt(pos);
                              pos++;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("[\"']");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, attName, nodeName, attValue) {
            if (typeof(nodeName[2]) != 'undefined') {
              // attribute is fragmentDependant
              return {name: attName, value: attValue, targetNodeName: nodeName[2]};
            } else {
              // attribute is not fragmentDependant
              return {name: attName, value: attValue};
            }
          })(pos0, result0[0], result0[2], result0[8]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NodeList() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_string();
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              if (/^[,]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[,]");
                }
              }
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_string();
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                if (/^[,]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[,]");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_string();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    result5 = "]";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, others) {
            if (!isNode(first)) throw getErrorPosition()+'"'+first+'" is not a node or is not defined.';
            var nodeList = [];
            nodeList.push(first);
            for (var i=0; i < others.length; i++) {
              if (!isNode(others[i][2])) throw getErrorPosition()+'"'+others[i][2]+'" is not a node or is not defined.';
              nodeList.push(others[i][2]);
            }
            return nodeList;
          })(pos0, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_mergestring() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_moarchar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_moarchar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_char();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_char();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AddNodeToken() {
        var result0;
        
        if (input.substr(pos, 5) === "+node") {
          result0 = "+node";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+node\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "+n") {
            result0 = "+n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"+n\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "addNode") {
              result0 = "addNode";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"addNode\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_DelNodeToken() {
        var result0;
        
        if (input.substr(pos, 5) === "-node") {
          result0 = "-node";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-node\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "-n") {
            result0 = "-n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-n\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "delNode") {
              result0 = "delNode";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"delNode\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_AddCompToken() {
        var result0;
        
        if (input.substr(pos, 5) === "+comp") {
          result0 = "+comp";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+comp\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "+c") {
            result0 = "+c";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"+c\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "addComp") {
              result0 = "addComp";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"addComp\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_DelCompToken() {
        var result0;
        
        if (input.substr(pos, 5) === "-comp") {
          result0 = "-comp";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-comp\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "-c") {
            result0 = "-c";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-c\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "delComp") {
              result0 = "delComp";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"delComp\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_AddGroupToken() {
        var result0;
        
        if (input.substr(pos, 4) === "+grp") {
          result0 = "+grp";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+grp\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "+g") {
            result0 = "+g";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"+g\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 6) === "addGrp") {
              result0 = "addGrp";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"addGrp\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 8) === "addGroup") {
                result0 = "addGroup";
                pos += 8;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"addGroup\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_DelGroupToken() {
        var result0;
        
        if (input.substr(pos, 4) === "-grp") {
          result0 = "-grp";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-grp\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "-g") {
            result0 = "-g";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-g\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 6) === "delGrp") {
              result0 = "delGrp";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"delGrp\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 8) === "delGroup") {
                result0 = "delGroup";
                pos += 8;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"delGroup\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_AddChanToken() {
        var result0;
        
        if (input.substr(pos, 5) === "+chan") {
          result0 = "+chan";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+chan\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "+ch") {
            result0 = "+ch";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"+ch\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "addChan") {
              result0 = "addChan";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"addChan\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_DelChanToken() {
        var result0;
        
        if (input.substr(pos, 5) === "-chan") {
          result0 = "-chan";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-chan\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "-ch") {
            result0 = "-ch";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-ch\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 7) === "delChan") {
              result0 = "delChan";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"delChan\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_AddToken() {
        var result0;
        
        if (input.substr(pos, 3) === "add") {
          result0 = "add";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"add\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 43) {
            result0 = "+";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"+\"");
            }
          }
        }
        return result0;
      }
      
      function parse_RemoveToken() {
        var result0;
        
        if (input.substr(pos, 3) === "del") {
          result0 = "del";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"del\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 6) === "remove") {
            result0 = "remove";
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"remove\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 45) {
              result0 = "-";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_UpdateDictionaryToken() {
        var result0;
        
        if (input.substr(pos, 16) === "updateDictionary") {
          result0 = "updateDictionary";
          pos += 16;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"updateDictionary\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 10) === "dictionary") {
            result0 = "dictionary";
            pos += 10;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"dictionary\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "dic") {
              result0 = "dic";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"dic\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_MergeToken() {
        var result0;
        
        if (input.substr(pos, 5) === "merge") {
          result0 = "merge";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"merge\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 126) {
            result0 = "~";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"~\"");
            }
          }
        }
        return result0;
      }
      
      function parse_char() {
        var result0;
        
        if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9_\\-]");
          }
        }
        return result0;
      }
      
      function parse_moarchar() {
        var result0;
        
        if (/^[a-zA-Z0-9_\-.]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9_\\-.]");
          }
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        reportFailures++;
        result0 = [];
        result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_whitespace();
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        var model = {
          nodes: {},
          groups: {},
          chans: {},
          bindings: [],
          deployUnits: []
        };
      
        var findEntity = function findEntity(name) {
          var entity = model.nodes[name] || model.groups[name] || model.chans[name] || null;
          if (entity == null) {
            // unable to find entity in nodes, groups and channels, lets check in components
            for (var nodeName in model.nodes) {
              for (var compName in model.nodes[nodeName].components) {
                if (compName == name) return model.nodes[nodeName].components[compName];
              }
            }
            var error = computeErrorPosition();
            throw getErrorPosition()+'Unable to find entity named "'+name+'"';
          }
          return entity;
        };
      
        var isComponent = function isComponent(name) {
          for (var nodeName in model.nodes) {
            for (var compName in model.nodes[nodeName].components) {
              if (compName == name) return true;
            }
          }
          return false;
        };
      
        var isChannel = function isChannel(name) {
          return (typeof(model.chans[name]) == 'undefined') ? false : true;
        }
      
        var isNode = function isNode(name) {
         return (typeof(model.nodes[name]) == 'undefined') ? false : true; 
        }
      
        var isGroup = function isGroup(name) {
         return (typeof(model.groups[name]) == 'undefined') ? false : true; 
        }
      
        var getErrorPosition = function getErrorPosition() {
          var error = computeErrorPosition();
          return '[l.'+error.line+' c.'+error.column+'] ';
        };
      
        var processDictionary = function processDictionary(entity, dictionary) {
          entity.dictionary = entity.dictionary || {};
          for (var i in dictionary) {
            if (typeof(dictionary[i].targetNodeName) == 'undefined') {
              entity.dictionary[dictionary[i].name] = {
                value: dictionary[i].value
              };
            } else {
              entity.dictionary[dictionary[i].name] = {
                value: dictionary[i].value,
                targetNodeName: dictionary[i].targetNodeName
              };
            }
          }
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
