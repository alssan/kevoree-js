/*  Prototype JavaScript framework, version 1.6.1
 *  (c) 2005-2009 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
var Kotlin = {};

(function () {
    "use strict";
    var emptyFunction = function () {
    };

    if (!Array.isArray) {
        Array.isArray = function (vArg) {
            return Object.prototype.toString.call(vArg) === "[object Array]";
        };
    }

    if (!Function.prototype.bind) {
        Function.prototype.bind = function (oThis) {
            if (typeof this !== "function") {
                // closest thing possible to the ECMAScript 5 internal IsCallable function
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            }

            var aArgs = Array.prototype.slice.call(arguments, 1),
                fToBind = this,
                fNOP = function () {
                },
                fBound = function () {
                    return fToBind.apply(this instanceof fNOP && oThis
                                             ? this
                                             : oThis,
                                         aArgs.concat(Array.prototype.slice.call(arguments)));
                };

            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();

            return fBound;
        };
    }

    Kotlin.keys = Object.keys || function (o) {
        var result = [];
        var i = 0;
        for (var p in o) {
            if (o.hasOwnProperty(p)) {
                result[i++] = p;
            }
        }
        return result;
    };

    function copyProperties(to, from) {
        for (var p in from) {
            if (from.hasOwnProperty(p)) {
                to[p] = from[p];
            }
        }
    }

    Kotlin.isType = function (object, klass) {
        if (object === null || object === undefined) {
            return false;
        }

        var current = object.get_class();
        while (current !== klass) {
            if (current === null || current === undefined) {
                return false;
            }
            current = current.superclass;
        }
        return true;
    };

    Kotlin.createTrait = function () {
        var n = arguments.length - 1;
        var result = arguments[n] || {};
        for (var i = 0; i < n; i++) {
            copyProperties(result, arguments[i]);
        }
        return result;
    };

    Kotlin.definePackage = function (members) {
        return members === null ? {} : members;
    };

    Kotlin.createClass = (function () {
        function subclass() {
        }

        function create(parent, properties, staticProperties) {
            var traits = null;
            if (parent instanceof Array) {
                traits = parent;
                parent = parent[0];
            }

            function klass() {
                this.initializing = klass;
                if (this.initialize) {
                    this.initialize.apply(this, arguments);
                }
            }

            klass.addMethods = addMethods;
            klass.superclass = parent || null;
            klass.subclasses = [];
            klass.object$ = object$;

            if (parent) {
                if (typeof (parent) == "function") {
                    subclass.prototype = parent.prototype;
                    klass.prototype = new subclass();
                    parent.subclasses.push(klass);
                }
                else {
                    // trait
                    klass.addMethods(parent);
                }
            }

            klass.addMethods({get_class: function () {
                return klass;
            }});

            if (parent !== null) {
                klass.addMethods({super_init: function () {
                    this.initializing = this.initializing.superclass;
                    this.initializing.prototype.initialize.apply(this, arguments);
                }});
            }

            if (traits !== null) {
                for (var i = 1, n = traits.length; i < n; i++) {
                    klass.addMethods(traits[i]);
                }
            }
            if (properties !== null && properties !== undefined) {
                klass.addMethods(properties);
            }

            if (!klass.prototype.initialize) {
                klass.prototype.initialize = emptyFunction;
            }

            klass.prototype.constructor = klass;
            if (staticProperties !== null && staticProperties !== undefined) {
                copyProperties(klass, staticProperties);
            }
            return klass;
        }

        function addMethods(source) {
            copyProperties(this.prototype, source);
            return this;
        }

        function object$() {
            if (typeof this.$object$ === "undefined") {
                this.$object$ = this.object_initializer$();
            }

            return this.$object$;
        }

        return create;
    })();

    Kotlin.$createClass = function (parent, properties) {
        if (parent !== null && typeof (parent) != "function") {
            properties = parent;
            parent = null;
        }
        return Kotlin.createClass(parent, properties, null);
    };

    Kotlin.createObjectWithPrototype = function (prototype) {
        function C() {}
        C.prototype = prototype;
        return new C();
    };

    Kotlin.$new = function (f) {
        var o = Kotlin.createObjectWithPrototype(f.prototype);
        return function () {
            f.apply(o, arguments);
            return o;
        };
    };

    Kotlin.createObject = function () {
        var singletonClass = Kotlin.createClass.apply(null, arguments);
        return new singletonClass();
    };

    Kotlin.defineModule = function (id, module) {
        if (id in Kotlin.modules) {
            throw Kotlin.$new(Kotlin.IllegalArgumentException)();
        }

        Kotlin.modules[id] = module;
    };
})();
/**
 * Copyright 2010 Tim Down.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

// todo inlined
String.prototype.startsWith = function (s) {
  return this.indexOf(s) === 0;
};

String.prototype.endsWith = function (s) {
  return this.indexOf(s, this.length - s.length) !== -1;
};

String.prototype.contains = function (s) {
  return this.indexOf(s) !== -1;
};

(function () {
    Kotlin.equals = function (obj1, obj2) {
        if (obj1 == null) {
            return obj2 == null;
        }

        if (Array.isArray(obj1)) {
            return Kotlin.arrayEquals(obj1, obj2);
        }

        if (typeof obj1 == "object" && obj1.equals !== undefined) {
            return obj1.equals(obj2);
        }

        return obj1 === obj2;
    };

    Kotlin.toString = function (o) {
        if (o == null) {
            return "null";
        }
        else if (Array.isArray(o)) {
            return Kotlin.arrayToString(o);
        }
        else {
            return o.toString();
        }
    };
    
    Kotlin.arrayToString = function(a) {
        return "[" + a.join(", ") + "]";
    };

    Kotlin.intUpto = function (from, to) {
        return Kotlin.$new(Kotlin.NumberRange)(from, to);
    };

    Kotlin.intDownto = function (from, to) {
        return Kotlin.$new(Kotlin.Progression)(from, to, -1);
    };

    Kotlin.modules = {};

    Kotlin.RuntimeException = Kotlin.$createClass();
    Kotlin.NullPointerException = Kotlin.$createClass();
    Kotlin.NoSuchElementException = Kotlin.$createClass();
    Kotlin.IllegalArgumentException = Kotlin.$createClass();
    Kotlin.IllegalStateException = Kotlin.$createClass();
    Kotlin.UnsupportedOperationException = Kotlin.$createClass();
    Kotlin.IOException = Kotlin.$createClass();

    Kotlin.throwNPE = function () {
        throw Kotlin.$new(Kotlin.NullPointerException)();
    };

    function throwAbstractFunctionInvocationError(funName) {
        return function() {
            var message;
            if (funName !== undefined) {
                message = "Function " + funName + " is abstract";
            } else {
                message = "Function is abstract";
            }
            throw new TypeError(message);
        };
    }

    Kotlin.Iterator = Kotlin.$createClass({
        initialize: function () {
        },
        next: throwAbstractFunctionInvocationError("Iterator#next"),
        hasNext: throwAbstractFunctionInvocationError("Iterator#hasNext")
    });

    var ArrayIterator = Kotlin.$createClass(Kotlin.Iterator, {
        initialize: function (array) {
            this.array = array;
            this.size = array.length;
            this.index = 0;
        },
        next: function () {
            return this.array[this.index++];
        },
        hasNext: function () {
            return this.index < this.size;
        }
    });

    var ListIterator = Kotlin.$createClass(ArrayIterator, {
        initialize: function (list) {
            this.list = list;
            this.size = list.size();
            this.index = 0;
        },
        next: function () {
            return this.list.get(this.index++);
        }
    });

    Kotlin.Collection = Kotlin.$createClass();

    Kotlin.Enum = Kotlin.$createClass(null, {
        initialize: function () {
            this.name$ = undefined;
            this.ordinal$ = undefined;
        },
        name: function () {
            return this.name$;
        },
        ordinal: function () {
            return this.ordinal$;
        },
        toString: function () {
            return this.name();
        }
    });
    (function (){
        function valueOf(name) {
            return this[name];
        }
        function getValues() {
            return this.values$;
        }

        Kotlin.createEnumEntries = function(enumEntryList) {
            var i = 0;
            var values = [];
            for (var entryName in enumEntryList) {
                if (enumEntryList.hasOwnProperty(entryName)) {
                    var entryObject = enumEntryList[entryName];
                    values[i] = entryObject;
                    entryObject.ordinal$ = i;
                    entryObject.name$ = entryName;
                    i++;
                }
            }
            enumEntryList.values$ = values;
            enumEntryList.valueOf = valueOf;
            enumEntryList.values = getValues;
            return enumEntryList;
        };
    })();

    Kotlin.PropertyMetadata = Kotlin.$createClass(null, {
        initialize: function(name) {
            this.$name = name;
        },
        get_name: function () {
            return this.$name;
        }
    });

    Kotlin.AbstractCollection = Kotlin.$createClass(Kotlin.Collection, {
        size: function () {
            return this.$size;
        },
        addAll: function (collection) {
            var it = collection.iterator();
            var i = this.size();
            while (i-- > 0) {
                this.add(it.next());
            }
        },
        isEmpty: function () {
            return this.size() === 0;
        },
        iterator: function () {
            return Kotlin.$new(ArrayIterator)(this.toArray());
        },
        equals: function (o) {
            if (this.size() !== o.size()) return false;

            var iterator1 = this.iterator();
            var iterator2 = o.iterator();
            var i = this.size();
            while (i-- > 0) {
                if (!Kotlin.equals(iterator1.next(), iterator2.next())) {
                    return false;
                }
            }

            return true;
        },
        toString: function () {
            var builder = "[";
            var iterator = this.iterator();
            var first = true;
            var i = this.$size;
            while (i-- > 0) {
                if (first) {
                    first = false;
                }
                else {
                    builder += ", ";
                }
                builder += iterator.next();
            }
            builder += "]";
            return builder;
        },
        toJSON: function () {
            return this.toArray();
        }
    });

    Kotlin.AbstractList = Kotlin.$createClass(Kotlin.AbstractCollection, {
        iterator: function () {
            return Kotlin.$new(ListIterator)(this);
        },
        remove: function (o) {
            var index = this.indexOf(o);
            if (index !== -1) {
                this.removeAt(index);
            }
        },
        contains: function (o) {
            return this.indexOf(o) !== -1;
        }
    });

    //TODO: should be JS Array-like (https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects)
    Kotlin.ArrayList = Kotlin.$createClass(Kotlin.AbstractList, {
        initialize: function () {
            this.array = [];
            this.$size = 0;
        },
        get: function (index) {
            this.checkRange(index);
            return this.array[index];
        },
        set: function (index, value) {
            this.checkRange(index);
            this.array[index] = value;
        },
        size: function () {
            return this.$size;
        },
        iterator: function () {
            return Kotlin.arrayIterator(this.array);
        },
        add: function (element) {
            this.array[this.$size++] = element;
        },
        addAt: function (index, element) {
            this.array.splice(index, 0, element);
            this.$size++;
        },
        addAll: function (collection) {
            var it = collection.iterator();
            for (var i = this.$size, n = collection.size(); n-- > 0;) {
                this.array[i++] = it.next();
            }

            this.$size += collection.size();
        },
        removeAt: function (index) {
            this.checkRange(index);
            this.$size--;
            return this.array.splice(index, 1)[0];
        },
        clear: function () {
            this.array.length = 0;
            this.$size = 0;
        },
        indexOf: function (o) {
            for (var i = 0, n = this.$size; i < n; ++i) {
                if (Kotlin.equals(this.array[i], o)) {
                    return i;
                }
            }
            return -1;
        },
        toArray: function () {
            return this.array.slice(0, this.$size);
        },
        toString: function () {
            return "[" + this.array.join(", ") + "]";
        },
        toJSON: function () {
            return this.array;
        },
        checkRange: function(index) {
            if (index < 0 || index >= this.$size) {
                throw new RangeError();
            }
        }
    });

    Kotlin.Runnable = Kotlin.$createClass({
        initialize: function () {
        },
        run: throwAbstractFunctionInvocationError("Runnable#run")
    });

    Kotlin.Comparable = Kotlin.$createClass({
        initialize: function () {
        },
        compareTo: throwAbstractFunctionInvocationError("Comparable#compareTo")
    });

    Kotlin.Appendable = Kotlin.$createClass({
        initialize: function () {
        },
        append: throwAbstractFunctionInvocationError("Appendable#append")
    });

    Kotlin.Closeable = Kotlin.$createClass({
        initialize: function () {
        },
        close: throwAbstractFunctionInvocationError("Closeable#close")
    });

    Kotlin.safeParseInt = function(str) {
        var r = parseInt(str, 10);
        return isNaN(r) ? null : r;
    };

    Kotlin.safeParseDouble = function(str) {
        var r = parseFloat(str);
        return isNaN(r) ? null : r;
    };

    Kotlin.arrayEquals = function (a, b) {
        if (a === b) {
            return true;
        }
        if (!Array.isArray(b) || a.length !== b.length) {
            return false;
        }

        for (var i = 0, n = a.length; i < n; i++) {
            if (!Kotlin.equals(a[i], b[i])) {
                return false;
            }
        }
        return true;
    };

    Kotlin.System = function () {
        var output = "";

        var print = function (obj) {
            if (obj !== undefined) {
                if (obj === null || typeof obj !== "object") {
                    output += obj;
                }
                else {
                    output += obj.toString();
                }
            }
        };
        var println = function (obj) {
            this.print(obj);
            output += "\n";
        };

        return {
            out: function () {
                return {
                    print: print,
                    println: println
                };
            },
            output: function () {
                return output;
            },
            flush: function () {
                output = "";
            }
        };
    }();

    Kotlin.println = function (s) {
        Kotlin.System.out().println(s);
    };

    Kotlin.print = function (s) {
        Kotlin.System.out().print(s);
    };

    Kotlin.RangeIterator = Kotlin.$createClass(Kotlin.Iterator, {
        initialize: function (start, end, increment) {
            this.$start = start;
            this.$end = end;
            this.$increment = increment;
            this.$i = start;
        },
        get_start: function () {
            return this.$start;
        },
        get_end: function () {
            return this.$end;
        },
        get_i: function () {
            return this.$i;
        },
        set_i: function (tmp$0) {
            this.$i = tmp$0;
        },
        next: function () {
            var value = this.$i;
            this.set_i(this.$i + this.$increment);
            return value;
        },
        hasNext: function () {
            return this.get_count() > 0;
        }
    });

    Kotlin.NumberRange = Kotlin.$createClass({
        initialize: function (start, end) {
            this.$start = start;
            this.$end = end;
        },
        get_start: function () {
            return this.$start;
        },
        get_end: function () {
            return this.$end;
        },
        get_increment: function () {
            return 1;
        },
        contains: function (number) {
            return this.$start <= number && number <= this.$end;
        },
        iterator: function () {
            return Kotlin.$new(Kotlin.RangeIterator)(this.get_start(), this.get_end());
        }
    });

    Kotlin.Progression = Kotlin.$createClass({
        initialize: function (start, end, increment) {
            this.$start = start;
            this.$end = end;
            this.$increment = increment;
        },
        get_start: function () {
            return this.$start;
        },
        get_end: function () {
            return this.$end;
        },
        get_increment: function () {
            return this.$increment;
        },
        iterator: function () {
            return Kotlin.$new(Kotlin.RangeIterator)(this.get_start(), this.get_end(), this.get_increment());
        }
    });

    Kotlin.Comparator = Kotlin.$createClass({
        initialize: function () {
        },
        compare: throwAbstractFunctionInvocationError("Comparator#compare")
    });

    var ComparatorImpl = Kotlin.$createClass(Kotlin.Comparator, {
        initialize: function (comparator) {
            this.compare = comparator;
        }
    });

    Kotlin.comparator = function (f) {
        return Kotlin.$new(ComparatorImpl)(f);
    };

    Kotlin.collectionsMax = function (c, comp) {
        if (c.isEmpty()) {
            //TODO: which exception?
            throw new Error();
        }
        var it = c.iterator();
        var max = it.next();
        while (it.hasNext()) {
            var el = it.next();
            if (comp.compare(max, el) < 0) {
                max = el;
            }
        }
        return max;
    };

    Kotlin.collectionsSort = function (mutableList, comparator) {
        var boundComparator = undefined;
        if (comparator !== undefined) {
            boundComparator = comparator.compare.bind(comparator);
        }

        if (mutableList instanceof Array) {
            mutableList.sort(boundComparator);
        }

        //TODO: should be deleted when List will be JS Array-like (https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects)
        var array = [];
        var it = mutableList.iterator();
        while (it.hasNext()) {
            array.push(it.next());
        }

        array.sort(boundComparator);

        for (var i = 0, n = array.length; i < n; i++) {
            mutableList.set(i, array[i]);
        }
    };


    Kotlin.StringBuilder = Kotlin.$createClass(
            {
                initialize:function () {
                    this.string = "";
                },
                append:function (obj) {
                    this.string = this.string + obj.toString();
                },
                toString:function () {
                    return this.string;
                }
            }
    );

    Kotlin.splitString = function (str, regex, limit) {
        return str.split(new RegExp(regex), limit);
    };

    Kotlin.nullArray = function (size) {
        var res = [];
        var i = size;
        while (i > 0) {
            res[--i] = null;
        }
        return res;
    };

    Kotlin.numberArrayOfSize = function (size) {
        return Kotlin.arrayFromFun(size, function(){ return 0; });
    };

    Kotlin.charArrayOfSize = function (size) {
        return Kotlin.arrayFromFun(size, function(){ return '\0'; });
    };

    Kotlin.booleanArrayOfSize = function (size) {
        return Kotlin.arrayFromFun(size, function(){ return false; });
    };

    Kotlin.arrayFromFun = function (size, initFun) {
        var result = new Array(size);
        for (var i = 0; i < size; i++) {
            result[i] = initFun(i);
        }
        return result;
    };

    Kotlin.arrayIndices = function (arr) {
        return Kotlin.$new(Kotlin.NumberRange)(0, arr.length - 1);
    };

    Kotlin.arrayIterator = function (array) {
        return Kotlin.$new(ArrayIterator)(array);
    };

    Kotlin.jsonFromTuples = function (pairArr) {
        var i = pairArr.length;
        var res = {};
        while (i > 0) {
            --i;
            res[pairArr[i][0]] = pairArr[i][1];
        }
        return res;
    };

    Kotlin.jsonAddProperties = function (obj1, obj2) {
        for (var p in obj2) {
            if (obj2.hasOwnProperty(p)) {
                obj1[p] = obj2[p];
            }
        }
        return obj1;
    };
})();

Kotlin.assignOwner = function(f, o) {
  f.o = o;
  return f;
};
/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";
(function () {
    var FUNCTION = "function";
    var arrayRemoveAt = (typeof Array.prototype.splice == FUNCTION) ?
                        function (arr, idx) {
                            arr.splice(idx, 1);
                        } :

                        function (arr, idx) {
                            var itemsAfterDeleted, i, len;
                            if (idx === arr.length - 1) {
                                arr.length = idx;
                            }
                            else {
                                itemsAfterDeleted = arr.slice(idx + 1);
                                arr.length = idx;
                                for (i = 0, len = itemsAfterDeleted.length; i < len; ++i) {
                                    arr[idx + i] = itemsAfterDeleted[i];
                                }
                            }
                        };

    function hashObject(obj) {
        var hashCode;
        if (typeof obj == "string") {
            return obj;
        }
        else if (typeof obj.hashCode == FUNCTION) {
            // Check the hashCode method really has returned a string
            hashCode = obj.hashCode();
            return (typeof hashCode == "string") ? hashCode : hashObject(hashCode);
        }
        else if (typeof obj.toString == FUNCTION) {
            return obj.toString();
        }
        else {
            try {
                return String(obj);
            }
            catch (ex) {
                // For host objects (such as ActiveObjects in IE) that have no toString() method and throw an error when
                // passed to String()
                return Object.prototype.toString.call(obj);
            }
        }
    }

    function equals_fixedValueHasEquals(fixedValue, variableValue) {
        return fixedValue.equals(variableValue);
    }

    function equals_fixedValueNoEquals(fixedValue, variableValue) {
        return (typeof variableValue.equals == FUNCTION) ?
               variableValue.equals(fixedValue) : (fixedValue === variableValue);
    }

    function createKeyValCheck(kvStr) {
        return function (kv) {
            if (kv === null) {
                throw new Error("null is not a valid " + kvStr);
            }
            else if (typeof kv == "undefined") {
                throw new Error(kvStr + " must not be undefined");
            }
        };
    }

    var checkKey = createKeyValCheck("key"), checkValue = createKeyValCheck("value");

    function Bucket(hash, firstKey, firstValue, equalityFunction) {
        this[0] = hash;
        this.entries = [];
        this.addEntry(firstKey, firstValue);

        if (equalityFunction !== null) {
            this.getEqualityFunction = function () {
                return equalityFunction;
            };
        }
    }

    var EXISTENCE = 0, ENTRY = 1, ENTRY_INDEX_AND_VALUE = 2;

    function createBucketSearcher(mode) {
        return function (key) {
            var i = this.entries.length, entry, equals = this.getEqualityFunction(key);
            while (i--) {
                entry = this.entries[i];
                if (equals(key, entry[0])) {
                    switch (mode) {
                        case EXISTENCE:
                            return true;
                        case ENTRY:
                            return entry;
                        case ENTRY_INDEX_AND_VALUE:
                            return [ i, entry[1] ];
                    }
                }
            }
            return false;
        };
    }

    function createBucketLister(entryProperty) {
        return function (aggregatedArr) {
            var startIndex = aggregatedArr.length;
            for (var i = 0, len = this.entries.length; i < len; ++i) {
                aggregatedArr[startIndex + i] = this.entries[i][entryProperty];
            }
        };
    }

    Bucket.prototype = {
        getEqualityFunction: function (searchValue) {
            return (typeof searchValue.equals == FUNCTION) ? equals_fixedValueHasEquals : equals_fixedValueNoEquals;
        },

        getEntryForKey: createBucketSearcher(ENTRY),

        getEntryAndIndexForKey: createBucketSearcher(ENTRY_INDEX_AND_VALUE),

        removeEntryForKey: function (key) {
            var result = this.getEntryAndIndexForKey(key);
            if (result) {
                arrayRemoveAt(this.entries, result[0]);
                return result[1];
            }
            return null;
        },

        addEntry: function (key, value) {
            this.entries[this.entries.length] = [key, value];
        },

        keys: createBucketLister(0),

        values: createBucketLister(1),

        getEntries: function (entries) {
            var startIndex = entries.length;
            for (var i = 0, len = this.entries.length; i < len; ++i) {
                // Clone the entry stored in the bucket before adding to array
                entries[startIndex + i] = this.entries[i].slice(0);
            }
        },

        containsKey: createBucketSearcher(EXISTENCE),

        containsValue: function (value) {
            var i = this.entries.length;
            while (i--) {
                if (value === this.entries[i][1]) {
                    return true;
                }
            }
            return false;
        }
    };

    /*----------------------------------------------------------------------------------------------------------------*/

    // Supporting functions for searching hashtable buckets

    function searchBuckets(buckets, hash) {
        var i = buckets.length, bucket;
        while (i--) {
            bucket = buckets[i];
            if (hash === bucket[0]) {
                return i;
            }
        }
        return null;
    }

    function getBucketForHash(bucketsByHash, hash) {
        var bucket = bucketsByHash[hash];

        // Check that this is a genuine bucket and not something inherited from the bucketsByHash's prototype
        return ( bucket && (bucket instanceof Bucket) ) ? bucket : null;
    }

    /*----------------------------------------------------------------------------------------------------------------*/

    var Hashtable = function (hashingFunctionParam, equalityFunctionParam) {
        var that = this;
        var buckets = [];
        var bucketsByHash = {};

        var hashingFunction = (typeof hashingFunctionParam == FUNCTION) ? hashingFunctionParam : hashObject;
        var equalityFunction = (typeof equalityFunctionParam == FUNCTION) ? equalityFunctionParam : null;

        this.put = function (key, value) {
            checkKey(key);
            checkValue(value);
            var hash = hashingFunction(key), bucket, bucketEntry, oldValue = null;

            // Check if a bucket exists for the bucket key
            bucket = getBucketForHash(bucketsByHash, hash);
            if (bucket) {
                // Check this bucket to see if it already contains this key
                bucketEntry = bucket.getEntryForKey(key);
                if (bucketEntry) {
                    // This bucket entry is the current mapping of key to value, so replace old value and we're done.
                    oldValue = bucketEntry[1];
                    bucketEntry[1] = value;
                }
                else {
                    // The bucket does not contain an entry for this key, so add one
                    bucket.addEntry(key, value);
                }
            }
            else {
                // No bucket exists for the key, so create one and put our key/value mapping in
                bucket = new Bucket(hash, key, value, equalityFunction);
                buckets[buckets.length] = bucket;
                bucketsByHash[hash] = bucket;
            }
            return oldValue;
        };

        this.get = function (key) {
            checkKey(key);

            var hash = hashingFunction(key);

            // Check if a bucket exists for the bucket key
            var bucket = getBucketForHash(bucketsByHash, hash);
            if (bucket) {
                // Check this bucket to see if it contains this key
                var bucketEntry = bucket.getEntryForKey(key);
                if (bucketEntry) {
                    // This bucket entry is the current mapping of key to value, so return the value.
                    return bucketEntry[1];
                }
            }
            return null;
        };

        this.containsKey = function (key) {
            checkKey(key);
            var bucketKey = hashingFunction(key);

            // Check if a bucket exists for the bucket key
            var bucket = getBucketForHash(bucketsByHash, bucketKey);

            return bucket ? bucket.containsKey(key) : false;
        };

        this.containsValue = function (value) {
            checkValue(value);
            var i = buckets.length;
            while (i--) {
                if (buckets[i].containsValue(value)) {
                    return true;
                }
            }
            return false;
        };

        this.clear = function () {
            buckets.length = 0;
            bucketsByHash = {};
        };

        this.isEmpty = function () {
            return !buckets.length;
        };

        var createBucketAggregator = function (bucketFuncName) {
            return function () {
                var aggregated = [], i = buckets.length;
                while (i--) {
                    buckets[i][bucketFuncName](aggregated);
                }
                return aggregated;
            };
        };

        this._keys = createBucketAggregator("keys");
        this._values = createBucketAggregator("values");
        this._entries = createBucketAggregator("getEntries");

        this.values = function () {
            var values = this._values();
            var i = values.length;
            var result = Kotlin.$new(Kotlin.ArrayList)();
            while (i--) {
                result.add(values[i]);
            }
            return result;
        };

        this.remove = function (key) {
            checkKey(key);

            var hash = hashingFunction(key), bucketIndex, oldValue = null;

            // Check if a bucket exists for the bucket key
            var bucket = getBucketForHash(bucketsByHash, hash);

            if (bucket) {
                // Remove entry from this bucket for this key
                oldValue = bucket.removeEntryForKey(key);
                if (oldValue !== null) {
                    // Entry was removed, so check if bucket is empty
                    if (!bucket.entries.length) {
                        // Bucket is empty, so remove it from the bucket collections
                        bucketIndex = searchBuckets(buckets, hash);
                        arrayRemoveAt(buckets, bucketIndex);
                        delete bucketsByHash[hash];
                    }
                }
            }
            return oldValue;
        };

        this.size = function () {
            var total = 0, i = buckets.length;
            while (i--) {
                total += buckets[i].entries.length;
            }
            return total;
        };

        this.each = function (callback) {
            var entries = that._entries(), i = entries.length, entry;
            while (i--) {
                entry = entries[i];
                callback(entry[0], entry[1]);
            }
        };


        this.putAll = function (hashtable, conflictCallback) {
            var entries = hashtable._entries();
            var entry, key, value, thisValue, i = entries.length;
            var hasConflictCallback = (typeof conflictCallback == FUNCTION);
            while (i--) {
                entry = entries[i];
                key = entry[0];
                value = entry[1];

                // Check for a conflict. The default behaviour is to overwrite the value for an existing key
                if (hasConflictCallback && (thisValue = that.get(key))) {
                    value = conflictCallback(key, thisValue, value);
                }
                that.put(key, value);
            }
        };

        this.clone = function () {
            var clone = new Hashtable(hashingFunctionParam, equalityFunctionParam);
            clone.putAll(that);
            return clone;
        };

        this.keySet = function () {
            var res = Kotlin.$new(Kotlin.ComplexHashSet)();
            var keys = this._keys();
            var i = keys.length;
            while (i--) {
                res.add(keys[i]);
            }
            return res;
        };
    };


    Kotlin.HashTable = Hashtable;
})();

Kotlin.Map = Kotlin.$createClass();

Kotlin.HashMap = Kotlin.$createClass(Kotlin.Map, {initialize: function () {
    Kotlin.HashTable.call(this);
}});

Kotlin.ComplexHashMap = Kotlin.HashMap;

(function () {
    var PrimitiveHashMapValuesIterator = Kotlin.$createClass(Kotlin.Iterator, {
        initialize: function (map, keys) {
            this.map = map;
            this.keys = keys;
            this.size = keys.length;
            this.index = 0;
        },
        next: function () {
            return this.map[this.keys[this.index++]];
        },
        hasNext: function () {
            return this.index < this.size;
        }
    });

    var PrimitiveHashMapValues = Kotlin.$createClass(Kotlin.Collection, {
        initialize: function (map) {
            this.map = map;
        },
        iterator: function () {
            return Kotlin.$new(PrimitiveHashMapValuesIterator)(this.map.map, Kotlin.keys(this.map.map));
        },
        isEmpty: function () {
            return this.map.$size === 0;
        },
        contains: function (o) {
            return this.map.containsValue(o);
        }
    });

    Kotlin.PrimitiveHashMap = Kotlin.$createClass(Kotlin.Map, {
        initialize: function () {
            this.$size = 0;
            this.map = {};
        },
        size: function () {
            return this.$size;
        },
        isEmpty: function () {
            return this.$size === 0;
        },
        containsKey: function (key) {
            return this.map[key] !== undefined;
        },
        containsValue: function (value) {
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key) && map[key] === value) {
                    return true;
                }
            }

            return false;
        },
        get: function (key) {
            return this.map[key];
        },
        put: function (key, value) {
            var prevValue = this.map[key];
            this.map[key] = value === undefined ? null : value;
            if (prevValue === undefined) {
                this.$size++;
            }
            return prevValue;
        },
        remove: function (key) {
            var prevValue = this.map[key];
            if (prevValue !== undefined) {
                delete this.map[key];
                this.$size--;
            }
            return prevValue;
        },
        clear: function () {
            this.$size = 0;
            this.map = {};
        },
        putAll: function (fromMap) {
            var map = fromMap.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    this.map[key] = map[key];
                    this.$size++;
                }
            }
        },
        keySet: function () {
            var result = Kotlin.$new(Kotlin.PrimitiveHashSet)();
            var map = this.map;
            for (var key in map) {
                if (map.hasOwnProperty(key)) {
                    result.add(key);
                }
            }

            return result;
        },
        values: function () {
            return Kotlin.$new(PrimitiveHashMapValues)(this);
        },
        toJSON: function () {
            return this.map;
        }
    });
}());

Kotlin.Set = Kotlin.$createClass(Kotlin.Collection);

Kotlin.PrimitiveHashSet = Kotlin.$createClass(Kotlin.AbstractCollection, {
    initialize: function () {
        this.$size = 0;
        this.map = {};
    },
    contains: function (key) {
        return this.map[key] === true;
    },
    add: function (element) {
        var prevElement = this.map[element];
        this.map[element] = true;
        if (prevElement === true) {
            return false;
        }
        else {
            this.$size++;
            return true;
        }
    },
    remove: function (element) {
        if (this.map[element] === true) {
            delete this.map[element];
            this.$size--;
            return true;
        }
        else {
            return false;
        }
    },
    clear: function () {
        this.$size = 0;
        this.map = {};
    },
    toArray: function () {
        return Kotlin.keys(this.map);
    }
});

(function () {
    function HashSet(hashingFunction, equalityFunction) {
        var hashTable = new Kotlin.HashTable(hashingFunction, equalityFunction);

        this.add = function (o) {
            hashTable.put(o, true);
        };

        this.addAll = function (arr) {
            var i = arr.length;
            while (i--) {
                hashTable.put(arr[i], true);
            }
        };

        this.values = function () {
            return hashTable._keys();
        };

        this.iterator = function () {
            return Kotlin.arrayIterator(this.values());
        };

        this.remove = function (o) {
            return hashTable.remove(o) ? o : null;
        };

        this.contains = function (o) {
            return hashTable.containsKey(o);
        };

        this.clear = function () {
            hashTable.clear();
        };

        this.size = function () {
            return hashTable.size();
        };

        this.isEmpty = function () {
            return hashTable.isEmpty();
        };

        this.clone = function () {
            var h = new HashSet(hashingFunction, equalityFunction);
            h.addAll(hashTable.keys());
            return h;
        };

        this.equals = function (o) {
            if (o === null || o === undefined) return false;
            if (this.size() === o.size()) {
                var iter1 = this.iterator();
                var iter2 = o.iterator();
                while (true) {
                    var hn1 = iter1.hasNext();
                    var hn2 = iter2.hasNext();
                    if (hn1 != hn2) return false;
                    if (!hn2)
                        return true;
                    else {
                        var o1 = iter1.next();
                        var o2 = iter2.next();
                        if (!Kotlin.equals(o1, o2)) return false;
                    }
                }
            }
            return false;
        };

        this.toString = function() {
            var builder = "[";
            var iter = this.iterator();
            var first = true;
            while (iter.hasNext()) {
                if (first)
                    first = false;
                else
                    builder += ", ";
                builder += iter.next();
            }
            builder += "]";
            return builder;
        };

        this.intersection = function (hashSet) {
            var intersection = new HashSet(hashingFunction, equalityFunction);
            var values = hashSet.values(), i = values.length, val;
            while (i--) {
                val = values[i];
                if (hashTable.containsKey(val)) {
                    intersection.add(val);
                }
            }
            return intersection;
        };

        this.union = function (hashSet) {
            var union = this.clone();
            var values = hashSet.values(), i = values.length, val;
            while (i--) {
                val = values[i];
                if (!hashTable.containsKey(val)) {
                    union.add(val);
                }
            }
            return union;
        };

        this.isSubsetOf = function (hashSet) {
            var values = hashTable.keys(), i = values.length;
            while (i--) {
                if (!hashSet.contains(values[i])) {
                    return false;
                }
            }
            return true;
        };
    }

    Kotlin.HashSet = Kotlin.$createClass(Kotlin.Set, {initialize: function () {
        HashSet.call(this);
    }});

    Kotlin.ComplexHashSet = Kotlin.HashSet;
}());
(function () {
  'use strict';
  var classes = function () {
    var ci = Kotlin.createTrait()
    , c0 = Kotlin.createTrait(ci, /** @lends _.org.kevoree.DeployUnit.prototype */ {
      get_name: function () {
        return this.$name;
      },
      set_name: function (tmp$0) {
        this.$name = tmp$0;
      },
      get_groupName: function () {
        return this.$groupName;
      },
      set_groupName: function (tmp$0) {
        this.$groupName = tmp$0;
      },
      get_unitName: function () {
        return this.$unitName;
      },
      set_unitName: function (tmp$0) {
        this.$unitName = tmp$0;
      },
      get_version: function () {
        return this.$version;
      },
      set_version: function (tmp$0) {
        this.$version = tmp$0;
      },
      get_url: function () {
        return this.$url;
      },
      set_url: function (tmp$0) {
        this.$url = tmp$0;
      },
      get_hashcode: function () {
        return this.$hashcode;
      },
      set_hashcode: function (tmp$0) {
        this.$hashcode = tmp$0;
      },
      get_type: function () {
        return this.$type;
      },
      set_type: function (tmp$0) {
        this.$type = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_requiredLibs: function () {
        return this.$requiredLibs;
      },
      set_requiredLibs: function (tmp$0) {
        this.$requiredLibs = tmp$0;
      },
      get_targetNodeType: function () {
        return this.$targetNodeType;
      },
      set_targetNodeType: function (tmp$0) {
        this.$targetNodeType = tmp$0;
      }
    })
    , cl = Kotlin.createTrait(ci, /** @lends _.org.kevoree.NamedElement.prototype */ {
      get_name: function () {
        return this.$name;
      },
      set_name: function (tmp$0) {
        this.$name = tmp$0;
      }
    })
    , c13 = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.Instance.prototype */ {
      get_metaData: function () {
        return this.$metaData;
      },
      set_metaData: function (tmp$0) {
        this.$metaData = tmp$0;
      },
      get_started: function () {
        return this.$started;
      },
      set_started: function (tmp$0) {
        this.$started = tmp$0;
      },
      get_typeDefinition: function () {
        return this.$typeDefinition;
      },
      set_typeDefinition: function (tmp$0) {
        this.$typeDefinition = tmp$0;
      },
      get_dictionary: function () {
        return this.$dictionary;
      },
      set_dictionary: function (tmp$0) {
        this.$dictionary = tmp$0;
      }
    })
    , c1 = Kotlin.createTrait([ci, cl, c13], /** @lends _.org.kevoree.ContainerNode.prototype */ {
      get_components: function () {
        return this.$components;
      },
      set_components: function (tmp$0) {
        this.$components = tmp$0;
      },
      get_hosts: function () {
        return this.$hosts;
      },
      set_hosts: function (tmp$0) {
        this.$hosts = tmp$0;
      },
      get_host: function () {
        return this.$host;
      },
      set_host: function (tmp$0) {
        this.$host = tmp$0;
      }
    })
    , c15 = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.TypeDefinition.prototype */ {
      get_factoryBean: function () {
        return this.$factoryBean;
      },
      set_factoryBean: function (tmp$0) {
        this.$factoryBean = tmp$0;
      },
      get_bean: function () {
        return this.$bean;
      },
      set_bean: function (tmp$0) {
        this.$bean = tmp$0;
      },
      get_abstract: function () {
        return this.$abstract;
      },
      set_abstract: function (tmp$0) {
        this.$abstract = tmp$0;
      },
      get_deployUnits: function () {
        return this.$deployUnits;
      },
      set_deployUnits: function (tmp$0) {
        this.$deployUnits = tmp$0;
      },
      get_dictionaryType: function () {
        return this.$dictionaryType;
      },
      set_dictionaryType: function (tmp$0) {
        this.$dictionaryType = tmp$0;
      },
      get_superTypes: function () {
        return this.$superTypes;
      },
      set_superTypes: function (tmp$0) {
        this.$superTypes = tmp$0;
      }
    })
    , c11 = Kotlin.createTrait([ci, c15], /** @lends _.org.kevoree.PortType.prototype */ {
      get_synchrone: function () {
        return this.$synchrone;
      },
      set_synchrone: function (tmp$0) {
        this.$synchrone = tmp$0;
      }
    })
    , c2 = Kotlin.createTrait([ci, c11], /** @lends _.org.kevoree.MessagePortType.prototype */ {
      get_filters: function () {
        return this.$filters;
      },
      set_filters: function (tmp$0) {
        this.$filters = tmp$0;
      }
    })
    , cn = Kotlin.createTrait([ci, c15], /** @lends _.org.kevoree.LifeCycleTypeDefinition.prototype */ {
      get_startMethod: function () {
        return this.$startMethod;
      },
      set_startMethod: function (tmp$0) {
        this.$startMethod = tmp$0;
      },
      get_stopMethod: function () {
        return this.$stopMethod;
      },
      set_stopMethod: function (tmp$0) {
        this.$stopMethod = tmp$0;
      },
      get_updateMethod: function () {
        return this.$updateMethod;
      },
      set_updateMethod: function (tmp$0) {
        this.$updateMethod = tmp$0;
      }
    })
    , c3 = Kotlin.createTrait([ci, cn])
    , c4 = Kotlin.createTrait()
    , c5 = Kotlin.createTrait()
    , c6 = Kotlin.createClass(c4, /** @lends _.org.kevoree.modeling.api.xmi.XMIModelLoader.prototype */ {
      initialize: function () {
        this.$LOADER_XMI_LOCAL_NAME = 'type';
        this.$LOADER_XMI_XSI = 'xsi';
        this.$factory = null;
        this.$attributesHashmap = new Kotlin.PrimitiveHashMap(0);
        this.$referencesHashmap = new Kotlin.PrimitiveHashMap(0);
        this.$attributeVisitor = _.org.kevoree.modeling.api.xmi.XMIModelLoader.f1(this);
        this.$referencesVisitor = _.org.kevoree.modeling.api.xmi.XMIModelLoader.f3(this);
      },
      get_LOADER_XMI_LOCAL_NAME: function () {
        return this.$LOADER_XMI_LOCAL_NAME;
      },
      get_LOADER_XMI_XSI: function () {
        return this.$LOADER_XMI_XSI;
      },
      get_factory: function () {
        return this.$factory;
      },
      set_factory: function (tmp$0) {
        this.$factory = tmp$0;
      },
      get_attributesHashmap: function () {
        return this.$attributesHashmap;
      },
      get_referencesHashmap: function () {
        return this.$referencesHashmap;
      },
      get_attributeVisitor: function () {
        return this.$attributeVisitor;
      },
      get_referencesVisitor: function () {
        return this.$referencesVisitor;
      },
      unescapeXml: function (src) {
        var builder = null;
        var i = 0;
        while (i < src.length) {
          var c = src.charAt(i);
          if (c === '&') {
            if (builder == null) {
              builder = new _.java.lang.StringBuilder();
              (builder != null ? builder : Kotlin.throwNPE()).append(src.substring(0, i));
            }
            if (src.charAt(i + 1) === 'a') {
              if (src.charAt(i + 2) === 'm') {
                builder != null ? builder.append('&') : null;
                i = i + 5;
              }
               else if (src.charAt(i + 2) === 'p') {
                builder != null ? builder.append("'") : null;
                i = i + 6;
              }
               else {
                Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1) + src.charAt(i + 2));
              }
            }
             else if (src.charAt(i + 1) === 'q') {
              builder != null ? builder.append('"') : null;
              i = i + 6;
            }
             else if (src.charAt(i + 1) === 'l') {
              builder != null ? builder.append('<') : null;
              i = i + 4;
            }
             else if (src.charAt(i + 1) === 'g') {
              builder != null ? builder.append('>') : null;
              i = i + 4;
            }
             else {
              Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1));
            }
          }
           else {
            if (builder != null) {
              builder != null ? builder.append_0(c) : null;
            }
            i++;
          }
        }
        if (builder != null) {
          return Kotlin.toString(builder);
        }
         else {
          return src;
        }
      },
      loadModelFromString: function (str) {
        var reader = new _.org.kevoree.modeling.api.xmi.XmlParser(_.org.kevoree.modeling.api.util.ByteConverter.byteArrayInputStreamFromString(str));
        if (reader.hasNext()) {
          return this.deserialize(reader);
        }
         else {
          Kotlin.println('Loader::Noting in the String !');
          return null;
        }
      },
      loadModelFromStream: function (inputStream) {
        var reader = new _.org.kevoree.modeling.api.xmi.XmlParser(inputStream);
        if (reader.hasNext()) {
          return this.deserialize(reader);
        }
         else {
          Kotlin.println('Loader::Noting in the file !');
          return null;
        }
      },
      loadObject: function (ctx, xmiAddress, objectType) {
        var tmp$0, tmp$12, tmp$13, tmp$14, tmp$15, tmp$16, tmp$17, tmp$18;
        var elementTagName = ((tmp$0 = ctx.get_xmiReader()) != null ? tmp$0 : Kotlin.throwNPE()).getLocalName();
        var modelElem;
        if (objectType != null) {
          var tmp$1;
          modelElem = (tmp$1 = this.get_factory()) != null ? tmp$1.create(objectType) : null;
          if (modelElem == null) {
            var xsiType = null;
            var tmp$2, tmp$3, tmp$4, tmp$5, tmp$6;
            {
              tmp$3 = new Kotlin.NumberRange(0, ((tmp$2 = ctx.get_xmiReader()) != null ? tmp$2 : Kotlin.throwNPE()).getAttributeCount() - 1), tmp$4 = tmp$3.get_start(), tmp$5 = tmp$3.get_end(), tmp$6 = tmp$3.get_increment();
              for (var i = tmp$4; i <= tmp$5; i += tmp$6) {
                var tmp$7, tmp$8;
                var localName = ((tmp$7 = ctx.get_xmiReader()) != null ? tmp$7 : Kotlin.throwNPE()).getAttributeLocalName(i);
                var xsi = ((tmp$8 = ctx.get_xmiReader()) != null ? tmp$8 : Kotlin.throwNPE()).getAttributePrefix(i);
                if (Kotlin.equals(localName, this.get_LOADER_XMI_LOCAL_NAME()) && Kotlin.equals(xsi, this.get_LOADER_XMI_XSI())) {
                  var tmp$9;
                  xsiType = ((tmp$9 = ctx.get_xmiReader()) != null ? tmp$9 : Kotlin.throwNPE()).getAttributeValue(i);
                  break;
                }
              }
            }
            if (xsiType != null) {
              var tmp$10;
              modelElem = (tmp$10 = this.get_factory()) != null ? tmp$10.create((xsiType != null ? xsiType : Kotlin.throwNPE()).substring((xsiType != null ? xsiType : Kotlin.throwNPE()).lastIndexOf(':') + 1, (xsiType != null ? xsiType : Kotlin.throwNPE()).length)) : null;
            }
          }
        }
         else {
          var tmp$11;
          modelElem = (tmp$11 = this.get_factory()) != null ? tmp$11.create(elementTagName != null ? elementTagName : Kotlin.throwNPE()) : null;
        }
        if (modelElem == null) {
          Kotlin.println('Could not create an object for local name ' + elementTagName);
        }
        ctx.get_map().put(xmiAddress, modelElem != null ? modelElem : Kotlin.throwNPE());
        if (!this.get_attributesHashmap().containsKey((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) {
          modelElem != null ? modelElem.visitAttributes(this.get_attributeVisitor()) : null;
        }
        var elemAttributesMap = (tmp$12 = this.get_attributesHashmap().get((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) != null ? tmp$12 : Kotlin.throwNPE();
        if (!this.get_referencesHashmap().containsKey((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) {
          modelElem != null ? modelElem.visit(this.get_referencesVisitor(), false, true, false) : null;
        }
        var elemReferencesMap = (tmp$13 = this.get_referencesHashmap().get((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) != null ? tmp$13 : Kotlin.throwNPE();
        {
          tmp$15 = new Kotlin.NumberRange(0, ((tmp$14 = ctx.get_xmiReader()) != null ? tmp$14 : Kotlin.throwNPE()).getAttributeCount() - 1), tmp$16 = tmp$15.get_start(), tmp$17 = tmp$15.get_end(), tmp$18 = tmp$15.get_increment();
          for (var i_0 = tmp$16; i_0 <= tmp$17; i_0 += tmp$18) {
            var tmp$19;
            var prefix = ((tmp$19 = ctx.get_xmiReader()) != null ? tmp$19 : Kotlin.throwNPE()).getAttributePrefix(i_0);
            if (prefix == null || Kotlin.equals(prefix, '')) {
              var tmp$20, tmp$21;
              var attrName = ((tmp$20 = ctx.get_xmiReader()) != null ? tmp$20 : Kotlin.throwNPE()).getAttributeLocalName(i_0);
              var valueAtt = ((tmp$21 = ctx.get_xmiReader()) != null ? tmp$21 : Kotlin.throwNPE()).getAttributeValue(i_0);
              if (valueAtt != null) {
                if (elemAttributesMap.containsKey(attrName)) {
                  modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), attrName != null ? attrName : Kotlin.throwNPE(), this.unescapeXml(valueAtt), false, false) : null;
                }
                 else {
                  var tmp$22, tmp$23, tmp$24;
                  {
                    tmp$22 = Kotlin.splitString(valueAtt, ' '), tmp$23 = tmp$22.length;
                    for (var tmp$24 = 0; tmp$24 !== tmp$23; ++tmp$24) {
                      var xmiRef = tmp$22[tmp$24];
                      {
                        var tmp$25, tmp$26;
                        if (xmiRef.startsWith('#')) {
                          tmp$25 = xmiRef.substring(1);
                        }
                         else {
                          tmp$25 = xmiRef;
                        }
                        var adjustedRef = tmp$25;
                        if (adjustedRef.startsWith('//')) {
                          tmp$26 = '/0' + adjustedRef.substring(1);
                        }
                         else {
                          tmp$26 = adjustedRef;
                        }
                        adjustedRef = tmp$26;
                        adjustedRef = adjustedRef.replace('.0', '');
                        var ref = ctx.get_map().get(adjustedRef);
                        if (ref != null) {
                          modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), attrName != null ? attrName : Kotlin.throwNPE(), ref, true, false) : null;
                        }
                         else {
                          ctx.get_resolvers().add(new _.org.kevoree.modeling.api.xmi.XMIResolveCommand(ctx, modelElem != null ? modelElem : Kotlin.throwNPE(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), attrName != null ? attrName : Kotlin.throwNPE(), adjustedRef));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        var done = false;
        while (!done) {
          var tmp$27;
          var tmp$28 = ((tmp$27 = ctx.get_xmiReader()) != null ? tmp$27 : Kotlin.throwNPE()).next();
          if (tmp$28 === _.org.kevoree.modeling.api.xmi.Token.get_START_TAG()) {
            var tmp$29, tmp$31;
            var subElemName = ((tmp$29 = ctx.get_xmiReader()) != null ? tmp$29 : Kotlin.throwNPE()).getLocalName();
            var i_1 = ctx.get_elementsCount().get(xmiAddress + '/@' + subElemName) !== null ? ctx.get_elementsCount().get(xmiAddress + '/@' + subElemName) : 0;
            var tmp$30 = xmiAddress + '/@' + subElemName;
            if (i_1 !== 0) {
              tmp$31 = '.' + i_1;
            }
             else {
              tmp$31 = '';
            }
            var subElementId = tmp$30 + tmp$31;
            var containedElement = this.loadObject(ctx, subElementId, elemReferencesMap.get(subElemName));
            modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), subElemName != null ? subElemName : Kotlin.throwNPE(), containedElement, true, false) : null;
            ctx.get_elementsCount().put(xmiAddress + '/@' + subElemName, i_1 + 1);
          }
           else if (tmp$28 === _.org.kevoree.modeling.api.xmi.Token.get_END_TAG()) {
            var tmp$32;
            if (Kotlin.equals(((tmp$32 = ctx.get_xmiReader()) != null ? tmp$32 : Kotlin.throwNPE()).getLocalName(), elementTagName)) {
              done = true;
            }
          }
           else {
          }
        }
        return modelElem != null ? modelElem : Kotlin.throwNPE();
      },
      deserialize: function (reader) {
        var context = new _.org.kevoree.modeling.api.xmi.LoadingContext();
        context.set_xmiReader(reader);
        while (reader.hasNext()) {
          var nextTag = reader.next();
          if (nextTag === _.org.kevoree.modeling.api.xmi.Token.get_START_TAG()) {
            var localName = reader.getLocalName();
            if (localName != null) {
              var loadedRootsSize = context.get_loadedRoots().size();
              context.get_loadedRoots().add(this.loadObject(context, '/' + loadedRootsSize, null));
            }
             else {
              Kotlin.println('Tried to read a tag with null tag_name.');
            }
          }
           else if (nextTag === _.org.kevoree.modeling.api.xmi.Token.get_END_TAG()) {
            break;
          }
           else if (nextTag === _.org.kevoree.modeling.api.xmi.Token.get_END_DOCUMENT()) {
            break;
          }
           else {
          }
        }
        {
          var tmp$0 = context.get_resolvers().iterator();
          while (tmp$0.hasNext()) {
            var res = tmp$0.next();
            res.run();
          }
        }
        return context.get_loadedRoots();
      }
    }, /** @lends _.org.kevoree.modeling.api.xmi.XMIModelLoader */ {
      f0: function () {
        return new Kotlin.PrimitiveHashMap(0);
      },
      f1: function ($outer) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelAttributeVisitor, {
          initialize: function () {
          },
          visit: function (value, name, parent) {
            _.kotlin.getOrPut($outer.get_attributesHashmap(), parent.metaClassName(), _.org.kevoree.modeling.api.xmi.XMIModelLoader.f0).put(name, true);
          }
        });
      },
      f2: function () {
        return new Kotlin.PrimitiveHashMap(0);
      },
      f3: function ($outer) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
            this.$refMap = null;
          },
          get_refMap: function () {
            return this.$refMap;
          },
          set_refMap: function (tmp$0) {
            this.$refMap = tmp$0;
          },
          beginVisitElem: function (elem) {
            this.set_refMap(_.kotlin.getOrPut($outer.get_referencesHashmap(), elem.metaClassName(), _.org.kevoree.modeling.api.xmi.XMIModelLoader.f2));
          },
          endVisitElem: function (elem) {
            this.set_refMap(null);
          },
          beginVisitRef: function (refName, refType) {
            var tmp$0;
            ((tmp$0 = this.get_refMap()) != null ? tmp$0 : Kotlin.throwNPE()).put(refName, refType);
          },
          visit: function (elem, refNameInParent, parent) {
          }
        });
      }
    })
    , ca = Kotlin.createTrait()
    , c7 = Kotlin.createClass(ca, /** @lends _.org.kevoree.modeling.api.xmi.XMIModelSerializer.prototype */ {
      initialize: function () {
      },
      serialize: function (oMS) {
        var oo = new _.java.io.ByteArrayOutputStream();
        this.serialize_0(oMS, oo);
        oo.flush();
        return oo.toString();
      },
      serialize_0: function (oMS, ostream) {
        var wt = new _.java.io.PrintStream(new _.java.io.BufferedOutputStream(ostream), false);
        var addressTable = new Kotlin.ComplexHashMap(0);
        var packageList = new Kotlin.ArrayList(0);
        addressTable.put(oMS, '/');
        var elementsCount = new Kotlin.PrimitiveHashMap(0);
        var addressBuilderVisitor = new _.org.kevoree.modeling.api.xmi.ModelAddressVisitor(addressTable, elementsCount, packageList);
        oMS.visit(addressBuilderVisitor, true, true, false);
        var masterVisitor = new _.org.kevoree.modeling.api.xmi.ModelSerializationVisitor(wt, addressTable, elementsCount);
        wt.println('<?xml version="1.0" encoding="UTF-8"?>');
        wt.print('<' + this.formatMetaClassName(oMS.metaClassName()).replace('.', '_'));
        wt.print(' xmlns:xsi="http://wwww.w3.org/2001/XMLSchema-instance"');
        wt.print(' xmi:version="2.0"');
        wt.print(' xmlns:xmi="http://www.omg.org/XMI"');
        var index = 0;
        while (index < _.kotlin.get_size(packageList)) {
          wt.print(' xmlns:' + packageList.get(index).replace('.', '_') + '="http://' + packageList.get(index) + '"');
          index++;
        }
        oMS.visitAttributes(new _.org.kevoree.modeling.api.xmi.AttributesVisitor(wt));
        oMS.visit(new _.org.kevoree.modeling.api.xmi.ReferencesVisitor(wt, addressTable, elementsCount), false, false, true);
        wt.println('>');
        oMS.visit(masterVisitor, false, true, false);
        wt.println('<\/' + this.formatMetaClassName(oMS.metaClassName()).replace('.', '_') + '>');
        wt.flush();
      },
      formatMetaClassName: function (metaClassName) {
        var lastPoint = _.js.lastIndexOf_0(metaClassName, '.');
        var pack = metaClassName.substring(0, lastPoint);
        var cls = metaClassName.substring(lastPoint + 1);
        return pack + ':' + cls;
      }
    })
    , c8 = Kotlin.createTrait(/** @lends _.org.kevoree.modeling.api.ModelCloner.prototype */ {
      get_mainFactory: function () {
        return this.$mainFactory;
      },
      set_mainFactory: function (tmp$0) {
        this.$mainFactory = tmp$0;
      },
      clone: function (o) {
        return this.clone_0(o, false);
      },
      clone_0: function (o, readOnly) {
        return this.clone_1(o, readOnly, false);
      },
      cloneMutableOnly: function (o, readOnly) {
        return this.clone_1(o, readOnly, true);
      },
      cloneModelElem: function (src) {
        var tmp$0;
        var clonedSrc = (tmp$0 = this.get_mainFactory().create(src.metaClassName())) != null ? tmp$0 : Kotlin.throwNPE();
        var attributesCloner = _.org.kevoree.modeling.api.ModelCloner.f0(clonedSrc);
        src.visitAttributes(attributesCloner);
        return clonedSrc;
      },
      resolveModelElem: function (src, target, context, mutableOnly) {
        var refResolver = _.org.kevoree.modeling.api.ModelCloner.f1(mutableOnly, target, context);
        src.visit(refResolver, false, true, true);
      },
      clone_1: function (o, readOnly, mutableOnly) {
        var context = this.createContext();
        var clonedObject = this.cloneModelElem(o);
        context.put(o, clonedObject);
        var cloneGraphVisitor = _.org.kevoree.modeling.api.ModelCloner.f2(this, mutableOnly, context);
        o.visit(cloneGraphVisitor, true, true, false);
        var resolveGraphVisitor = _.org.kevoree.modeling.api.ModelCloner.f3(this, mutableOnly, context, readOnly);
        o.visit(resolveGraphVisitor, true, true, false);
        this.resolveModelElem(o, clonedObject, context, mutableOnly);
        if (readOnly) {
          clonedObject.setInternalReadOnly();
        }
        return clonedObject != null ? clonedObject : Kotlin.throwNPE();
      }
    }, /** @lends _.org.kevoree.modeling.api.ModelCloner */ {
      f0: function (clonedSrc) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelAttributeVisitor, {
          initialize: function () {
          },
          visit: function (value, name, parent) {
            if (value != null) {
              clonedSrc.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), name, value, false, false);
            }
          }
        });
      },
      f1: function (mutableOnly, target, context) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            if (mutableOnly && elem.isRecursiveReadOnly()) {
              target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), refNameInParent, elem, false, false);
            }
             else {
              target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), refNameInParent, context.get(elem), false, false);
            }
          }
        });
      },
      f2: function ($outer, mutableOnly, context) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            if (mutableOnly && elem.isRecursiveReadOnly()) {
              this.noChildrenVisit();
            }
             else {
              context.put(elem, $outer.cloneModelElem(elem));
            }
          }
        });
      },
      f3: function ($outer, mutableOnly, context, readOnly) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            if (mutableOnly && elem.isRecursiveReadOnly()) {
            }
             else {
              var tmp$0;
              var clonedObj = (tmp$0 = context.get(elem)) != null ? tmp$0 : Kotlin.throwNPE();
              $outer.resolveModelElem(elem, clonedObj, context, mutableOnly);
              if (readOnly) {
                clonedObj.setInternalReadOnly();
              }
            }
          }
        });
      }
    })
    , c9 = Kotlin.createTrait(/** @lends _.org.kevoree.modeling.api.compare.ModelCompare.prototype */ {
      diff: function (origin, target) {
        return this.createSequence().populate(this.internal_diff(origin, target, false, false));
      },
      merge: function (origin, target) {
        return this.createSequence().populate(this.internal_diff(origin, target, false, true));
      },
      inter: function (origin, target) {
        return this.createSequence().populate(this.internal_diff(origin, target, true, false));
      },
      internal_diff: function (origin, target, inter, merge) {
        var traces = new Kotlin.ArrayList(0);
        var tracesRef = new Kotlin.ArrayList(0);
        var objectsMap = new Kotlin.PrimitiveHashMap(0);
        traces.addAll(origin.createTraces(target, inter, merge, false, true));
        tracesRef.addAll(origin.createTraces(target, inter, merge, true, false));
        var visitor = _.org.kevoree.modeling.api.compare.ModelCompare.f0(objectsMap);
        origin.visit(visitor, true, true, false);
        var visitor2 = _.org.kevoree.modeling.api.compare.ModelCompare.f1(objectsMap, inter, traces, merge, tracesRef);
        target.visit(visitor2, true, true, false);
        if (!inter) {
          if (!merge) {
            {
              var tmp$0 = objectsMap.values().iterator();
              while (tmp$0.hasNext()) {
                var diffChild = tmp$0.next();
                var tmp$3, tmp$5, tmp$6;
                if (diffChild.eContainer() != null) {
                  var tmp$1, tmp$2;
                  tmp$3 = (tmp$2 = ((tmp$1 = diffChild.eContainer()) != null ? tmp$1 : Kotlin.throwNPE()).path()) != null ? tmp$2 : Kotlin.throwNPE();
                }
                 else {
                  tmp$3 = 'null';
                }
                var src = tmp$3;
                if (diffChild.getRefInParent() != null) {
                  var tmp$4;
                  tmp$5 = (tmp$4 = diffChild.getRefInParent()) != null ? tmp$4 : Kotlin.throwNPE();
                }
                 else {
                  tmp$5 = 'null';
                }
                var refNameInParent = tmp$5;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace(src, refNameInParent, (tmp$6 = (diffChild != null ? diffChild : Kotlin.throwNPE()).path()) != null ? tmp$6 : Kotlin.throwNPE()));
              }
            }
          }
        }
        traces.addAll(tracesRef);
        return traces;
      }
    }, /** @lends _.org.kevoree.modeling.api.compare.ModelCompare */ {
      f0: function (objectsMap) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            var childPath = elem.path();
            if (childPath != null) {
              objectsMap.put(childPath, elem);
            }
             else {
              throw new Error('Null child path ' + elem);
            }
          }
        });
      },
      f1: function (objectsMap, inter, traces, merge, tracesRef) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            var childPath = elem.path();
            if (childPath != null) {
              if (objectsMap.containsKey(childPath)) {
                if (inter) {
                  var tmp$0;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$0 = parent.path()) != null ? tmp$0 : Kotlin.throwNPE(), refNameInParent, elem.path(), elem.metaClassName()));
                }
                var tmp$1, tmp$2;
                traces.addAll(((tmp$1 = objectsMap.get(childPath)) != null ? tmp$1 : Kotlin.throwNPE()).createTraces(elem, inter, merge, false, true));
                tracesRef.addAll(((tmp$2 = objectsMap.get(childPath)) != null ? tmp$2 : Kotlin.throwNPE()).createTraces(elem, inter, merge, true, false));
                objectsMap.remove(childPath);
              }
               else {
                if (!inter) {
                  var tmp$3;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$3 = parent.path()) != null ? tmp$3 : Kotlin.throwNPE(), refNameInParent, elem.path(), elem.metaClassName()));
                  traces.addAll(elem.createTraces(elem, true, merge, false, true));
                  tracesRef.addAll(elem.createTraces(elem, true, merge, true, false));
                }
              }
            }
             else {
              throw new Error('Null child path ' + elem);
            }
          }
        });
      }
    })
    , cb = Kotlin.createClass(c4, /** @lends _.org.kevoree.modeling.api.json.JSONModelLoader.prototype */ {
      initialize: function () {
        this.$factory = null;
      },
      get_factory: function () {
        return this.$factory;
      },
      set_factory: function (tmp$0) {
        this.$factory = tmp$0;
      },
      loadModelFromString: function (str) {
        return this.deserialize(_.org.kevoree.modeling.api.util.ByteConverter.byteArrayInputStreamFromString(str));
      },
      loadModelFromStream: function (inputStream) {
        return this.deserialize(inputStream);
      },
      deserialize: function (instream) {
        var resolverCommands = new Kotlin.ArrayList(0);
        var roots = new Kotlin.ArrayList(0);
        var lexer = new _.org.kevoree.modeling.api.json.Lexer(instream);
        var currentToken = lexer.nextToken();
        if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACE()) {
          this.loadObject(lexer, null, null, roots, resolverCommands);
        }
         else {
          throw new Error('Bad Format / {\xA0expected');
        }
        {
          var tmp$0 = resolverCommands.iterator();
          while (tmp$0.hasNext()) {
            var resol = tmp$0.next();
            resol.run();
          }
        }
        return roots;
      },
      loadObject: function (lexer, nameInParent, parent, roots, commands) {
        var currentToken = lexer.nextToken();
        var currentObject = null;
        if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_VALUE()) {
          if (Kotlin.equals(currentToken.get_value(), 'eClass')) {
            lexer.nextToken();
            currentToken = lexer.nextToken();
            var tmp$0, tmp$1;
            var name = (tmp$0 = Kotlin.toString(currentToken.get_value())) != null ? tmp$0 : Kotlin.throwNPE();
            currentObject = (tmp$1 = this.get_factory()) != null ? tmp$1.create(name) : null;
            if (parent == null) {
              roots.add(currentObject != null ? currentObject : Kotlin.throwNPE());
            }
            var currentNameAttOrRef = null;
            var refModel = false;
            currentToken = lexer.nextToken();
            while (currentToken.get_tokenType() !== _.org.kevoree.modeling.api.json.Type.get_EOF()) {
              if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACE()) {
                this.loadObject(lexer, currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE(), currentObject, roots, commands);
              }
              if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_COMMA()) {
              }
              if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_VALUE()) {
                if (currentNameAttOrRef == null) {
                  currentNameAttOrRef = Kotlin.toString(currentToken.get_value());
                }
                 else {
                  if (refModel) {
                    var tmp$2;
                    commands.add(new _.org.kevoree.modeling.api.json.ResolveCommand(roots, Kotlin.toString((tmp$2 = currentToken.get_value()) != null ? tmp$2 : Kotlin.throwNPE()), currentObject != null ? currentObject : Kotlin.throwNPE(), currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE()));
                  }
                   else {
                    (currentObject != null ? currentObject : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE(), this.unescapeJSON(Kotlin.toString(currentToken.get_value())), false, false);
                    currentNameAttOrRef = null;
                  }
                }
              }
              if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACKET()) {
                currentToken = lexer.nextToken();
                if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACE()) {
                  this.loadObject(lexer, currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE(), currentObject, roots, commands);
                }
                 else {
                  refModel = true;
                  if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_VALUE()) {
                    var tmp$3;
                    commands.add(new _.org.kevoree.modeling.api.json.ResolveCommand(roots, Kotlin.toString((tmp$3 = currentToken.get_value()) != null ? tmp$3 : Kotlin.throwNPE()), currentObject != null ? currentObject : Kotlin.throwNPE(), currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE()));
                  }
                }
              }
              if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_RIGHT_BRACKET()) {
                currentNameAttOrRef = null;
                refModel = false;
              }
              if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_RIGHT_BRACE()) {
                if (parent != null) {
                  parent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), nameInParent != null ? nameInParent : Kotlin.throwNPE(), currentObject, false, false);
                }
                return;
              }
              currentToken = lexer.nextToken();
            }
          }
           else {
            throw new Error('Bad Format / eClass att must be first');
          }
        }
         else {
          throw new Error('Bad Format');
        }
      },
      unescapeJSON: function (src) {
        var builder = null;
        var i = 0;
        while (i < src.length) {
          var c = src.charAt(i);
          if (c === '&') {
            if (builder == null) {
              builder = src.substring(0, i);
            }
            if (src.charAt(i + 1) === 'a') {
              builder = (builder != null ? builder : Kotlin.throwNPE()) + "'";
              i = i + 6;
            }
             else if (src.charAt(i + 1) === 'q') {
              builder = (builder != null ? builder : Kotlin.throwNPE()) + '"';
              i = i + 6;
            }
             else {
              Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1));
            }
          }
           else {
            if (builder != null) {
              builder = (builder != null ? builder : Kotlin.throwNPE()) + c;
            }
            i++;
          }
        }
        if (builder != null) {
          return builder != null ? builder : Kotlin.throwNPE();
        }
         else {
          return src;
        }
      }
    })
    , cc = Kotlin.createClass(ca, /** @lends _.org.kevoree.modeling.api.json.JSONModelSerializer.prototype */ {
      initialize: function () {
      },
      serialize: function (model) {
        var outstream = new _.java.io.ByteArrayOutputStream();
        this.serialize_0(model, outstream);
        outstream.close();
        return outstream.toString();
      },
      serialize_0: function (model, raw) {
        var out = new _.java.io.PrintStream(new _.java.io.BufferedOutputStream(raw), false);
        var internalReferenceVisitor = new _.org.kevoree.modeling.api.json.ModelReferenceVisitor(out);
        var masterVisitor = _.org.kevoree.modeling.api.json.JSONModelSerializer.f0(this, out, internalReferenceVisitor);
        model.visit(masterVisitor, true, true, false);
        out.flush();
      },
      printAttName: function (elem, out) {
        out.print('\n{"eClass":"' + elem.metaClassName() + '"');
        var attributeVisitor = _.org.kevoree.modeling.api.json.JSONModelSerializer.f1(this, out);
        elem.visitAttributes(attributeVisitor);
      },
      escapeJson: function (ostream, chain) {
        if (chain == null) {
          return;
        }
        var i = 0;
        while (i < chain.length) {
          var c = chain.charAt(i);
          if (c === '"') {
            ostream.print('&quot;');
          }
           else if (c === "'") {
            ostream.print('&apos;');
          }
           else {
            ostream.print_0(c);
          }
          i = i + 1;
        }
      }
    }, /** @lends _.org.kevoree.modeling.api.json.JSONModelSerializer */ {
      f0: function ($outer, out, internalReferenceVisitor) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
            this.$isFirstInRef = true;
          },
          get_isFirstInRef: function () {
            return this.$isFirstInRef;
          },
          set_isFirstInRef: function (tmp$0) {
            this.$isFirstInRef = tmp$0;
          },
          beginVisitElem: function (elem) {
            if (!this.get_isFirstInRef()) {
              out.print(',');
              this.set_isFirstInRef(false);
            }
            $outer.printAttName(elem, out);
            var tmp$0;
            (tmp$0 = internalReferenceVisitor.get_alreadyVisited()) != null ? tmp$0.clear() : null;
            elem.visit(internalReferenceVisitor, false, false, true);
          },
          endVisitElem: function (elem) {
            out.println('}');
            this.set_isFirstInRef(false);
          },
          beginVisitRef: function (refName, refType) {
            out.print(',"' + refName + '":[');
            this.set_isFirstInRef(true);
          },
          endVisitRef: function (refName) {
            out.print(']');
            this.set_isFirstInRef(false);
          },
          visit: function (elem, refNameInParent, parent) {
          }
        });
      },
      f1: function ($outer, out) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelAttributeVisitor, {
          initialize: function () {
          },
          visit: function (value, name, parent) {
            if (value != null) {
              out.print(',"' + name + '":"');
              $outer.escapeJson(out, Kotlin.toString(value));
              out.print('"');
            }
          }
        });
      }
    })
    , cd = Kotlin.createTrait()
    , ce = Kotlin.createTrait(cd)
    , cf = Kotlin.createTrait()
    , cg = Kotlin.createTrait()
    , ch = Kotlin.createTrait(/** @lends _.org.kevoree.modeling.api.trace.TraceSequence.prototype */ {
      get_traces: function () {
        return this.$traces;
      },
      set_traces: function (tmp$0) {
        this.$traces = tmp$0;
      },
      get_factory: function () {
        return this.$factory;
      },
      set_factory: function (tmp$0) {
        this.$factory = tmp$0;
      },
      populate: function (addtraces) {
        this.get_traces().addAll(addtraces);
        return this;
      },
      populateFromString: function (addtracesTxt) {
        return this.populateFromStream(_.org.kevoree.modeling.api.util.ByteConverter.byteArrayInputStreamFromString(addtracesTxt));
      },
      populateFromStream: function (inputStream) {
        var lexer = new _.org.kevoree.modeling.api.json.Lexer(inputStream);
        var currentToken = lexer.nextToken();
        if (currentToken.get_tokenType() !== _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACKET()) {
          throw new Error('Bad Format : expect [');
        }
        currentToken = lexer.nextToken();
        var keys = new Kotlin.PrimitiveHashMap(0);
        var previousName = null;
        while (currentToken.get_tokenType() !== _.org.kevoree.modeling.api.json.Type.get_EOF() && currentToken.get_tokenType() !== _.org.kevoree.modeling.api.json.Type.get_RIGHT_BRACKET()) {
          if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACE()) {
            keys.clear();
          }
          if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_VALUE()) {
            if (previousName != null) {
              keys.put(previousName != null ? previousName : Kotlin.throwNPE(), Kotlin.toString(currentToken.get_value()));
              previousName = null;
            }
             else {
              previousName = Kotlin.toString(currentToken.get_value());
            }
          }
          if (currentToken.get_tokenType() === _.org.kevoree.modeling.api.json.Type.get_RIGHT_BRACE()) {
            var tmp$0;
            var tmp$1 = (tmp$0 = keys.get('traceType')) != null ? tmp$0 : Kotlin.throwNPE();
            if (tmp$1 === Kotlin.toString(_.org.kevoree.modeling.api.util.ActionType.get_SET())) {
              var tmp$2, tmp$3;
              this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = keys.get('src')) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$3 = keys.get('refname')) != null ? tmp$3 : Kotlin.throwNPE(), keys.get('objpath'), keys.get('content'), keys.get('typename')));
            }
             else if (tmp$1 === Kotlin.toString(_.org.kevoree.modeling.api.util.ActionType.get_ADD())) {
              var tmp$4, tmp$5, tmp$6;
              this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$4 = keys.get('src')) != null ? tmp$4 : Kotlin.throwNPE(), (tmp$5 = keys.get('refname')) != null ? tmp$5 : Kotlin.throwNPE(), (tmp$6 = keys.get('previouspath')) != null ? tmp$6 : Kotlin.throwNPE(), keys.get('typename')));
            }
             else if (tmp$1 === Kotlin.toString(_.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL())) {
              var tmp$7, tmp$8, tmp$9, tmp$10, tmp$11, tmp$12;
              this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$7 = keys.get('src')) != null ? tmp$7 : Kotlin.throwNPE(), (tmp$8 = keys.get('refname')) != null ? tmp$8 : Kotlin.throwNPE(), (tmp$10 = (tmp$9 = keys.get('content')) != null ? Kotlin.splitString(tmp$9, ';') : null) != null ? _.kotlin.toList_2(tmp$10) : null, (tmp$12 = (tmp$11 = keys.get('typename')) != null ? Kotlin.splitString(tmp$11, ';') : null) != null ? _.kotlin.toList_2(tmp$12) : null));
            }
             else if (tmp$1 === Kotlin.toString(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE())) {
              var tmp$13, tmp$14, tmp$15;
              this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$13 = keys.get('src')) != null ? tmp$13 : Kotlin.throwNPE(), (tmp$14 = keys.get('refname')) != null ? tmp$14 : Kotlin.throwNPE(), (tmp$15 = keys.get('objpath')) != null ? tmp$15 : Kotlin.throwNPE()));
            }
             else if (tmp$1 === Kotlin.toString(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL())) {
              var tmp$16, tmp$17;
              this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$16 = keys.get('src')) != null ? tmp$16 : Kotlin.throwNPE(), (tmp$17 = keys.get('refname')) != null ? tmp$17 : Kotlin.throwNPE()));
            }
             else if (tmp$1 === Kotlin.toString(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX())) {
            }
             else {
              Kotlin.println('Trace lost !!!');
            }
          }
          currentToken = lexer.nextToken();
        }
        return this;
      },
      exportToString: function () {
        var buffer = new _.java.lang.StringBuilder();
        buffer.append('[');
        var isFirst = true;
        {
          var tmp$0 = this.get_traces().iterator();
          while (tmp$0.hasNext()) {
            var trace = tmp$0.next();
            if (!isFirst) {
              buffer.append(',');
            }
            buffer.append(trace.toString());
            isFirst = false;
          }
        }
        buffer.append(']');
        return buffer.toString();
      },
      applyOn: function (target) {
        var tmp$0;
        var traceApplicator = new _.org.kevoree.modeling.api.trace.ModelTraceApplicator(target, (tmp$0 = this.get_factory()) != null ? tmp$0 : Kotlin.throwNPE());
        traceApplicator.applyTraceOnModel(this);
        return true;
      }
    })
    , cj = Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.util.ModelVisitor.prototype */ {
      initialize: function () {
        this.$visitStopped = false;
        this.$visitChildren = true;
        this.$alreadyVisited = null;
      },
      get_visitStopped: function () {
        return this.$visitStopped;
      },
      set_visitStopped: function (tmp$0) {
        this.$visitStopped = tmp$0;
      },
      stopVisit: function () {
        this.set_visitStopped(true);
      },
      get_visitChildren: function () {
        return this.$visitChildren;
      },
      set_visitChildren: function (tmp$0) {
        this.$visitChildren = tmp$0;
      },
      noChildrenVisit: function () {
        this.set_visitChildren(true);
      },
      get_alreadyVisited: function () {
        return this.$alreadyVisited;
      },
      set_alreadyVisited: function (tmp$0) {
        this.$alreadyVisited = tmp$0;
      },
      beginVisitElem: function (elem) {
      },
      endVisitElem: function (elem) {
      },
      beginVisitRef: function (refName, refType) {
      },
      endVisitRef: function (refName) {
      }
    })
    , ck = Kotlin.createTrait()
    , cm = Kotlin.createTrait(ci, /** @lends _.org.kevoree.Wire.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_ports: function () {
        return this.$ports;
      },
      set_ports: function (tmp$0) {
        this.$ports = tmp$0;
      }
    })
    , co = Kotlin.createTrait(ci, /** @lends _.org.kevoree.Repository.prototype */ {
      get_url: function () {
        return this.$url;
      },
      set_url: function (tmp$0) {
        this.$url = tmp$0;
      },
      get_units: function () {
        return this.$units;
      },
      set_units: function (tmp$0) {
        this.$units = tmp$0;
      }
    })
    , cp = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.NetworkProperty.prototype */ {
      get_value: function () {
        return this.$value;
      },
      set_value: function (tmp$0) {
        this.$value = tmp$0;
      },
      get_lastCheck: function () {
        return this.$lastCheck;
      },
      set_lastCheck: function (tmp$0) {
        this.$lastCheck = tmp$0;
      }
    })
    , cq = Kotlin.createTrait([ci, c11], /** @lends _.org.kevoree.ServicePortType.prototype */ {
      get_interface: function () {
        return this.$interface;
      },
      set_interface: function (tmp$0) {
        this.$interface = tmp$0;
      },
      get_operations: function () {
        return this.$operations;
      },
      set_operations: function (tmp$0) {
        this.$operations = tmp$0;
      }
    })
    , cr = Kotlin.createTrait([ci, cn], /** @lends _.org.kevoree.ChannelType.prototype */ {
      get_lowerBindings: function () {
        return this.$lowerBindings;
      },
      set_lowerBindings: function (tmp$0) {
        this.$lowerBindings = tmp$0;
      },
      get_upperBindings: function () {
        return this.$upperBindings;
      },
      set_upperBindings: function (tmp$0) {
        this.$upperBindings = tmp$0;
      },
      get_lowerFragments: function () {
        return this.$lowerFragments;
      },
      set_lowerFragments: function (tmp$0) {
        this.$lowerFragments = tmp$0;
      },
      get_upperFragments: function () {
        return this.$upperFragments;
      },
      set_upperFragments: function (tmp$0) {
        this.$upperFragments = tmp$0;
      }
    })
    , cs = Kotlin.createTrait(ci, /** @lends _.org.kevoree.AdaptationPrimitiveTypeRef.prototype */ {
      get_maxTime: function () {
        return this.$maxTime;
      },
      set_maxTime: function (tmp$0) {
        this.$maxTime = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_ref: function () {
        return this.$ref;
      },
      set_ref: function (tmp$0) {
        this.$ref = tmp$0;
      }
    })
    , ct = Kotlin.createTrait(ci, /** @lends _.org.kevoree.ContainerRoot.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_nodes: function () {
        return this.$nodes;
      },
      set_nodes: function (tmp$0) {
        this.$nodes = tmp$0;
      },
      get_typeDefinitions: function () {
        return this.$typeDefinitions;
      },
      set_typeDefinitions: function (tmp$0) {
        this.$typeDefinitions = tmp$0;
      },
      get_repositories: function () {
        return this.$repositories;
      },
      set_repositories: function (tmp$0) {
        this.$repositories = tmp$0;
      },
      get_dataTypes: function () {
        return this.$dataTypes;
      },
      set_dataTypes: function (tmp$0) {
        this.$dataTypes = tmp$0;
      },
      get_libraries: function () {
        return this.$libraries;
      },
      set_libraries: function (tmp$0) {
        this.$libraries = tmp$0;
      },
      get_hubs: function () {
        return this.$hubs;
      },
      set_hubs: function (tmp$0) {
        this.$hubs = tmp$0;
      },
      get_mBindings: function () {
        return this.$mBindings;
      },
      set_mBindings: function (tmp$0) {
        this.$mBindings = tmp$0;
      },
      get_deployUnits: function () {
        return this.$deployUnits;
      },
      set_deployUnits: function (tmp$0) {
        this.$deployUnits = tmp$0;
      },
      get_nodeNetworks: function () {
        return this.$nodeNetworks;
      },
      set_nodeNetworks: function (tmp$0) {
        this.$nodeNetworks = tmp$0;
      },
      get_groups: function () {
        return this.$groups;
      },
      set_groups: function (tmp$0) {
        this.$groups = tmp$0;
      },
      get_adaptationPrimitiveTypes: function () {
        return this.$adaptationPrimitiveTypes;
      },
      set_adaptationPrimitiveTypes: function (tmp$0) {
        this.$adaptationPrimitiveTypes = tmp$0;
      }
    })
    , cu = Kotlin.createTrait([ci, cl, c13], /** @lends _.org.kevoree.Channel.prototype */ {
      get_bindings: function () {
        return this.$bindings;
      },
      set_bindings: function (tmp$0) {
        this.$bindings = tmp$0;
      }
    })
    , cv = Kotlin.createTrait(ci, /** @lends _.org.kevoree.container.KMFContainerImpl.prototype */ {
      get_internal_eContainer: function () {
        return this.$internal_eContainer;
      },
      set_internal_eContainer: function (tmp$0) {
        this.$internal_eContainer = tmp$0;
      },
      get_internal_unsetCmd: function () {
        return this.$internal_unsetCmd;
      },
      set_internal_unsetCmd: function (tmp$0) {
        this.$internal_unsetCmd = tmp$0;
      },
      eContainer: function () {
        return this.get_internal_eContainer();
      },
      get_internal_containmentRefName: function () {
        return this.$internal_containmentRefName;
      },
      set_internal_containmentRefName: function (tmp$0) {
        this.$internal_containmentRefName = tmp$0;
      },
      get_internal_readOnlyElem: function () {
        return this.$internal_readOnlyElem;
      },
      set_internal_readOnlyElem: function (tmp$0) {
        this.$internal_readOnlyElem = tmp$0;
      },
      get_internal_recursive_readOnlyElem: function () {
        return this.$internal_recursive_readOnlyElem;
      },
      set_internal_recursive_readOnlyElem: function (tmp$0) {
        this.$internal_recursive_readOnlyElem = tmp$0;
      },
      setRecursiveReadOnly: function () {
        if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
          return;
        }
        this.setInternalRecursiveReadOnly();
        var recVisitor = _.org.kevoree.container.KMFContainerImpl.f0();
        this.visit(recVisitor, true, true, true);
        this.setInternalReadOnly();
      },
      setInternalReadOnly: function () {
        this.set_internal_readOnlyElem(true);
      },
      setInternalRecursiveReadOnly: function () {
        this.set_internal_recursive_readOnlyElem(true);
      },
      getRefInParent: function () {
        return this.get_internal_containmentRefName();
      },
      isReadOnly: function () {
        return this.get_internal_readOnlyElem();
      },
      isRecursiveReadOnly: function () {
        return this.get_internal_recursive_readOnlyElem();
      },
      setEContainer: function (container, unsetCmd, refNameInParent) {
        this.set_path_cache(null);
        if (this.get_internal_readOnlyElem()) {
          return;
        }
        var tempUnsetCmd = this.get_internal_unsetCmd();
        this.set_internal_unsetCmd(null);
        if (tempUnsetCmd != null) {
          tempUnsetCmd.run();
        }
        this.set_internal_eContainer(container);
        this.set_internal_unsetCmd(unsetCmd);
        this.set_internal_containmentRefName(refNameInParent);
      },
      selectByQuery: function (query) {
        throw new Error('Not activated, please add selector option in KMF generation plugin');
      },
      get_internal_modelElementListeners: function () {
        return this.$internal_modelElementListeners;
      },
      set_internal_modelElementListeners: function (tmp$0) {
        this.$internal_modelElementListeners = tmp$0;
      },
      fireModelEvent: function (evt) {
        if (this.get_internal_modelElementListeners() != null) {
          var tmp$0;
          {
            var tmp$1 = ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
            while (tmp$1.hasNext()) {
              var lst = tmp$1.next();
              lst.elementChanged(evt);
            }
          }
        }
        this.fireModelEventOnTree(evt);
      },
      addModelElementListener: function (lst) {
        if (this.get_internal_modelElementListeners() == null) {
          this.set_internal_modelElementListeners(new Kotlin.ArrayList(0));
        }
        var tmp$0;
        ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).add(lst);
      },
      removeModelElementListener: function (lst) {
        if (this.get_internal_modelElementListeners() != null) {
          var tmp$0, tmp$1;
          ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).remove(lst);
          if (((tmp$1 = this.get_internal_modelElementListeners()) != null ? tmp$1 : Kotlin.throwNPE()).isEmpty()) {
            this.set_internal_modelElementListeners(null);
          }
        }
      },
      removeAllModelElementListeners: function () {
        if (this.get_internal_modelElementListeners() != null) {
          var tmp$0;
          ((tmp$0 = this.get_internal_modelElementListeners()) != null ? tmp$0 : Kotlin.throwNPE()).clear();
          this.set_internal_modelElementListeners(null);
        }
      },
      get_internal_modelTreeListeners: function () {
        return this.$internal_modelTreeListeners;
      },
      set_internal_modelTreeListeners: function (tmp$0) {
        this.$internal_modelTreeListeners = tmp$0;
      },
      fireModelEventOnTree: function (evt) {
        if (this.get_internal_modelTreeListeners() != null) {
          var tmp$0;
          {
            var tmp$1 = ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
            while (tmp$1.hasNext()) {
              var lst = tmp$1.next();
              lst.elementChanged(evt);
            }
          }
        }
        if (this.eContainer() != null) {
          var tmp$2;
          ((tmp$2 = this.eContainer()) != null ? tmp$2 : Kotlin.throwNPE()).fireModelEventOnTree(evt);
        }
      },
      addModelTreeListener: function (lst) {
        if (this.get_internal_modelTreeListeners() == null) {
          this.set_internal_modelTreeListeners(new Kotlin.ArrayList(0));
        }
        var tmp$0;
        ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).add(lst);
      },
      removeModelTreeListener: function (lst) {
        if (this.get_internal_modelTreeListeners() != null) {
          var tmp$0, tmp$1;
          ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).remove(lst);
          if (((tmp$1 = this.get_internal_modelTreeListeners()) != null ? tmp$1 : Kotlin.throwNPE()).isEmpty()) {
            this.set_internal_modelTreeListeners(null);
          }
        }
      },
      removeAllModelTreeListeners: function () {
        if (this.get_internal_modelTreeListeners() != null) {
          var tmp$0;
          ((tmp$0 = this.get_internal_modelTreeListeners()) != null ? tmp$0 : Kotlin.throwNPE()).clear();
          this.set_internal_modelElementListeners(null);
        }
      },
      visit: function (visitor, recursive, containedReference, nonContainedReference) {
      },
      visitAttributes: function (visitor) {
      },
      internal_visit: function (visitor, internalElem, recursive, containedReference, nonContainedReference, refName) {
        if (internalElem != null) {
          if (nonContainedReference && recursive) {
            var tmp$0, tmp$1, tmp$2;
            var elemPath = (tmp$0 = internalElem.path()) != null ? tmp$0 : Kotlin.throwNPE();
            if (visitor.get_alreadyVisited() != null && ((tmp$1 = visitor.get_alreadyVisited()) != null ? tmp$1 : Kotlin.throwNPE()).containsKey(elemPath)) {
              return;
            }
            if (visitor.get_alreadyVisited() == null) {
              visitor.set_alreadyVisited(new Kotlin.PrimitiveHashMap(0));
            }
            ((tmp$2 = visitor.get_alreadyVisited()) != null ? tmp$2 : Kotlin.throwNPE()).put(elemPath, internalElem);
          }
          visitor.visit(internalElem, refName, this);
          if (!visitor.get_visitStopped()) {
            if (recursive && visitor.get_visitChildren()) {
              internalElem.visit(visitor, recursive, containedReference, nonContainedReference);
            }
            visitor.set_visitChildren(true);
          }
        }
      },
      get_path_cache: function () {
        return this.$path_cache;
      },
      set_path_cache: function (tmp$0) {
        this.$path_cache = tmp$0;
      },
      path: function () {
        if (this.get_path_cache() != null) {
          return this.get_path_cache();
        }
        var container = this.eContainer();
        if (container != null) {
          var parentPath = container.path();
          if (parentPath == null) {
            return null;
          }
           else {
            var tmp$0;
            if (Kotlin.equals(parentPath, '')) {
              tmp$0 = '';
            }
             else {
              tmp$0 = parentPath + '/';
            }
            this.set_path_cache(tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']');
          }
        }
         else {
          this.set_path_cache('');
        }
        return this.get_path_cache();
      },
      modelEquals: function (similarObj) {
        if (similarObj == null) {
          return false;
        }
        if (Kotlin.equals(this, similarObj)) {
          return true;
        }
        if (!Kotlin.equals(similarObj.metaClassName(), this.metaClassName())) {
          return false;
        }
        var values = new Kotlin.PrimitiveHashMap(0);
        var attVisitor = _.org.kevoree.container.KMFContainerImpl.f1(values);
        this.visitAttributes(attVisitor);
        similarObj.visitAttributes(attVisitor);
        if (!values.isEmpty()) {
          return false;
        }
        var payload = '';
        var refVisitor = _.org.kevoree.container.KMFContainerImpl.f2(values, payload);
        this.visit(refVisitor, false, false, true);
        similarObj.visit(refVisitor, false, false, true);
        if (!values.isEmpty()) {
          return false;
        }
        return true;
      },
      deepModelEquals: function (similarObj) {
        if (!this.modelEquals(similarObj)) {
          return false;
        }
        var similarRoot = similarObj != null ? similarObj : Kotlin.throwNPE();
        while (similarRoot.eContainer() != null) {
          var tmp$0;
          similarRoot = (tmp$0 = similarRoot.eContainer()) != null ? tmp$0 : Kotlin.throwNPE();
        }
        var resultTest = {v: true};
        var finalRoot = similarRoot;
        var objVisitor = _.org.kevoree.container.KMFContainerImpl.f3(finalRoot, resultTest);
        this.visit(objVisitor, true, true, false);
        return resultTest.v;
      },
      findByPath: function (query) {
        var firstSepIndex = _.js.indexOf(query, '[');
        var queryID = '';
        var extraReadChar = 2;
        var relationName = query.substring(0, _.js.indexOf(query, '['));
        if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
          queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
          extraReadChar = extraReadChar + 2;
        }
         else {
          var indexFirstClose = _.js.indexOf(query, ']');
          while (indexFirstClose + 1 < query.length && query.charAt(indexFirstClose + 1) !== '/') {
            indexFirstClose = _.js.indexOf_0(query, ']', indexFirstClose + 1);
          }
          queryID = query.substring(_.js.indexOf(query, '[') + 1, indexFirstClose);
        }
        var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
        if (_.js.indexOf(subquery, '/') !== -1) {
          subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, subquery.length);
        }
        var objFound = this.findByID(relationName, queryID);
        if (!Kotlin.equals(subquery, '') && objFound != null) {
          return objFound.findByPath(subquery);
        }
         else {
          return objFound;
        }
      },
      createTraces: function (similarObj, isInter, isMerge, onlyReferences, onlyAttributes) {
        var traces = new Kotlin.ArrayList(0);
        var values = new Kotlin.PrimitiveHashMap(0);
        if (onlyAttributes) {
          var attVisitorFill = _.org.kevoree.container.KMFContainerImpl.f4(values);
          this.visitAttributes(attVisitorFill);
          var attVisitor = _.org.kevoree.container.KMFContainerImpl.f5(this, values, isInter, traces);
          if (similarObj != null) {
            similarObj.visitAttributes(attVisitor);
          }
          if (!isInter && !isMerge && _.kotlin.get_size_0(values) !== 0) {
            {
              var tmp$0 = values.keySet().iterator();
              while (tmp$0.hasNext()) {
                var hashLoopRes = tmp$0.next();
                var tmp$1;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), hashLoopRes, null, null, null));
              }
            }
          }
        }
        if (onlyReferences) {
          var payload = '';
          var refVisitorFill = _.org.kevoree.container.KMFContainerImpl.f6(values, payload);
          this.visit(refVisitorFill, false, false, true);
          var refVisitor = _.org.kevoree.container.KMFContainerImpl.f7(this, values, isInter, traces);
          if (similarObj != null) {
            similarObj.visit(refVisitor, false, false, true);
          }
          if (!isInter && !isMerge && _.kotlin.get_size_0(values) !== 0) {
            {
              var tmp$2 = values.keySet().iterator();
              while (tmp$2.hasNext()) {
                var hashLoopRes_0 = tmp$2.next();
                var splittedVal = Kotlin.splitString(hashLoopRes_0, '_');
                var tmp$3;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), splittedVal[0], splittedVal[1]));
              }
            }
          }
        }
        return traces;
      }
    }, /** @lends _.org.kevoree.container.KMFContainerImpl */ {
      f0: function () {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            if (elem.isRecursiveReadOnly()) {
              this.noChildrenVisit();
            }
             else {
              (elem != null ? elem : Kotlin.throwNPE()).setInternalRecursiveReadOnly();
              elem.setInternalReadOnly();
            }
          }
        });
      },
      f1: function (values) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelAttributeVisitor, {
          initialize: function () {
          },
          visit: function (value, name, parent) {
            if (values.containsKey(name)) {
              if (Kotlin.equals(values.get(name), Kotlin.toString(value))) {
                values.remove(name);
              }
            }
             else {
              values.put(name, Kotlin.toString(value));
            }
          }
        });
      },
      f2: function (values, payload) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            var concatedKey = refNameInParent + '_' + elem.path();
            if (values.containsKey(concatedKey)) {
              values.remove(concatedKey);
            }
             else {
              values.put(concatedKey, payload);
            }
          }
        });
      },
      f3: function (finalRoot, resultTest) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            var tmp$0;
            var similarSubObj = finalRoot.findByPath((tmp$0 = elem.path()) != null ? tmp$0 : Kotlin.throwNPE());
            if (!elem.modelEquals(similarSubObj)) {
              resultTest = false;
              this.stopVisit();
            }
          }
        });
      },
      f4: function (values) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelAttributeVisitor, {
          initialize: function () {
          },
          visit: function (value, name, parent) {
            values.put(name, Kotlin.toString(value));
          }
        });
      },
      f5: function ($outer, values, isInter, traces) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelAttributeVisitor, {
          initialize: function () {
          },
          visit: function (value, name, parent) {
            var attVal2;
            if (value != null) {
              attVal2 = Kotlin.toString(value);
            }
             else {
              attVal2 = null;
            }
            if (Kotlin.equals(values.get(name), attVal2)) {
              if (isInter) {
                var tmp$0;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = $outer.path()) != null ? tmp$0 : Kotlin.throwNPE(), name, null, attVal2, null));
              }
            }
             else {
              if (!isInter) {
                var tmp$1;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = $outer.path()) != null ? tmp$1 : Kotlin.throwNPE(), name, null, attVal2, null));
              }
            }
            values.remove(name);
          }
        });
      },
      f6: function (values, payload) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            var concatedKey = refNameInParent + '_' + elem.path();
            values.put(concatedKey, payload);
          }
        });
      },
      f7: function ($outer, values, isInter, traces) {
        return Kotlin.createObject(_.org.kevoree.modeling.api.util.ModelVisitor, {
          initialize: function () {
            this.super_init();
          },
          visit: function (elem, refNameInParent, parent) {
            var concatedKey = refNameInParent + '_' + elem.path();
            if (values.get(concatedKey) != null) {
              if (isInter) {
                var tmp$0, tmp$1;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$0 = $outer.path()) != null ? tmp$0 : Kotlin.throwNPE(), refNameInParent, (tmp$1 = elem.path()) != null ? tmp$1 : Kotlin.throwNPE(), null));
              }
            }
             else {
              if (!isInter) {
                var tmp$2, tmp$3;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$2 = $outer.path()) != null ? tmp$2 : Kotlin.throwNPE(), refNameInParent, (tmp$3 = elem.path()) != null ? tmp$3 : Kotlin.throwNPE(), null));
              }
            }
            values.remove(concatedKey);
          }
        });
      }
    })
    , cw = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.TypedElement.prototype */ {
      get_genericTypes: function () {
        return this.$genericTypes;
      },
      set_genericTypes: function (tmp$0) {
        this.$genericTypes = tmp$0;
      }
    })
    , cx = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.Parameter.prototype */ {
      get_order: function () {
        return this.$order;
      },
      set_order: function (tmp$0) {
        this.$order = tmp$0;
      },
      get_type: function () {
        return this.$type;
      },
      set_type: function (tmp$0) {
        this.$type = tmp$0;
      }
    })
    , cy = Kotlin.createTrait(ci, /** @lends _.org.kevoree.NodeNetwork.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_link: function () {
        return this.$link;
      },
      set_link: function (tmp$0) {
        this.$link = tmp$0;
      },
      get_initBy: function () {
        return this.$initBy;
      },
      set_initBy: function (tmp$0) {
        this.$initBy = tmp$0;
      },
      get_target: function () {
        return this.$target;
      },
      set_target: function (tmp$0) {
        this.$target = tmp$0;
      }
    })
    , cz = Kotlin.createTrait(ci, /** @lends _.org.kevoree.NodeLink.prototype */ {
      get_networkType: function () {
        return this.$networkType;
      },
      set_networkType: function (tmp$0) {
        this.$networkType = tmp$0;
      },
      get_estimatedRate: function () {
        return this.$estimatedRate;
      },
      set_estimatedRate: function (tmp$0) {
        this.$estimatedRate = tmp$0;
      },
      get_lastCheck: function () {
        return this.$lastCheck;
      },
      set_lastCheck: function (tmp$0) {
        this.$lastCheck = tmp$0;
      },
      get_zoneID: function () {
        return this.$zoneID;
      },
      set_zoneID: function (tmp$0) {
        this.$zoneID = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_networkProperties: function () {
        return this.$networkProperties;
      },
      set_networkProperties: function (tmp$0) {
        this.$networkProperties = tmp$0;
      }
    })
    , c10 = Kotlin.createTrait(ci, /** @lends _.org.kevoree.MBinding.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_port: function () {
        return this.$port;
      },
      set_port: function (tmp$0) {
        this.$port = tmp$0;
      },
      get_hub: function () {
        return this.$hub;
      },
      set_hub: function (tmp$0) {
        this.$hub = tmp$0;
      }
    })
    , c12 = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.Operation.prototype */ {
      get_parameters: function () {
        return this.$parameters;
      },
      set_parameters: function (tmp$0) {
        this.$parameters = tmp$0;
      },
      get_returnType: function () {
        return this.$returnType;
      },
      set_returnType: function (tmp$0) {
        this.$returnType = tmp$0;
      }
    })
    , c14 = Kotlin.createTrait([ci, cn], /** @lends _.org.kevoree.NodeType.prototype */ {
      get_managedPrimitiveTypes: function () {
        return this.$managedPrimitiveTypes;
      },
      set_managedPrimitiveTypes: function (tmp$0) {
        this.$managedPrimitiveTypes = tmp$0;
      },
      get_managedPrimitiveTypeRefs: function () {
        return this.$managedPrimitiveTypeRefs;
      },
      set_managedPrimitiveTypeRefs: function (tmp$0) {
        this.$managedPrimitiveTypeRefs = tmp$0;
      }
    })
    , c16 = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.PortTypeRef.prototype */ {
      get_optional: function () {
        return this.$optional;
      },
      set_optional: function (tmp$0) {
        this.$optional = tmp$0;
      },
      get_noDependency: function () {
        return this.$noDependency;
      },
      set_noDependency: function (tmp$0) {
        this.$noDependency = tmp$0;
      },
      get_ref: function () {
        return this.$ref;
      },
      set_ref: function (tmp$0) {
        this.$ref = tmp$0;
      },
      get_mappings: function () {
        return this.$mappings;
      },
      set_mappings: function (tmp$0) {
        this.$mappings = tmp$0;
      }
    })
    , c17 = Kotlin.createTrait([ci, cw], /** @lends _.org.kevoree.DictionaryAttribute.prototype */ {
      get_optional: function () {
        return this.$optional;
      },
      set_optional: function (tmp$0) {
        this.$optional = tmp$0;
      },
      get_state: function () {
        return this.$state;
      },
      set_state: function (tmp$0) {
        this.$state = tmp$0;
      },
      get_datatype: function () {
        return this.$datatype;
      },
      set_datatype: function (tmp$0) {
        this.$datatype = tmp$0;
      },
      get_fragmentDependant: function () {
        return this.$fragmentDependant;
      },
      set_fragmentDependant: function (tmp$0) {
        this.$fragmentDependant = tmp$0;
      }
    })
    , c1g = Kotlin.createTrait([ci, cn], /** @lends _.org.kevoree.ComponentType.prototype */ {
      get_required: function () {
        return this.$required;
      },
      set_required: function (tmp$0) {
        this.$required = tmp$0;
      },
      get_integrationPatterns: function () {
        return this.$integrationPatterns;
      },
      set_integrationPatterns: function (tmp$0) {
        this.$integrationPatterns = tmp$0;
      },
      get_extraFonctionalProperties: function () {
        return this.$extraFonctionalProperties;
      },
      set_extraFonctionalProperties: function (tmp$0) {
        this.$extraFonctionalProperties = tmp$0;
      },
      get_provided: function () {
        return this.$provided;
      },
      set_provided: function (tmp$0) {
        this.$provided = tmp$0;
      }
    })
    , c18 = Kotlin.createTrait([ci, c1g], /** @lends _.org.kevoree.CompositeType.prototype */ {
      get_childs: function () {
        return this.$childs;
      },
      set_childs: function (tmp$0) {
        this.$childs = tmp$0;
      },
      get_wires: function () {
        return this.$wires;
      },
      set_wires: function (tmp$0) {
        this.$wires = tmp$0;
      }
    })
    , c19 = Kotlin.createTrait(c5)
    , c1a = Kotlin.createTrait(ci, /** @lends _.org.kevoree.DictionaryValue.prototype */ {
      get_value: function () {
        return this.$value;
      },
      set_value: function (tmp$0) {
        this.$value = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_attribute: function () {
        return this.$attribute;
      },
      set_attribute: function (tmp$0) {
        this.$attribute = tmp$0;
      },
      get_targetNode: function () {
        return this.$targetNode;
      },
      set_targetNode: function (tmp$0) {
        this.$targetNode = tmp$0;
      }
    })
    , c1b = Kotlin.createTrait(ci, /** @lends _.org.kevoree.PortTypeMapping.prototype */ {
      get_beanMethodName: function () {
        return this.$beanMethodName;
      },
      set_beanMethodName: function (tmp$0) {
        this.$beanMethodName = tmp$0;
      },
      get_serviceMethodName: function () {
        return this.$serviceMethodName;
      },
      set_serviceMethodName: function (tmp$0) {
        this.$serviceMethodName = tmp$0;
      },
      get_paramTypes: function () {
        return this.$paramTypes;
      },
      set_paramTypes: function (tmp$0) {
        this.$paramTypes = tmp$0;
      },
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      }
    })
    , c1c = Kotlin.createTrait([ci, c13], /** @lends _.org.kevoree.Group.prototype */ {
      get_subNodes: function () {
        return this.$subNodes;
      },
      set_subNodes: function (tmp$0) {
        this.$subNodes = tmp$0;
      }
    })
    , c1d = Kotlin.createTrait(ci, /** @lends _.org.kevoree.ExtraFonctionalProperty.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_portTypes: function () {
        return this.$portTypes;
      },
      set_portTypes: function (tmp$0) {
        this.$portTypes = tmp$0;
      }
    })
    , c1e = Kotlin.createTrait(ci, /** @lends _.org.kevoree.DictionaryType.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_attributes: function () {
        return this.$attributes;
      },
      set_attributes: function (tmp$0) {
        this.$attributes = tmp$0;
      },
      get_defaultValues: function () {
        return this.$defaultValues;
      },
      set_defaultValues: function (tmp$0) {
        this.$defaultValues = tmp$0;
      }
    })
    , c1f = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.Namespace.prototype */ {
      get_childs: function () {
        return this.$childs;
      },
      set_childs: function (tmp$0) {
        this.$childs = tmp$0;
      },
      get_parent: function () {
        return this.$parent;
      },
      set_parent: function (tmp$0) {
        this.$parent = tmp$0;
      }
    })
    , c1h = Kotlin.createTrait([ci, cl])
    , c1i = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.TypeLibrary.prototype */ {
      get_subTypes: function () {
        return this.$subTypes;
      },
      set_subTypes: function (tmp$0) {
        this.$subTypes = tmp$0;
      }
    })
    , c1j = Kotlin.createTrait(ci, /** @lends _.org.kevoree.Port.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_bindings: function () {
        return this.$bindings;
      },
      set_bindings: function (tmp$0) {
        this.$bindings = tmp$0;
      },
      get_portTypeRef: function () {
        return this.$portTypeRef;
      },
      set_portTypeRef: function (tmp$0) {
        this.$portTypeRef = tmp$0;
      }
    })
    , c1k = Kotlin.createTrait([ci, cl], /** @lends _.org.kevoree.IntegrationPattern.prototype */ {
      get_extraFonctionalProperties: function () {
        return this.$extraFonctionalProperties;
      },
      set_extraFonctionalProperties: function (tmp$0) {
        this.$extraFonctionalProperties = tmp$0;
      },
      get_portTypes: function () {
        return this.$portTypes;
      },
      set_portTypes: function (tmp$0) {
        this.$portTypes = tmp$0;
      }
    })
    , c1l = Kotlin.createTrait(ci, /** @lends _.org.kevoree.Dictionary.prototype */ {
      get_generated_KMF_ID: function () {
        return this.$generated_KMF_ID;
      },
      set_generated_KMF_ID: function (tmp$0) {
        this.$generated_KMF_ID = tmp$0;
      },
      get_values: function () {
        return this.$values;
      },
      set_values: function (tmp$0) {
        this.$values = tmp$0;
      }
    })
    , c1m = Kotlin.createTrait([ci, cl, c13], /** @lends _.org.kevoree.ComponentInstance.prototype */ {
      get_provided: function () {
        return this.$provided;
      },
      set_provided: function (tmp$0) {
        this.$provided = tmp$0;
      },
      get_required: function () {
        return this.$required;
      },
      set_required: function (tmp$0) {
        this.$required = tmp$0;
      },
      get_namespace: function () {
        return this.$namespace;
      },
      set_namespace: function (tmp$0) {
        this.$namespace = tmp$0;
      }
    })
    , c1n = Kotlin.createTrait()
    , c1o = Kotlin.createTrait()
    , c1p = Kotlin.createTrait(/** @lends _.org.w3c.dom.events.EventListener.prototype */ {
      handleEvent: function (arg1) {
        noImpl;
      }
    })
    , c1q = Kotlin.createTrait()
    , c1r = Kotlin.createClass(Kotlin.Iterator, /** @lends _.kotlin.support.AbstractIterator.prototype */ {
      initialize: function () {
        this.$state = _.kotlin.support.State.get_NotReady();
        this.$nextValue = null;
      },
      get_state: function () {
        return this.$state;
      },
      set_state: function (tmp$0) {
        this.$state = tmp$0;
      },
      get_nextValue: function () {
        return this.$nextValue;
      },
      set_nextValue: function (tmp$0) {
        this.$nextValue = tmp$0;
      },
      hasNext: function () {
        _.kotlin.require(this.get_state() !== _.kotlin.support.State.get_Failed(), 'Failed requirement');
        var tmp$0 = this.get_state(), tmp$1;
        if (tmp$0 === _.kotlin.support.State.get_Done())
          tmp$1 = false;
        else if (tmp$0 === _.kotlin.support.State.get_Ready())
          tmp$1 = true;
        else
          tmp$1 = this.tryToComputeNext();
        return tmp$1;
      },
      next: function () {
        if (!this.hasNext())
          throw new Kotlin.NoSuchElementException();
        this.set_state(_.kotlin.support.State.get_NotReady());
        var tmp$0;
        return (tmp$0 = this.get_nextValue()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      peek: function () {
        if (!this.hasNext())
          throw new Kotlin.NoSuchElementException();
        var tmp$0;
        return (tmp$0 = this.get_nextValue()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      tryToComputeNext: function () {
        this.set_state(_.kotlin.support.State.get_Failed());
        this.computeNext();
        return this.get_state() === _.kotlin.support.State.get_Ready();
      },
      setNext: function (value) {
        this.set_nextValue(value);
        this.set_state(_.kotlin.support.State.get_Ready());
      },
      done: function () {
        this.set_state(_.kotlin.support.State.get_Done());
      }
    });
    return {ci: ci, c0: c0, cl: cl, c13: c13, c1: c1, c15: c15, c11: c11, c2: c2, cn: cn, c3: c3, c4: c4, c5: c5, c6: c6, ca: ca, c7: c7, c8: c8, c9: c9, cb: cb, cc: cc, cd: cd, ce: ce, cf: cf, cg: cg, ch: ch, cj: cj, ck: ck, cm: cm, co: co, cp: cp, cq: cq, cr: cr, cs: cs, ct: ct, cu: cu, cv: cv, cw: cw, cx: cx, cy: cy, cz: cz, c10: c10, c12: c12, c14: c14, c16: c16, c17: c17, c1g: c1g, c18: c18, c19: c19, c1a: c1a, c1b: c1b, c1c: c1c, c1d: c1d, c1e: c1e, c1f: c1f, c1h: c1h, c1i: c1i, c1j: c1j, c1k: c1k, c1l: c1l, c1m: c1m, c1n: c1n, c1o: c1o, c1p: c1p, c1q: c1q, c1r: c1r};
  }()
  , _ = {
    kotlin: Kotlin.definePackage({
      Pair: Kotlin.createClass(null, /** @lends _.kotlin.Pair.prototype */ {
        initialize: function (first, second) {
          this.$first = first;
          this.$second = second;
        },
        get_first: function () {
          return this.$first;
        },
        get_second: function () {
          return this.$second;
        },
        component1: function () {
          return this.get_first();
        },
        component2: function () {
          return this.get_second();
        },
        toString: function () {
          return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ')';
        }
      }),
      Triple: Kotlin.createClass(null, /** @lends _.kotlin.Triple.prototype */ {
        initialize: function (first, second, third) {
          this.$first = first;
          this.$second = second;
          this.$third = third;
        },
        get_first: function () {
          return this.$first;
        },
        get_second: function () {
          return this.$second;
        },
        get_third: function () {
          return this.$third;
        },
        component1: function () {
          return this.get_first();
        },
        component2: function () {
          return this.get_second();
        },
        component3: function () {
          return this.get_third();
        },
        toString: function () {
          return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ', ' + this.get_third().toString() + ')';
        }
      }),
      toString: function ($receiver) {
        return _.kotlin.makeString($receiver, ', ', '[', ']', -1, '...');
      },
      arrayList: function (values) {
        var list = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var value = tmp$0[tmp$2];
            {
              list.add(value);
            }
          }
        }
        return list;
      },
      hashSet: function (values) {
        var list = new Kotlin.ComplexHashSet();
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var value = tmp$0[tmp$2];
            {
              list.add(value);
            }
          }
        }
        return list;
      },
      map: function ($receiver, transform) {
        return _.kotlin.mapTo($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapValues: function ($receiver, transform) {
        return _.kotlin.mapValuesTo($receiver, new Kotlin.ComplexHashMap(0), transform);
      },
      hashMap: function (values) {
        var answer = new Kotlin.ComplexHashMap(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var v = tmp$0[tmp$2];
            {
              answer.put(v.get_first(), v.get_second());
            }
          }
        }
        return answer;
      },
      require: function (value, message) {
        if (!value) {
          throw new Kotlin.IllegalArgumentException(Kotlin.toString(message));
        }
      },
      require_0: function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw new Kotlin.IllegalArgumentException(message.toString());
        }
      },
      requireNotNull: function (value, message) {
        if (value == null) {
          throw new Kotlin.IllegalArgumentException(Kotlin.toString(message));
        }
         else {
          return value;
        }
      },
      check: function (value, message) {
        if (!value) {
          throw new Kotlin.IllegalStateException(Kotlin.toString(message));
        }
      },
      check_0: function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw new Kotlin.IllegalStateException(message.toString());
        }
      },
      checkNotNull: function (value, message) {
        if (value == null) {
          throw new Kotlin.IllegalStateException(message);
        }
         else {
          return value;
        }
      },
      all: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filterTo: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotTo: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNullTo: function ($receiver, result) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      mapTo_0: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMapTo: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach: function ($receiver, operation) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      reduce: function ($receiver, operation) {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      groupBy: function ($receiver, toKey) {
        return _.kotlin.groupByTo($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f0: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo: function ($receiver, result, toKey) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f0);
            list.add(element);
          }
        }
        return result;
      },
      drop: function ($receiver, n) {
        return _.kotlin.dropWhile($receiver, _.kotlin.countTo(n));
      },
      dropWhile: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      takeWhileTo: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection: function ($receiver, result) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse: function ($receiver) {
        var list = _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.LinkedList());
      },
      toList: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
      },
      toSet: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet: function ($receiver) {
        return _.kotlin.toCollection($receiver, new Kotlin.TreeSet());
      },
      withIndices: function ($receiver) {
        return new _.kotlin.IndexIterator($receiver.iterator());
      },
      f1: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f1.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_0: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_0: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_0: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_0: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter: function ($receiver, predicate) {
        return _.kotlin.filterTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_0: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_0: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_0: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_0: function ($receiver, transform) {
        return _.kotlin.mapTo_1($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_1: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap: function ($receiver, transform) {
        return _.kotlin.flatMapTo_0($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_0: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_0: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_0: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_0: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_0: function ($receiver, toKey) {
        return _.kotlin.groupByTo_0($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f2: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_0: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f2);
            list.add(element);
          }
        }
        return result;
      },
      drop_0: function ($receiver, n) {
        return _.kotlin.dropWhile_0($receiver, _.kotlin.countTo(n));
      },
      dropWhile_0: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_0: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take: function ($receiver, n) {
        return _.kotlin.takeWhile($receiver, _.kotlin.countTo(n));
      },
      takeWhile: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_0($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_0: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_0: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_0: function ($receiver) {
        var list = _.kotlin.toCollection_0($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.LinkedList());
      },
      toList_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.ArrayList(0));
      },
      toSet_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_0: function ($receiver) {
        return _.kotlin.toCollection_0($receiver, new Kotlin.TreeSet());
      },
      plus: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_0($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_0: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_0($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_1: function ($receiver, collection) {
        return _.kotlin.plus_0($receiver, collection.iterator());
      },
      withIndices_0: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f3: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_0: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_0($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f3.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_0: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_0: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_0($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_1: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_1: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_1: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_1: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_0: function ($receiver, predicate) {
        return _.kotlin.filterTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_1: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_0: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_1: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_1: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_1: function ($receiver, transform) {
        return _.kotlin.mapTo_2($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_2: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_0: function ($receiver, transform) {
        return _.kotlin.flatMapTo_1($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_1: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_1: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_1: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_0: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_1: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_0: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_1: function ($receiver, toKey) {
        return _.kotlin.groupByTo_1($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f4: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_1: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f4);
            list.add(element);
          }
        }
        return result;
      },
      drop_1: function ($receiver, n) {
        return _.kotlin.dropWhile_1($receiver, _.kotlin.countTo(n));
      },
      dropWhile_1: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_1: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_0: function ($receiver, n) {
        return _.kotlin.takeWhile_0($receiver, _.kotlin.countTo(n));
      },
      takeWhile_0: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_1($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_1: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_1: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_1: function ($receiver) {
        var list = _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_1: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.LinkedList());
      },
      toList_1: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
      },
      toSet_1: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_1: function ($receiver) {
        return _.kotlin.toCollection_1($receiver, new Kotlin.TreeSet());
      },
      plus_2: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_1($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_3: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_1($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_4: function ($receiver, collection) {
        return _.kotlin.plus_3($receiver, collection.iterator());
      },
      withIndices_1: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f5: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_1: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_1($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f5.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_1: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_1: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_1($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      downTo: function ($receiver, to) {
        return new _.jet.ByteProgression($receiver, to, -1);
      },
      downTo_0: function ($receiver, to) {
        return new _.jet.CharProgression($receiver.toChar(), to, -1);
      },
      downTo_1: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to, -1);
      },
      downTo_2: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_3: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_4: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_5: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_6: function ($receiver, to) {
        return new _.jet.CharProgression($receiver, to.toChar(), -1);
      },
      downTo_7: function ($receiver, to) {
        return new _.jet.CharProgression($receiver, to, -1);
      },
      downTo_8: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver.toShort(), to, -1);
      },
      downTo_9: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver.toInt(), to, -1);
      },
      downTo_10: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_11: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver.toFloat(), to, -1);
      },
      downTo_12: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver.toDouble(), to, -1.0);
      },
      downTo_13: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to, -1);
      },
      downTo_14: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to.toShort(), -1);
      },
      downTo_15: function ($receiver, to) {
        return new _.jet.ShortProgression($receiver, to, -1);
      },
      downTo_16: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_17: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_18: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_19: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_20: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_21: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to.toInt(), -1);
      },
      downTo_22: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_23: function ($receiver, to) {
        return new Kotlin.NumberProgression($receiver, to, -1);
      },
      downTo_24: function ($receiver, to) {
        return new _.jet.LongProgression($receiver.toLong(), to, -(1).toLong());
      },
      downTo_25: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_26: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_27: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_28: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_29: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_30: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to.toLong(), -(1).toLong());
      },
      downTo_31: function ($receiver, to) {
        return new _.jet.LongProgression($receiver, to, -(1).toLong());
      },
      downTo_32: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver.toFloat(), to, -1);
      },
      downTo_33: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver.toDouble(), to, -1.0);
      },
      downTo_34: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_35: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to.toFloat(), -1);
      },
      downTo_36: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_37: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_38: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to.toFloat(), -1);
      },
      downTo_39: function ($receiver, to) {
        return new _.jet.FloatProgression($receiver, to, -1);
      },
      downTo_40: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_41: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_42: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to.toDouble(), -1.0);
      },
      downTo_43: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_44: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_45: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to.toDouble(), -1.0);
      },
      downTo_46: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      downTo_47: function ($receiver, to) {
        return new _.jet.DoubleProgression($receiver, to, -1.0);
      },
      all_2: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_2: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_2: function ($receiver, predicate) {
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_2: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_1: function ($receiver, predicate) {
        return _.kotlin.filterTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_2: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_1: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_2: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNull: function ($receiver) {
        return _.kotlin.filterNotNullTo_0($receiver, new Kotlin.ArrayList(0));
      },
      filterNotNullTo_0: function ($receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_2: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (predicate(element)) {
                first.add(element);
              }
               else {
                second.add(element);
              }
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_2: function ($receiver, transform) {
        return _.kotlin.mapTo_3($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_3: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var item = tmp$0[tmp$2];
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_1: function ($receiver, transform) {
        return _.kotlin.flatMapTo_2($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_2: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var list = transform(element);
              {
                var tmp$3 = list.iterator();
                while (tmp$3.hasNext()) {
                  var r = tmp$3.next();
                  result.add(r);
                }
              }
            }
          }
        }
        return result;
      },
      forEach_2: function ($receiver, operation) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            operation(element);
          }
        }
      },
      fold_2: function ($receiver, initial, operation) {
        var answer = initial;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_1: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_2: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_1: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_2: function ($receiver, toKey) {
        return _.kotlin.groupByTo_2($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f6: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_2: function ($receiver, result, toKey) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var key = toKey(element);
              var list = _.kotlin.getOrPut(result, key, _.kotlin.f6);
              list.add(element);
            }
          }
        }
        return result;
      },
      drop_2: function ($receiver, n) {
        return _.kotlin.dropWhile_2($receiver, _.kotlin.countTo(n));
      },
      dropWhile_2: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_2: function ($receiver, result, predicate) {
        var start = true;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (start && predicate(element)) {
              }
               else {
                start = false;
                result.add(element);
              }
            }
          }
        }
        return result;
      },
      take_1: function ($receiver, n) {
        return _.kotlin.takeWhile_1($receiver, _.kotlin.countTo(n));
      },
      takeWhile_1: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_2($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_2: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_2: function ($receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            result.add(element);
          }
        }
        return result;
      },
      reverse_2: function ($receiver) {
        var list = _.kotlin.toCollection_2($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_2: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.LinkedList());
      },
      toList_2: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.ArrayList(0));
      },
      toSet_2: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_2: function ($receiver) {
        return _.kotlin.toCollection_2($receiver, new Kotlin.TreeSet());
      },
      requireNoNulls: function ($receiver) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (element == null) {
                throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver.toString());
              }
            }
          }
        }
        return $receiver != null ? $receiver : Kotlin.throwNPE();
      },
      plus_5: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_2($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_6: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_2($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_7: function ($receiver, collection) {
        return _.kotlin.plus_6($receiver, collection.iterator());
      },
      withIndices_2: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f7: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_2: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_2($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f7.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_2: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (++count > 1)
                buffer.append(separator);
              if (limit < 0 || count <= limit) {
                var text = element == null ? 'null' : Kotlin.toString(element);
                buffer.append(text);
              }
               else
                break;
            }
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_2: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_2($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_3: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_3: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_3: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_3: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_2: function ($receiver, predicate) {
        return _.kotlin.filterTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_3: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_2: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_3: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_3: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_3: function ($receiver, transform) {
        return _.kotlin.mapTo_4($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_4: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_2: function ($receiver, transform) {
        return _.kotlin.flatMapTo_3($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_3: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_3: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_3: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_2: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_3: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_2: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_3: function ($receiver, toKey) {
        return _.kotlin.groupByTo_3($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      f8: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_3: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.f8);
            list.add(element);
          }
        }
        return result;
      },
      drop_3: function ($receiver, n) {
        return _.kotlin.dropWhile_3($receiver, _.kotlin.countTo(n));
      },
      dropWhile_3: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_3: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_2: function ($receiver, n) {
        return _.kotlin.takeWhile_2($receiver, _.kotlin.countTo(n));
      },
      takeWhile_2: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_3($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_3: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_3: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_3: function ($receiver) {
        var list = _.kotlin.toCollection_3($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_3: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.LinkedList());
      },
      toList_3: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.ArrayList(0));
      },
      toSet_3: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_3: function ($receiver) {
        return _.kotlin.toCollection_3($receiver, new Kotlin.TreeSet());
      },
      plus_8: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_3($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_9: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_3($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_10: function ($receiver, collection) {
        return _.kotlin.plus_9($receiver, collection.iterator());
      },
      withIndices_3: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      f9: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_3: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_3($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.f9.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_3: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_3: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_3($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      get_size: function ($receiver) {
        return $receiver.size();
      },
      get_empty: function ($receiver) {
        return $receiver.isEmpty();
      },
      get_indices: function ($receiver) {
        return new Kotlin.NumberRange(0, _.kotlin.get_size($receiver) - 1);
      },
      get_indices_0: function ($receiver) {
        return new Kotlin.NumberRange(0, $receiver - 1);
      },
      isNotEmpty_0: function ($receiver) {
        return !$receiver.isEmpty();
      },
      get_notEmpty: function ($receiver) {
        return _.kotlin.isNotEmpty_0($receiver);
      },
      orEmpty: function ($receiver) {
        var tmp$0;
        return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyList()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      toSortedList: function ($receiver) {
        return _.kotlin.sort(_.kotlin.toCollection($receiver, new Kotlin.ArrayList(0)));
      },
      toSortedList_0: function ($receiver, comparator) {
        return _.kotlin.sort_0(_.kotlin.toList($receiver), comparator);
      },
      orEmpty_0: function ($receiver) {
        var tmp$0;
        return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyList()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      get_first: function ($receiver) {
        return _.kotlin.get_head($receiver);
      },
      get_last: function ($receiver) {
        var s = _.kotlin.get_size($receiver);
        return s > 0 ? $receiver.get(s - 1) : null;
      },
      get_lastIndex: function ($receiver) {
        return _.kotlin.get_size($receiver) - 1;
      },
      get_head: function ($receiver) {
        return $receiver.get(0);
      },
      get_tail: function ($receiver) {
        return _.kotlin.drop($receiver, 1);
      },
      all_4: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_4: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_4: function ($receiver, predicate) {
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_4: function ($receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_3: function ($receiver, predicate) {
        return _.kotlin.filterTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_4: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_3: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_4: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_4: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (predicate(element)) {
                first.add(element);
              }
               else {
                second.add(element);
              }
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_4: function ($receiver, transform) {
        return _.kotlin.mapTo_5($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_5: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var item = tmp$0[tmp$2];
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_3: function ($receiver, transform) {
        return _.kotlin.flatMapTo_4($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_4: function ($receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var list = transform(element);
              {
                var tmp$3 = list.iterator();
                while (tmp$3.hasNext()) {
                  var r = tmp$3.next();
                  result.add(r);
                }
              }
            }
          }
        }
        return result;
      },
      forEach_4: function ($receiver, operation) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            operation(element);
          }
        }
      },
      fold_4: function ($receiver, initial, operation) {
        var answer = initial;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_3: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_4: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_3: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_4: function ($receiver, toKey) {
        return _.kotlin.groupByTo_4($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fa: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_4: function ($receiver, result, toKey) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var key = toKey(element);
              var list = _.kotlin.getOrPut(result, key, _.kotlin.fa);
              list.add(element);
            }
          }
        }
        return result;
      },
      drop_4: function ($receiver, n) {
        return _.kotlin.dropWhile_4($receiver, _.kotlin.countTo(n));
      },
      dropWhile_4: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_4: function ($receiver, result, predicate) {
        var start = true;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (start && predicate(element)) {
              }
               else {
                start = false;
                result.add(element);
              }
            }
          }
        }
        return result;
      },
      take_3: function ($receiver, n) {
        return _.kotlin.takeWhile_3($receiver, _.kotlin.countTo(n));
      },
      takeWhile_3: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_4($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_4: function ($receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_4: function ($receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            result.add(element);
          }
        }
        return result;
      },
      reverse_4: function ($receiver) {
        var list = _.kotlin.toCollection_4($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_4: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.LinkedList());
      },
      toList_4: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.ArrayList(0));
      },
      toSet_4: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_4: function ($receiver) {
        return _.kotlin.toCollection_4($receiver, new Kotlin.TreeSet());
      },
      plus_11: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_4($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_12: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_4($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_13: function ($receiver, collection) {
        return _.kotlin.plus_12($receiver, collection.iterator());
      },
      withIndices_4: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fb: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_4: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_4($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fb.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_4: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = $receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (++count > 1)
                buffer.append(separator);
              if (limit < 0 || count <= limit) {
                var text = element == null ? 'null' : Kotlin.toString(element);
                buffer.append(text);
              }
               else
                break;
            }
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_4: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_4($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      test: Kotlin.definePackage({
        todo: function (block) {
          Kotlin.println('TODO at ' + block);
        },
        get_asserter: function () {
          return this.$asserter;
        },
        set_asserter: function (tmp$0) {
          this.$asserter = tmp$0;
        },
        QUnitAsserter: Kotlin.createClass(classes.c1q, /** @lends _.kotlin.test.QUnitAsserter.prototype */ {
          initialize: function () {
          },
          assertTrue: function (message, actual) {
            ok(actual, message);
          },
          assertEquals: function (message, expected, actual) {
            ok(Kotlin.equals(expected, actual), message + '. Expected <' + expected.toString() + '> actual <' + actual.toString() + '>');
          },
          assertNotNull: function (message, actual) {
            ok(actual != null, message);
          },
          assertNull: function (message, actual) {
            ok(actual == null, message);
          },
          fail: function (message) {
            ok(false, message);
          }
        }),
        assertTrue: function (message, block) {
          var actual = block();
          _.kotlin.test.get_asserter().assertTrue(message, actual);
        },
        assertTrue_0: function (block) {
          _.kotlin.test.assertTrue(Kotlin.toString(block), block);
        },
        f0: function (block) {
          return !block();
        },
        assertNot: function (message, block) {
          _.kotlin.test.assertTrue(message, _.kotlin.test.f0.bind(null, block));
        },
        assertNot_0: function (block) {
          _.kotlin.test.assertNot(Kotlin.toString(block), block);
        },
        assertTrue_1: function (actual, message) {
          return _.kotlin.test.assertEquals(true, actual, message);
        },
        assertFalse: function (actual, message) {
          return _.kotlin.test.assertEquals(false, actual, message);
        },
        assertEquals: function (expected, actual, message) {
          _.kotlin.test.get_asserter().assertEquals(message, expected, actual);
        },
        assertNotNull: function (actual, message) {
          _.kotlin.test.get_asserter().assertNotNull(message, actual);
          return actual != null ? actual : Kotlin.throwNPE();
        },
        assertNotNull_0: function (actual, message, block) {
          _.kotlin.test.get_asserter().assertNotNull(message, actual);
          if (actual != null) {
            block(actual);
          }
        },
        assertNull: function (actual, message) {
          _.kotlin.test.get_asserter().assertNull(message, actual);
        },
        fail: function (message) {
          _.kotlin.test.get_asserter().fail(message);
        },
        expect: function (expected, block) {
          _.kotlin.test.expect_0(expected, Kotlin.toString(block), block);
        },
        expect_0: function (expected, message, block) {
          var actual = block();
          _.kotlin.test.assertEquals(expected, actual, message);
        },
        fails: function (block) {
          try {
            block();
            _.kotlin.test.get_asserter().fail('Expected an exception to be thrown');
            return null;
          }
           catch (e) {
            return e;
          }
        },
        Asserter: classes.c1q
      }),
      filter_4: function ($receiver, predicate) {
        return new _.kotlin.FilterIterator($receiver, predicate);
      },
      fc: function (predicate, it) {
        return !predicate(it);
      },
      filterNot_4: function ($receiver, predicate) {
        return _.kotlin.filter_4($receiver, _.kotlin.fc.bind(null, predicate));
      },
      filterNotNull_0: function ($receiver) {
        return new _.kotlin.FilterNotNullIterator($receiver);
      },
      map_5: function ($receiver, transform) {
        return new _.kotlin.MapIterator($receiver, transform);
      },
      flatMap_4: function ($receiver, transform) {
        return new _.kotlin.FlatMapIterator($receiver, transform);
      },
      fd: function (it) {
        if (it == null)
          throw new Kotlin.IllegalArgumentException('null element in iterator ' + $receiver.toString());
        else
          return it;
      },
      requireNoNulls_0: function ($receiver) {
        return _.kotlin.map_5($receiver, _.kotlin.fd);
      },
      fe: function (count, it) {
        return --count.v >= 0;
      },
      take_4: function ($receiver, n) {
        var count = {v: n};
        return _.kotlin.takeWhile_4($receiver, _.kotlin.fe.bind(null, count));
      },
      takeWhile_4: function ($receiver, predicate) {
        return new _.kotlin.TakeWhileIterator($receiver, predicate);
      },
      plus_14: function ($receiver, element) {
        return new _.kotlin.CompositeIterator([$receiver, new _.kotlin.SingleIterator(element)]);
      },
      plus_15: function ($receiver, iterator) {
        return new _.kotlin.CompositeIterator([$receiver, iterator]);
      },
      plus_16: function ($receiver, collection) {
        return _.kotlin.plus_15($receiver, collection.iterator());
      },
      filter_5: function ($receiver, predicate) {
        return _.kotlin.filterTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNot_5: function ($receiver, predicate) {
        return _.kotlin.filterNotTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotNull_1: function ($receiver) {
        return _.kotlin.filterNotNullTo($receiver, new Kotlin.ArrayList(0));
      },
      map_6: function ($receiver, transform) {
        return _.kotlin.mapTo_0($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMap_5: function ($receiver, transform) {
        return _.kotlin.flatMapTo($receiver, new Kotlin.ArrayList(0), transform);
      },
      take_5: function ($receiver, n) {
        return _.kotlin.takeWhile_5($receiver, _.kotlin.countTo(n));
      },
      takeWhile_5: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo($receiver, new Kotlin.ArrayList(0), predicate);
      },
      requireNoNulls_1: function ($receiver) {
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element == null) {
              throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver.toString());
            }
          }
        }
        return $receiver != null ? $receiver : Kotlin.throwNPE();
      },
      plus_17: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_18: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_19: function ($receiver, collection) {
        return _.kotlin.plus_18($receiver, collection.iterator());
      },
      get_size_0: function ($receiver) {
        return $receiver.size();
      },
      get_empty_0: function ($receiver) {
        return $receiver.isEmpty();
      },
      set: function ($receiver, key, value) {
        return $receiver.put(key, value);
      },
      orEmpty_1: function ($receiver) {
        var tmp$0;
        return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyMap()) != null ? tmp$0 : Kotlin.throwNPE();
      },
      get_key: function ($receiver) {
        return $receiver.getKey();
      },
      get_value: function ($receiver) {
        return $receiver.getValue();
      },
      component1: function ($receiver) {
        return $receiver.getKey();
      },
      component2: function ($receiver) {
        return $receiver.getValue();
      },
      getOrElse: function ($receiver, key, defaultValue) {
        if ($receiver.containsKey(key)) {
          var tmp$0;
          return (tmp$0 = $receiver.get(key)) != null ? tmp$0 : Kotlin.throwNPE();
        }
         else {
          return defaultValue();
        }
      },
      getOrPut: function ($receiver, key, defaultValue) {
        if ($receiver.containsKey(key)) {
          var tmp$0;
          return (tmp$0 = $receiver.get(key)) != null ? tmp$0 : Kotlin.throwNPE();
        }
         else {
          var answer = defaultValue();
          $receiver.put(key, answer);
          return answer;
        }
      },
      iterator: function ($receiver) {
        var entrySet = $receiver.entrySet();
        return entrySet.iterator();
      },
      mapTo: function ($receiver, result, transform) {
        {
          var tmp$0 = _.kotlin.iterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      mapValuesTo: function ($receiver, result, transform) {
        {
          var tmp$0 = _.kotlin.iterator($receiver);
          while (tmp$0.hasNext()) {
            var e = tmp$0.next();
            var newValue = transform(e);
            result.put(_.kotlin.get_key(e), newValue);
          }
        }
        return result;
      },
      putAll: function ($receiver, values) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var v = tmp$0[tmp$2];
            {
              $receiver.put(v.get_first(), v.get_second());
            }
          }
        }
      },
      toMap: function ($receiver, map) {
        map.putAll($receiver);
        return map;
      },
      map_7: function ($receiver, transform) {
        return _.kotlin.mapTo($receiver, new Kotlin.ArrayList(_.kotlin.get_size_0($receiver)), transform);
      },
      mapValues_0: function ($receiver, transform) {
        return _.kotlin.mapValuesTo($receiver, new Kotlin.ComplexHashMap(_.kotlin.get_size_0($receiver)), transform);
      },
      all_5: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_5: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_5: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_5: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_6: function ($receiver, predicate) {
        return _.kotlin.filterTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_5: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_6: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_5: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_5: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_8: function ($receiver, transform) {
        return _.kotlin.mapTo_6($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_6: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_6: function ($receiver, transform) {
        return _.kotlin.flatMapTo_5($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_5: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_5: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_5: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_4: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_5: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_4: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_5: function ($receiver, toKey) {
        return _.kotlin.groupByTo_5($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      ff: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_5: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.ff);
            list.add(element);
          }
        }
        return result;
      },
      drop_5: function ($receiver, n) {
        return _.kotlin.dropWhile_5($receiver, _.kotlin.countTo(n));
      },
      dropWhile_5: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_5: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_6: function ($receiver, n) {
        return _.kotlin.takeWhile_6($receiver, _.kotlin.countTo(n));
      },
      takeWhile_6: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_5($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_5: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_5: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_5: function ($receiver) {
        var list = _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_5: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.LinkedList());
      },
      toList_5: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
      },
      toSet_5: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_5: function ($receiver) {
        return _.kotlin.toCollection_5($receiver, new Kotlin.TreeSet());
      },
      plus_20: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_5($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_21: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_5($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_22: function ($receiver, collection) {
        return _.kotlin.plus_21($receiver, collection.iterator());
      },
      withIndices_5: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fg: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_5: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_5($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fg.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_5: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_5: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_5($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      dom: Kotlin.definePackage({
        createDocument: function () {
          return document.implementation.createDocument(null, null, null);
        },
        toXmlString: function ($receiver) {
          return $receiver.outerHTML;
        },
        toXmlString_0: function ($receiver, xmlDeclaration) {
          return $receiver.outerHTML;
        },
        eventHandler: function (handler) {
          return new _.kotlin.dom.EventListenerHandler(handler);
        },
        EventListenerHandler: Kotlin.createClass(classes.c1p, /** @lends _.kotlin.dom.EventListenerHandler.prototype */ {
          initialize: function (handler) {
            this.$handler = handler;
          },
          get_handler: function () {
            return this.$handler;
          },
          handleEvent: function (e) {
            if (e != null) {
              this.get_handler()(e);
            }
          }
        }),
        f0: function (handler, e) {
          if (Kotlin.isType(e, MouseEvent)) {
            handler(e);
          }
        },
        mouseEventHandler: function (handler) {
          return _.kotlin.dom.eventHandler(_.kotlin.dom.f0.bind(null, handler));
        },
        on: function ($receiver, name, capture, handler) {
          return _.kotlin.dom.on_0($receiver, name, capture, _.kotlin.dom.eventHandler(handler));
        },
        on_0: function ($receiver, name, capture, listener) {
          var tmp$0;
          if (Kotlin.isType($receiver, EventTarget)) {
            addEventListener(name, listener, capture);
            tmp$0 = new _.kotlin.dom.CloseableEventListener($receiver, listener, name, capture);
          }
           else {
            tmp$0 = null;
          }
          return tmp$0;
        },
        CloseableEventListener: Kotlin.createClass(Kotlin.Closeable, /** @lends _.kotlin.dom.CloseableEventListener.prototype */ {
          initialize: function (target, listener, name, capture) {
            this.$target = target;
            this.$listener = listener;
            this.$name = name;
            this.$capture = capture;
          },
          get_target: function () {
            return this.$target;
          },
          get_listener: function () {
            return this.$listener;
          },
          get_name: function () {
            return this.$name;
          },
          get_capture: function () {
            return this.$capture;
          },
          close: function () {
            this.get_target().removeEventListener(this.get_name(), this.get_listener(), this.get_capture());
          }
        }),
        onClick: function ($receiver, capture, handler) {
          return _.kotlin.dom.on_0($receiver, 'click', capture, _.kotlin.dom.mouseEventHandler(handler));
        },
        onDoubleClick: function ($receiver, capture, handler) {
          return _.kotlin.dom.on_0($receiver, 'dblclick', capture, _.kotlin.dom.mouseEventHandler(handler));
        },
        emptyElementList: function () {
          return Kotlin.emptyList();
        },
        emptyNodeList: function () {
          return Kotlin.emptyList();
        },
        get_text: function ($receiver) {
          return $receiver.textContent;
        },
        set_text: function ($receiver, value) {
          $receiver.textContent = value;
        },
        get_childrenText: function ($receiver) {
          var buffer = new Kotlin.StringBuilder();
          var nodeList = $receiver.childNodes;
          var i = 0;
          var size = nodeList.length;
          while (i < size) {
            var node = nodeList.item(i);
            if (node != null) {
              if (_.kotlin.dom.isText(node)) {
                buffer.append(node.nodeValue);
              }
            }
            i++;
          }
          return buffer.toString();
        },
        set_childrenText: function ($receiver, value) {
          var element = $receiver;
          {
            var tmp$0 = _.kotlin.dom.children(element).iterator();
            while (tmp$0.hasNext()) {
              var node = tmp$0.next();
              if (_.kotlin.dom.isText(node)) {
                $receiver.removeChild(node);
              }
            }
          }
          _.kotlin.dom.addText(element, value, null);
        },
        get_id: function ($receiver) {
          return $receiver.getAttribute('id') !== null ? $receiver.getAttribute('id') : '';
        },
        set_id: function ($receiver, value) {
          $receiver.setAttribute('id', value);
          $receiver.setIdAttribute('id', true);
        },
        get_style: function ($receiver) {
          return $receiver.getAttribute('style') !== null ? $receiver.getAttribute('style') : '';
        },
        set_style: function ($receiver, value) {
          $receiver.setAttribute('style', value);
        },
        get_classes: function ($receiver) {
          return $receiver.getAttribute('class') !== null ? $receiver.getAttribute('class') : '';
        },
        set_classes: function ($receiver, value) {
          $receiver.setAttribute('class', value);
        },
        hasClass: function ($receiver, cssClass) {
          var c = _.kotlin.dom.get_classes($receiver);
          return _.js.matches(c, '(^|.*' + '\\' + 's+)' + cssClass + '(' + '$' + '|' + '\\' + 's+.*)');
        },
        children: function ($receiver) {
          return _.kotlin.dom.toList($receiver != null ? $receiver.childNodes : null);
        },
        f1: function (it) {
          return it.nodeType === Node.ELEMENT_NODE;
        },
        f2: function (it) {
          return it != null ? it : Kotlin.throwNPE();
        },
        childElements: function ($receiver) {
          return _.kotlin.map_6(_.kotlin.filter_5(_.kotlin.dom.children($receiver), _.kotlin.dom.f1), _.kotlin.dom.f2);
        },
        f3: function (name, it) {
          return it.nodeType === Node.ELEMENT_NODE && Kotlin.equals(it.nodeName, name);
        },
        f4: function (it) {
          return it != null ? it : Kotlin.throwNPE();
        },
        childElements_0: function ($receiver, name) {
          return _.kotlin.map_6(_.kotlin.filter_5(_.kotlin.dom.children($receiver), _.kotlin.dom.f3.bind(null, name)), _.kotlin.dom.f4);
        },
        get_elements: function ($receiver) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName('*') : null);
        },
        get_elements_0: function ($receiver) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName('*') : null);
        },
        elements: function ($receiver, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName(localName) : null);
        },
        elements_0: function ($receiver, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName(localName) : null);
        },
        elements_1: function ($receiver, namespaceUri, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagNameNS(namespaceUri, localName) : null);
        },
        elements_2: function ($receiver, namespaceUri, localName) {
          return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagNameNS(namespaceUri, localName) : null);
        },
        toList: function ($receiver) {
          var tmp$0;
          if ($receiver == null) {
            tmp$0 = _.kotlin.dom.emptyNodeList();
          }
           else {
            tmp$0 = new _.kotlin.dom.NodeListAsList($receiver);
          }
          return tmp$0;
        },
        toElementList: function ($receiver) {
          var tmp$0;
          if ($receiver == null) {
            tmp$0 = new Kotlin.ArrayList(0);
          }
           else {
            tmp$0 = new _.kotlin.dom.ElementListAsList($receiver);
          }
          return tmp$0;
        },
        f5: function (selector, it) {
          return _.kotlin.dom.hasClass(it, selector.substring(1));
        },
        get: function ($receiver, selector) {
          var root = $receiver != null ? $receiver.documentElement : null;
          var tmp$0;
          if (root != null) {
            if (Kotlin.equals(selector, '*')) {
              tmp$0 = _.kotlin.dom.get_elements($receiver);
            }
             else if (selector.startsWith('.')) {
              tmp$0 = _.kotlin.toList(_.kotlin.filter_5(_.kotlin.dom.get_elements($receiver), _.kotlin.dom.f5.bind(null, selector)));
            }
             else if (selector.startsWith('#')) {
              var id = selector.substring(1);
              var element = $receiver != null ? $receiver.getElementById(id) : null;
              return element != null ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
            }
             else {
              tmp$0 = _.kotlin.dom.elements_0($receiver, selector);
            }
          }
           else {
            tmp$0 = _.kotlin.dom.emptyElementList();
          }
          return tmp$0;
        },
        f6: function (selector, it) {
          return _.kotlin.dom.hasClass(it, selector.substring(1));
        },
        get_0: function ($receiver, selector) {
          var tmp$1;
          if (Kotlin.equals(selector, '*')) {
            tmp$1 = _.kotlin.dom.get_elements_0($receiver);
          }
           else if (selector.startsWith('.')) {
            tmp$1 = _.kotlin.toList(_.kotlin.filter_5(_.kotlin.dom.get_elements_0($receiver), _.kotlin.dom.f6.bind(null, selector)));
          }
           else if (selector.startsWith('#')) {
            var tmp$0;
            var element = (tmp$0 = $receiver.ownerDocument) != null ? tmp$0.getElementById(selector.substring(1)) : null;
            return element != null ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
          }
           else {
            tmp$1 = _.kotlin.dom.elements($receiver, selector);
          }
          return tmp$1;
        },
        NodeListAsList: Kotlin.createClass(Kotlin.AbstractList, /** @lends _.kotlin.dom.NodeListAsList.prototype */ {
          initialize: function (nodeList) {
            this.$nodeList = nodeList;
            this.super_init();
          },
          get_nodeList: function () {
            return this.$nodeList;
          },
          get: function (index) {
            var node = this.get_nodeList().item(index);
            if (node == null) {
              throw new RangeError('NodeList does not contain a node at index: ' + index);
            }
             else {
              return node;
            }
          },
          size: function () {
            return this.get_nodeList().length;
          }
        }),
        ElementListAsList: Kotlin.createClass(Kotlin.AbstractList, /** @lends _.kotlin.dom.ElementListAsList.prototype */ {
          initialize: function (nodeList) {
            this.$nodeList = nodeList;
            this.super_init();
          },
          get_nodeList: function () {
            return this.$nodeList;
          },
          get: function (index) {
            var node = this.get_nodeList().item(index);
            if (node == null) {
              throw new RangeError('NodeList does not contain a node at index: ' + index);
            }
             else if (node.nodeType === Node.ELEMENT_NODE) {
              return node != null ? node : Kotlin.throwNPE();
            }
             else {
              throw new Kotlin.IllegalArgumentException('Node is not an Element as expected but is ' + node.toString());
            }
          },
          size: function () {
            return this.get_nodeList().length;
          }
        }),
        clear: function ($receiver) {
          while (true) {
            var child = $receiver.firstChild;
            if (child == null) {
              return;
            }
             else {
              $receiver.removeChild(child);
            }
          }
        },
        nextSiblings: function ($receiver) {
          return new _.kotlin.dom.NextSiblingIterator($receiver);
        },
        NextSiblingIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.dom.NextSiblingIterator.prototype */ {
          initialize: function (node) {
            this.$node = node;
            this.super_init();
          },
          get_node: function () {
            return this.$node;
          },
          set_node: function (tmp$0) {
            this.$node = tmp$0;
          },
          computeNext: function () {
            var nextValue = this.get_node().nextSibling;
            if (nextValue != null) {
              this.setNext(nextValue);
              this.set_node(nextValue);
            }
             else {
              this.done();
            }
          }
        }),
        previousSiblings: function ($receiver) {
          return new _.kotlin.dom.PreviousSiblingIterator($receiver);
        },
        PreviousSiblingIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.dom.PreviousSiblingIterator.prototype */ {
          initialize: function (node) {
            this.$node = node;
            this.super_init();
          },
          get_node: function () {
            return this.$node;
          },
          set_node: function (tmp$0) {
            this.$node = tmp$0;
          },
          computeNext: function () {
            var nextValue = this.get_node().previousSibling;
            if (nextValue != null) {
              this.setNext(nextValue);
              this.set_node(nextValue);
            }
             else {
              this.done();
            }
          }
        }),
        isText: function ($receiver) {
          var nt = $receiver.nodeType;
          return nt === Node.TEXT_NODE || nt === Node.CDATA_SECTION_NODE;
        },
        attribute: function ($receiver, name) {
          return $receiver.getAttribute(name) !== null ? $receiver.getAttribute(name) : '';
        },
        get_head: function ($receiver) {
          return $receiver != null && $receiver.length > 0 ? $receiver.item(0) : null;
        },
        get_first: function ($receiver) {
          return _.kotlin.dom.get_head($receiver);
        },
        get_tail: function ($receiver) {
          if ($receiver == null) {
            return null;
          }
           else {
            var s = $receiver.length;
            return s > 0 ? $receiver.item(s - 1) : null;
          }
        },
        get_last: function ($receiver) {
          return _.kotlin.dom.get_tail($receiver);
        },
        toXmlString_1: function ($receiver, xmlDeclaration) {
          var tmp$0;
          if ($receiver == null)
            tmp$0 = '';
          else {
            tmp$0 = _.kotlin.dom.nodesToXmlString(_.kotlin.dom.toList($receiver), xmlDeclaration);
          }
          return tmp$0;
        },
        nodesToXmlString: function (nodes, xmlDeclaration) {
          var builder = new Kotlin.StringBuilder();
          {
            var tmp$0 = nodes.iterator();
            while (tmp$0.hasNext()) {
              var n = tmp$0.next();
              builder.append(_.kotlin.dom.toXmlString_0(n, xmlDeclaration));
            }
          }
          return builder.toString();
        },
        plus: function ($receiver, child) {
          if (child != null) {
            $receiver.appendChild(child);
          }
          return $receiver;
        },
        plus_0: function ($receiver, text) {
          return _.kotlin.dom.addText($receiver, text, null);
        },
        plusAssign: function ($receiver, text) {
          return _.kotlin.dom.addText($receiver, text, null);
        },
        createElement: function ($receiver, name, init) {
          var tmp$0;
          var elem = (tmp$0 = $receiver.createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
          init(elem);
          return elem;
        },
        createElement_0: function ($receiver, name, doc, init) {
          var tmp$0;
          var elem = (tmp$0 = _.kotlin.dom.ownerDocument($receiver, doc).createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
          init(elem);
          return elem;
        },
        ownerDocument: function ($receiver, doc) {
          var tmp$0;
          if ($receiver.nodeType === Node.DOCUMENT_NODE)
            tmp$0 = $receiver != null ? $receiver : Kotlin.throwNPE();
          else if (doc == null)
            tmp$0 = $receiver.ownerDocument;
          else
            tmp$0 = doc;
          var answer = tmp$0;
          if (answer == null) {
            throw new Kotlin.IllegalArgumentException('Element does not have an ownerDocument and none was provided for: ' + $receiver.toString());
          }
           else {
            return answer;
          }
        },
        addElement: function ($receiver, name, init) {
          var child = _.kotlin.dom.createElement($receiver, name, init);
          $receiver.appendChild(child);
          return child;
        },
        addElement_0: function ($receiver, name, doc, init) {
          var child = _.kotlin.dom.createElement_0($receiver, name, doc, init);
          $receiver.appendChild(child);
          return child;
        },
        addText: function ($receiver, text, doc) {
          if (text != null) {
            var tmp$0;
            var child = (tmp$0 = _.kotlin.dom.ownerDocument($receiver, doc).createTextNode(text)) != null ? tmp$0 : Kotlin.throwNPE();
            $receiver.appendChild(child);
          }
          return $receiver;
        }
      }),
      all_6: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_6: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_6: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_6: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_7: function ($receiver, predicate) {
        return _.kotlin.filterTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_6: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_7: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_6: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_6: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_9: function ($receiver, transform) {
        return _.kotlin.mapTo_7($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_7: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_7: function ($receiver, transform) {
        return _.kotlin.flatMapTo_6($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_6: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_6: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_6: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_5: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_6: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_5: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_6: function ($receiver, toKey) {
        return _.kotlin.groupByTo_6($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fh: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_6: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fh);
            list.add(element);
          }
        }
        return result;
      },
      drop_6: function ($receiver, n) {
        return _.kotlin.dropWhile_6($receiver, _.kotlin.countTo(n));
      },
      dropWhile_6: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_6: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_7: function ($receiver, n) {
        return _.kotlin.takeWhile_7($receiver, _.kotlin.countTo(n));
      },
      takeWhile_7: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_6($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_6: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_6: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_6: function ($receiver) {
        var list = _.kotlin.toCollection_6($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_6: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.LinkedList());
      },
      toList_6: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.ArrayList(0));
      },
      toSet_6: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_6: function ($receiver) {
        return _.kotlin.toCollection_6($receiver, new Kotlin.TreeSet());
      },
      plus_23: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_6($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_24: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_6($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_25: function ($receiver, collection) {
        return _.kotlin.plus_24($receiver, collection.iterator());
      },
      withIndices_6: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fi: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_6: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_6($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fi.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_6: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_6: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_6($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_7: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_7: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_7: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_7: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_8: function ($receiver, predicate) {
        return _.kotlin.filterTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_7: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_8: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_7: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_7: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_10: function ($receiver, transform) {
        return _.kotlin.mapTo_8($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_8: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_8: function ($receiver, transform) {
        return _.kotlin.flatMapTo_7($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_7: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_7: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_7: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_6: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_7: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_6: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_7: function ($receiver, toKey) {
        return _.kotlin.groupByTo_7($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fj: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_7: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fj);
            list.add(element);
          }
        }
        return result;
      },
      drop_7: function ($receiver, n) {
        return _.kotlin.dropWhile_7($receiver, _.kotlin.countTo(n));
      },
      dropWhile_7: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_7: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_8: function ($receiver, n) {
        return _.kotlin.takeWhile_8($receiver, _.kotlin.countTo(n));
      },
      takeWhile_8: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_7($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_7: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_7: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_7: function ($receiver) {
        var list = _.kotlin.toCollection_7($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_7: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.LinkedList());
      },
      toList_7: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.ArrayList(0));
      },
      toSet_7: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_7: function ($receiver) {
        return _.kotlin.toCollection_7($receiver, new Kotlin.TreeSet());
      },
      plus_26: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_7($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_27: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_7($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_28: function ($receiver, collection) {
        return _.kotlin.plus_27($receiver, collection.iterator());
      },
      withIndices_7: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fk: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_7: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_7($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fk.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_7: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_7: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_7($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      iterate: function (nextFunction) {
        return new _.kotlin.FunctionIterator(nextFunction);
      },
      FilterIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.FilterIterator.prototype */ {
        initialize: function (iterator, predicate) {
          this.$iterator = iterator;
          this.$predicate = predicate;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_predicate: function () {
          return this.$predicate;
        },
        computeNext: function () {
          while (this.get_iterator().hasNext()) {
            var next = this.get_iterator().next();
            if (this.get_predicate()(next)) {
              this.setNext(next);
              return;
            }
          }
          this.done();
        }
      }),
      FilterNotNullIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.FilterNotNullIterator.prototype */ {
        initialize: function (iterator) {
          this.$iterator = iterator;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        computeNext: function () {
          if (this.get_iterator() != null) {
            while (this.get_iterator().hasNext()) {
              var next = this.get_iterator().next();
              if (next != null) {
                this.setNext(next);
                return;
              }
            }
          }
          this.done();
        }
      }),
      MapIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.MapIterator.prototype */ {
        initialize: function (iterator, transform) {
          this.$iterator = iterator;
          this.$transform = transform;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_transform: function () {
          return this.$transform;
        },
        computeNext: function () {
          if (this.get_iterator().hasNext()) {
            this.setNext(this.get_transform()(this.get_iterator().next()));
          }
           else {
            this.done();
          }
        }
      }),
      FlatMapIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.FlatMapIterator.prototype */ {
        initialize: function (iterator, transform) {
          this.$iterator = iterator;
          this.$transform = transform;
          this.super_init();
          this.$transformed = _.kotlin.iterate(function () {
            return null;
          });
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_transform: function () {
          return this.$transform;
        },
        get_transformed: function () {
          return this.$transformed;
        },
        set_transformed: function (tmp$0) {
          this.$transformed = tmp$0;
        },
        computeNext: function () {
          while (true) {
            if (this.get_transformed().hasNext()) {
              this.setNext(this.get_transformed().next());
              return;
            }
            if (this.get_iterator().hasNext()) {
              this.set_transformed(this.get_transform()(this.get_iterator().next()));
            }
             else {
              this.done();
              return;
            }
          }
        }
      }),
      TakeWhileIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.TakeWhileIterator.prototype */ {
        initialize: function (iterator, predicate) {
          this.$iterator = iterator;
          this.$predicate = predicate;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_predicate: function () {
          return this.$predicate;
        },
        computeNext: function () {
          if (this.get_iterator().hasNext()) {
            var item = this.get_iterator().next();
            if (this.get_predicate()(item)) {
              this.setNext(item);
              return;
            }
          }
          this.done();
        }
      }),
      FunctionIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.FunctionIterator.prototype */ {
        initialize: function (nextFunction) {
          this.$nextFunction = nextFunction;
          this.super_init();
        },
        get_nextFunction: function () {
          return this.$nextFunction;
        },
        computeNext: function () {
          var next = this.get_nextFunction()();
          if (next == null) {
            this.done();
          }
           else {
            this.setNext(next);
          }
        }
      }),
      CompositeIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.CompositeIterator.prototype */ {
        initialize: function (iterators) {
          this.super_init();
          this.$iteratorsIter = Kotlin.arrayIterator(iterators);
          this.$currentIter = null;
        },
        get_iteratorsIter: function () {
          return this.$iteratorsIter;
        },
        get_currentIter: function () {
          return this.$currentIter;
        },
        set_currentIter: function (tmp$0) {
          this.$currentIter = tmp$0;
        },
        computeNext: function () {
          while (true) {
            if (this.get_currentIter() == null) {
              if (this.get_iteratorsIter().hasNext()) {
                this.set_currentIter(this.get_iteratorsIter().next());
              }
               else {
                this.done();
                return;
              }
            }
            var iter = this.get_currentIter();
            if (iter != null) {
              if (iter.hasNext()) {
                this.setNext(iter.next());
                return;
              }
               else {
                this.set_currentIter(null);
              }
            }
          }
        }
      }),
      SingleIterator: Kotlin.createClass(classes.c1r, /** @lends _.kotlin.SingleIterator.prototype */ {
        initialize: function (value) {
          this.$value = value;
          this.super_init();
          this.$first = true;
        },
        get_value: function () {
          return this.$value;
        },
        get_first: function () {
          return this.$first;
        },
        set_first: function (tmp$0) {
          this.$first = tmp$0;
        },
        computeNext: function () {
          if (this.get_first()) {
            this.set_first(false);
            this.setNext(this.get_value());
          }
           else {
            this.done();
          }
        }
      }),
      IndexIterator: Kotlin.createClass(Kotlin.Iterator, /** @lends _.kotlin.IndexIterator.prototype */ {
        initialize: function (iterator) {
          this.$iterator = iterator;
          this.$index = 0;
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_index: function () {
          return this.$index;
        },
        set_index: function (tmp$0) {
          this.$index = tmp$0;
        },
        next: function () {
          var tmp$0, tmp$1;
          return new _.kotlin.Pair((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1), this.get_iterator().next());
        },
        hasNext: function () {
          return this.get_iterator().hasNext();
        }
      }),
      all_8: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_8: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_8: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_8: function ($receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filter_9: function ($receiver, predicate) {
        return _.kotlin.filterTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_8: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_9: function ($receiver, predicate) {
        return _.kotlin.filterNotTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_8: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      partition_8: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_11: function ($receiver, transform) {
        return _.kotlin.mapTo_9($receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_9: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMap_9: function ($receiver, transform) {
        return _.kotlin.flatMapTo_8($receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_8: function ($receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_8: function ($receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_8: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      foldRight_7: function ($receiver, initial, operation) {
        var r = initial;
        var index = $receiver.length - 1;
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      reduce_8: function ($receiver, operation) {
        var iterator = Kotlin.arrayIterator($receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      reduceRight_7: function ($receiver, operation) {
        var index = $receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = $receiver[index--];
        while (index >= 0) {
          r = operation($receiver[index--], r);
        }
        return r;
      },
      groupBy_8: function ($receiver, toKey) {
        return _.kotlin.groupByTo_8($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fl: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_8: function ($receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fl);
            list.add(element);
          }
        }
        return result;
      },
      drop_8: function ($receiver, n) {
        return _.kotlin.dropWhile_8($receiver, _.kotlin.countTo(n));
      },
      dropWhile_8: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_8: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_9: function ($receiver, n) {
        return _.kotlin.takeWhile_9($receiver, _.kotlin.countTo(n));
      },
      takeWhile_9: function ($receiver, predicate) {
        return _.kotlin.takeWhileTo_8($receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_8: function ($receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_8: function ($receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_8: function ($receiver) {
        var list = _.kotlin.toCollection_8($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_8: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.LinkedList());
      },
      toList_8: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.ArrayList(0));
      },
      toSet_8: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_8: function ($receiver) {
        return _.kotlin.toCollection_8($receiver, new Kotlin.TreeSet());
      },
      plus_29: function ($receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_8($receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_30: function ($receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_8($receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_31: function ($receiver, collection) {
        return _.kotlin.plus_30($receiver, collection.iterator());
      },
      withIndices_8: function ($receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator($receiver));
      },
      fm: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_8: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_8($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fm.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_8: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator($receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_8: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_8($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      trim: function ($receiver, text) {
        return _.kotlin.trimTrailing(_.kotlin.trimLeading($receiver, text), text);
      },
      trim_0: function ($receiver, prefix, postfix) {
        return _.kotlin.trimTrailing(_.kotlin.trimLeading($receiver, prefix), postfix);
      },
      trimLeading: function ($receiver, prefix) {
        var answer = $receiver;
        if (answer.startsWith(prefix)) {
          answer = answer.substring(prefix.length);
        }
        return answer;
      },
      trimTrailing: function ($receiver, postfix) {
        var answer = $receiver;
        if (answer.endsWith(postfix)) {
          answer = answer.substring(0, $receiver.length - postfix.length);
        }
        return answer;
      },
      isNotEmpty: function ($receiver) {
        return $receiver != null && $receiver.length > 0;
      },
      iterator_0: function ($receiver) {
        return Kotlin.createObject(_.jet.CharIterator, {
          initialize: function () {
            this.super_init();
            this.$index = 0;
          },
          get_index: function () {
            return this.$index;
          },
          set_index: function (tmp$0) {
            this.$index = tmp$0;
          },
          nextChar: function () {
            var tmp$0, tmp$1;
            return $receiver.get((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1));
          },
          hasNext: function () {
            return this.get_index() < $receiver.length;
          }
        });
      },
      orEmpty_2: function ($receiver) {
        return $receiver !== null ? $receiver : '';
      },
      get_size_1: function ($receiver) {
        return $receiver.length;
      },
      count_9: function ($receiver, predicate) {
        var answer = 0;
        {
          var tmp$0 = _.kotlin.iterator_0($receiver);
          while (tmp$0.hasNext()) {
            var c = tmp$0.next();
            if (predicate(c)) {
              answer++;
            }
          }
        }
        return answer;
      },
      count_10: function ($receiver) {
        if (Kotlin.isType($receiver, _.jet.Collection)) {
          return $receiver.size();
        }
        var number = 0;
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var elem = tmp$0.next();
            ++number;
          }
        }
        return number;
      },
      fn: function (count, n, it) {
        ++count.v;
        return count.v <= n;
      },
      countTo: function (n) {
        var count = {v: 0};
        return _.kotlin.fn.bind(null, count, n);
      },
      first: function ($receiver) {
        if (Kotlin.isType($receiver, _.jet.List)) {
          return _.kotlin.first($receiver);
        }
        return $receiver.iterator().next();
      },
      containsItem: function ($receiver, item) {
        if (Kotlin.isType($receiver, Kotlin.AbstractCollection)) {
          return $receiver.contains(item);
        }
        {
          var tmp$0 = $receiver.iterator();
          while (tmp$0.hasNext()) {
            var elem = tmp$0.next();
            if (Kotlin.equals(elem, item)) {
              return true;
            }
          }
        }
        return false;
      },
      sort: function ($receiver) {
        var list = _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
        Kotlin.collectionsSort(list);
        return list;
      },
      sort_0: function ($receiver, comparator) {
        var list = _.kotlin.toCollection($receiver, new Kotlin.ArrayList(0));
        Kotlin.collectionsSort(list, comparator);
        return list;
      },
      all_9: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              return false;
          }
        }
        return true;
      },
      any_9: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return true;
          }
        }
        return false;
      },
      count_11: function ($receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              count++;
          }
        }
        return count;
      },
      find_9: function ($receiver, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              return element;
          }
        }
        return null;
      },
      filterTo_9: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotTo_9: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate(element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNullTo_1: function ($receiver, result) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_9: function ($receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      mapTo_10: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform(item));
          }
        }
        return result;
      },
      flatMapTo_9: function ($receiver, result, transform) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform(element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_9: function ($receiver, operation) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation(element);
          }
        }
      },
      fold_9: function ($receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation(answer, element);
          }
        }
        return answer;
      },
      reduce_9: function ($receiver, operation) {
        var iterator = $receiver;
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation(result, iterator.next());
        }
        return result;
      },
      groupBy_9: function ($receiver, toKey) {
        return _.kotlin.groupByTo_9($receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      fo: function () {
        return new Kotlin.ArrayList(0);
      },
      groupByTo_9: function ($receiver, result, toKey) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey(element);
            var list = _.kotlin.getOrPut(result, key, _.kotlin.fo);
            list.add(element);
          }
        }
        return result;
      },
      drop_9: function ($receiver, n) {
        return _.kotlin.dropWhile_9($receiver, _.kotlin.countTo(n));
      },
      dropWhile_9: function ($receiver, predicate) {
        return _.kotlin.dropWhileTo_9($receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_9: function ($receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate(element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      takeWhileTo_9: function ($receiver, result, predicate) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate(element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_9: function ($receiver, result) {
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_9: function ($receiver) {
        var list = _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_9: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.LinkedList());
      },
      toList_9: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
      },
      toSet_9: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_9: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.TreeSet());
      },
      withIndices_9: function ($receiver) {
        return new _.kotlin.IndexIterator($receiver);
      },
      fp: function (f, x, y) {
        var xr = f(x);
        var yr = f(y);
        return xr.compareTo(yr);
      },
      sortBy_9: function ($receiver, f) {
        var sortedList = _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(_.kotlin.fp.bind(null, f));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_9: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = $receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : Kotlin.toString(element);
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_9: function ($receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_9($receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      isNotEmpty_1: function ($receiver) {
        return !_.kotlin.isEmpty($receiver);
      },
      isEmpty: function ($receiver) {
        return $receiver.length === 0;
      },
      orEmpty_3: function ($receiver) {
        return $receiver != null ? $receiver : [];
      },
      get_lastIndex_0: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_1: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_2: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_3: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_4: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_5: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_6: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_7: function ($receiver) {
        return $receiver.length - 1;
      },
      get_lastIndex_8: function ($receiver) {
        return $receiver.length - 1;
      },
      iterator_1: function ($receiver) {
        return Kotlin.createObject(Kotlin.Iterator, {
          initialize: function () {
          },
          hasNext: function () {
            return $receiver.hasMoreElements();
          },
          next: function () {
            return $receiver.nextElement();
          }
        });
      },
      toArrayList: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.ArrayList(0));
      },
      toHashSet: function ($receiver) {
        return _.kotlin.toCollection_9($receiver, new Kotlin.ComplexHashSet());
      },
      to: function ($receiver, that) {
        return new _.kotlin.Pair($receiver, that);
      },
      run: function (f) {
        return f();
      },
      with: function (receiver, f) {
        return f(receiver);
      },
      let: function ($receiver, f) {
        return f($receiver);
      },
      support: Kotlin.definePackage({
        AbstractIterator: classes.c1r
      })
    }),
    org: Kotlin.definePackage({
      kevoree: Kotlin.definePackage({
        loader: Kotlin.definePackage({
          XMIModelLoader: Kotlin.createClass(classes.c6, /** @lends _.org.kevoree.loader.XMIModelLoader.prototype */ {
            initialize: function () {
              this.super_init();
              this.$factory = new _.org.kevoree.factory.MainFactory();
            },
            get_factory: function () {
              return this.$factory;
            },
            set_factory: function (tmp$0) {
              this.$factory = tmp$0;
            }
          }),
          JSONModelLoader: Kotlin.createClass(classes.cb, /** @lends _.org.kevoree.loader.JSONModelLoader.prototype */ {
            initialize: function () {
              this.super_init();
              this.$factory = new _.org.kevoree.factory.MainFactory();
            },
            get_factory: function () {
              return this.$factory;
            },
            set_factory: function (tmp$0) {
              this.$factory = tmp$0;
            }
          })
        }),
        DeployUnit: classes.c0,
        ContainerNode: classes.c1,
        MessagePortType: classes.c2,
        GroupType: classes.c3,
        NamedElement: classes.cl,
        Wire: classes.cm,
        LifeCycleTypeDefinition: classes.cn,
        Repository: classes.co,
        NetworkProperty: classes.cp,
        ServicePortType: classes.cq,
        ChannelType: classes.cr,
        AdaptationPrimitiveTypeRef: classes.cs,
        ContainerRoot: classes.ct,
        Channel: classes.cu,
        TypedElement: classes.cw,
        Parameter: classes.cx,
        NodeNetwork: classes.cy,
        NodeLink: classes.cz,
        MBinding: classes.c10,
        PortType: classes.c11,
        Operation: classes.c12,
        Instance: classes.c13,
        NodeType: classes.c14,
        TypeDefinition: classes.c15,
        PortTypeRef: classes.c16,
        DictionaryAttribute: classes.c17,
        CompositeType: classes.c18,
        KevoreeFactory: classes.c19,
        DictionaryValue: classes.c1a,
        PortTypeMapping: classes.c1b,
        Group: classes.c1c,
        ExtraFonctionalProperty: classes.c1d,
        DictionaryType: classes.c1e,
        Namespace: classes.c1f,
        ComponentType: classes.c1g,
        AdaptationPrimitiveType: classes.c1h,
        TypeLibrary: classes.c1i,
        Port: classes.c1j,
        IntegrationPattern: classes.c1k,
        Dictionary: classes.c1l,
        ComponentInstance: classes.c1m,
        impl: Kotlin.definePackage({
          CompositeTypeImpl: Kotlin.createClass([classes.cv, classes.c18], /** @lends _.org.kevoree.impl.CompositeTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_required = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRequiredCurrentlyProcessing = false;
              this.$_integrationPatterns = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllIntegrationPatternsCurrentlyProcessing = false;
              this.$extraFonctionalProperties = null;
              this.$_provided = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllProvidedCurrentlyProcessing = false;
              this.$_childs = new Kotlin.PrimitiveHashMap(0);
              this.$_wires = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllWiresCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__required()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__integrationPatterns()) != null ? tmp$3.clear() : null;
              this.set_extraFonctionalProperties(null);
              (tmp$4 = this.get__provided()) != null ? tmp$4.clear() : null;
              (tmp$5 = this.get__childs()) != null ? tmp$5.clear() : null;
              (tmp$6 = this.get__wires()) != null ? tmp$6.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              this.internal_startMethod(iP, true);
            },
            internal_startMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_startMethod())) {
                var oldPath = this.path();
                this.$startMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
                }
              }
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              this.internal_stopMethod(iP, true);
            },
            internal_stopMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_stopMethod())) {
                var oldPath = this.path();
                this.$stopMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
                }
              }
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              this.internal_updateMethod(iP, true);
            },
            internal_updateMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_updateMethod())) {
                var oldPath = this.path();
                this.$updateMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            get__required: function () {
              return this.$_required;
            },
            get_required: function () {
              return _.kotlin.toList(this.get__required().values());
            },
            set_required: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_required(requiredP, true, true);
            },
            internal_required: function (requiredP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__required().values(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__required().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_required(), el), _.org.kevoree.util.Constants.get_Ref_required());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            doAddRequired: function (requiredP) {
              var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__required().containsKey(_key_)) {
                this.get__required().put(_key_, requiredP);
                (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP), _.org.kevoree.util.Constants.get_Ref_required());
              }
            },
            addRequired: function (requiredP) {
              this.internal_addRequired(requiredP, true, true);
            },
            addAllRequired: function (requiredP) {
              this.internal_addAllRequired(requiredP, true, true);
            },
            internal_addRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddRequired(requiredP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            internal_addAllRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddRequired(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddRequired(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            removeRequired: function (requiredP) {
              this.internal_removeRequired(requiredP, true, true);
            },
            get_removeAllRequiredCurrentlyProcessing: function () {
              return this.$removeAllRequiredCurrentlyProcessing;
            },
            set_removeAllRequiredCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRequiredCurrentlyProcessing = tmp$0;
            },
            removeAllRequired: function () {
              this.internal_removeAllRequired(true, true);
            },
            internal_removeRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__required().size() !== 0 && this.get__required().containsKey((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__required().remove((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRequiredCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            internal_removeAllRequired: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllRequiredCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_required()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__required().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), temp_els));
                this.set_removeAllRequiredCurrentlyProcessing(false);
              }
            },
            get__integrationPatterns: function () {
              return this.$_integrationPatterns;
            },
            get_integrationPatterns: function () {
              return _.kotlin.toList(this.get__integrationPatterns().values());
            },
            set_integrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (integrationPatternsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_integrationPatterns(integrationPatternsP, true, true);
            },
            internal_integrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__integrationPatterns().values(), integrationPatternsP)) {
                this.get__integrationPatterns().clear();
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__integrationPatterns().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), el), _.org.kevoree.util.Constants.get_Ref_integrationPatterns());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
                }
              }
            },
            doAddIntegrationPatterns: function (integrationPatternsP) {
              var _key_ = (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__integrationPatterns().containsKey(_key_)) {
                this.get__integrationPatterns().put(_key_, integrationPatternsP);
                (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP), _.org.kevoree.util.Constants.get_Ref_integrationPatterns());
              }
            },
            addIntegrationPatterns: function (integrationPatternsP) {
              this.internal_addIntegrationPatterns(integrationPatternsP, true, true);
            },
            addAllIntegrationPatterns: function (integrationPatternsP) {
              this.internal_addAllIntegrationPatterns(integrationPatternsP, true, true);
            },
            internal_addIntegrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddIntegrationPatterns(integrationPatternsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
              }
            },
            internal_addAllIntegrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddIntegrationPatterns(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = integrationPatternsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddIntegrationPatterns(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
              }
            },
            removeIntegrationPatterns: function (integrationPatternsP) {
              this.internal_removeIntegrationPatterns(integrationPatternsP, true, true);
            },
            get_removeAllIntegrationPatternsCurrentlyProcessing: function () {
              return this.$removeAllIntegrationPatternsCurrentlyProcessing;
            },
            set_removeAllIntegrationPatternsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllIntegrationPatternsCurrentlyProcessing = tmp$0;
            },
            removeAllIntegrationPatterns: function () {
              this.internal_removeAllIntegrationPatterns(true, true);
            },
            internal_removeIntegrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__integrationPatterns().remove((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey());
                ((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()) != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllIntegrationPatternsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
                }
              }
            },
            internal_removeAllIntegrationPatterns: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllIntegrationPatternsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_integrationPatterns()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__integrationPatterns().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), temp_els));
                this.set_removeAllIntegrationPatternsCurrentlyProcessing(false);
              }
            },
            get_extraFonctionalProperties: function () {
              return this.$extraFonctionalProperties;
            },
            set_extraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_extraFonctionalProperties(extraFonctionalPropertiesP, true, true);
            },
            internal_extraFonctionalProperties: function (extraFonctionalPropertiesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$extraFonctionalProperties, extraFonctionalPropertiesP)) {
                if (this.$extraFonctionalProperties != null) {
                  var tmp$0;
                  (((tmp$0 = this.$extraFonctionalProperties) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (extraFonctionalPropertiesP != null) {
                  (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                }
                this.$extraFonctionalProperties = extraFonctionalPropertiesP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
                }
              }
            },
            get__provided: function () {
              return this.$_provided;
            },
            get_provided: function () {
              return _.kotlin.toList(this.get__provided().values());
            },
            set_provided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_provided(providedP, true, true);
            },
            internal_provided: function (providedP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__provided().values(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__provided().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_provided(), el), _.org.kevoree.util.Constants.get_Ref_provided());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            doAddProvided: function (providedP) {
              var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__provided().containsKey(_key_)) {
                this.get__provided().put(_key_, providedP);
                (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP), _.org.kevoree.util.Constants.get_Ref_provided());
              }
            },
            addProvided: function (providedP) {
              this.internal_addProvided(providedP, true, true);
            },
            addAllProvided: function (providedP) {
              this.internal_addAllProvided(providedP, true, true);
            },
            internal_addProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddProvided(providedP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            internal_addAllProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddProvided(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddProvided(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            removeProvided: function (providedP) {
              this.internal_removeProvided(providedP, true, true);
            },
            get_removeAllProvidedCurrentlyProcessing: function () {
              return this.$removeAllProvidedCurrentlyProcessing;
            },
            set_removeAllProvidedCurrentlyProcessing: function (tmp$0) {
              this.$removeAllProvidedCurrentlyProcessing = tmp$0;
            },
            removeAllProvided: function () {
              this.internal_removeAllProvided(true, true);
            },
            internal_removeProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__provided().remove((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllProvidedCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            internal_removeAllProvided: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllProvidedCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_provided()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__provided().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), temp_els));
                this.set_removeAllProvidedCurrentlyProcessing(false);
              }
            },
            get__childs: function () {
              return this.$_childs;
            },
            get_childs: function () {
              return _.kotlin.toList(this.get__childs().values());
            },
            set_childs: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (childsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_childs(childsP, true, true);
            },
            internal_childs: function (childsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__childs().values(), childsP)) {
                this.get__childs().clear();
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__childs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
                }
              }
            },
            doAddChilds: function (childsP) {
              var _key_ = (childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__childs().containsKey(_key_)) {
                this.get__childs().put(_key_, childsP);
              }
            },
            addChilds: function (childsP) {
              this.internal_addChilds(childsP, true, true);
            },
            addAllChilds: function (childsP) {
              this.internal_addAllChilds(childsP, true, true);
            },
            internal_addChilds: function (childsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddChilds(childsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            internal_addAllChilds: function (childsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddChilds(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = childsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddChilds(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            removeChilds: function (childsP) {
              this.internal_removeChilds(childsP, true, true);
            },
            removeAllChilds: function () {
              this.internal_removeAllChilds(true, true);
            },
            internal_removeChilds: function (childsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__childs().size() !== 0 && this.get__childs().containsKey((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__childs().remove((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
                }
              }
            },
            internal_removeAllChilds: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_childs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__childs().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_childs(), temp_els));
              }
            },
            get__wires: function () {
              return this.$_wires;
            },
            get_wires: function () {
              return _.kotlin.toList(this.get__wires().values());
            },
            set_wires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (wiresP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_wires(wiresP, true, true);
            },
            internal_wires: function (wiresP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__wires().values(), wiresP)) {
                this.get__wires().clear();
                {
                  var tmp$0 = wiresP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__wires().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_wires(), el), _.org.kevoree.util.Constants.get_Ref_wires());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
                }
              }
            },
            doAddWires: function (wiresP) {
              var _key_ = (wiresP != null ? wiresP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__wires().containsKey(_key_)) {
                this.get__wires().put(_key_, wiresP);
                (wiresP != null ? wiresP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP), _.org.kevoree.util.Constants.get_Ref_wires());
              }
            },
            addWires: function (wiresP) {
              this.internal_addWires(wiresP, true, true);
            },
            addAllWires: function (wiresP) {
              this.internal_addAllWires(wiresP, true, true);
            },
            internal_addWires: function (wiresP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddWires(wiresP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
              }
            },
            internal_addAllWires: function (wiresP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = wiresP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddWires(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = wiresP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddWires(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
              }
            },
            removeWires: function (wiresP) {
              this.internal_removeWires(wiresP, true, true);
            },
            get_removeAllWiresCurrentlyProcessing: function () {
              return this.$removeAllWiresCurrentlyProcessing;
            },
            set_removeAllWiresCurrentlyProcessing: function (tmp$0) {
              this.$removeAllWiresCurrentlyProcessing = tmp$0;
            },
            removeAllWires: function () {
              this.internal_removeAllWires(true, true);
            },
            internal_removeWires: function (wiresP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__wires().size() !== 0 && this.get__wires().containsKey((wiresP != null ? wiresP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__wires().remove((wiresP != null ? wiresP : Kotlin.throwNPE()).internalGetKey());
                ((wiresP != null ? wiresP : Kotlin.throwNPE()) != null ? wiresP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllWiresCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), wiresP));
                }
              }
            },
            internal_removeAllWires: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllWiresCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_wires()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__wires().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_wires(), temp_els));
                this.set_removeAllWiresCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                this.internal_startMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                this.internal_stopMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                this.internal_updateMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_1 = this.get__required().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__required().remove(value);
                    this.get__required().put(objNewKey_1, obj_1);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addIntegrationPatterns(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllIntegrationPatterns(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeIntegrationPatterns(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllIntegrationPatterns();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(value)) {
                    var obj_2 = this.get__integrationPatterns().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__integrationPatterns().remove(value);
                    this.get__integrationPatterns().put(objNewKey_2, obj_2);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_extraFonctionalProperties(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_extraFonctionalProperties(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_extraFonctionalProperties(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj_3 = this.get__provided().get(value);
                    var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_3 == null) {
                      throw new Error('Key newed to null ' + obj_3);
                    }
                    this.get__provided().remove(value);
                    this.get__provided().put(objNewKey_3, obj_3);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addChilds(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllChilds(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeChilds(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllChilds();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__childs().size() !== 0 && this.get__childs().containsKey(value)) {
                    var obj_4 = this.get__childs().get(value);
                    var objNewKey_4 = (obj_4 != null ? obj_4 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_4 == null) {
                      throw new Error('Key newed to null ' + obj_4);
                    }
                    this.get__childs().remove(value);
                    this.get__childs().put(objNewKey_4, obj_4);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_wires()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addWires(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllWires(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeWires(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllWires();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__wires().size() !== 0 && this.get__wires().containsKey(value)) {
                    var obj_5 = this.get__wires().get(value);
                    var objNewKey_5 = (obj_5 != null ? obj_5 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_5 == null) {
                      throw new Error('Key newed to null ' + obj_5);
                    }
                    this.get__wires().remove(value);
                    this.get__wires().put(objNewKey_5, obj_5);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findIntegrationPatternsByID: function (key) {
              return this.get__integrationPatterns().get(key);
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findChildsByID: function (key) {
              return this.get__childs().get(key);
            },
            findWiresByID: function (key) {
              return this.get__wires().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                return this.findRequiredByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                return this.findIntegrationPatternsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                var objFound_0 = this.get_extraFonctionalProperties();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                return this.findProvidedByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                return this.findChildsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_wires()) {
                return this.findWiresByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_required(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$0 = this.get__required().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__required().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_required());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_required());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_integrationPatterns(), _.org.kevoree.util.Constants.get_org_kevoree_IntegrationPattern());
                {
                  var tmp$1 = this.get__integrationPatterns().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__integrationPatterns().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_integrationPatterns());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_integrationPatterns());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), _.org.kevoree.util.Constants.get_org_kevoree_ExtraFonctionalProperty());
                this.internal_visit(visitor, this.get_extraFonctionalProperties(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_provided(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$2 = this.get__provided().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$2.next();
                    this.internal_visit(visitor, this.get__provided().get(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_provided());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_provided());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_wires(), _.org.kevoree.util.Constants.get_org_kevoree_Wire());
                {
                  var tmp$3 = this.get__wires().keySet().iterator();
                  while (tmp$3.hasNext()) {
                    var KMFLoopEntryKey_2 = tmp$3.next();
                    this.internal_visit(visitor, this.get__wires().get(KMFLoopEntryKey_2), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_wires());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_wires());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$4 = this.get__deployUnits().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_3 = tmp$4.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey_3), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$5 = this.get__superTypes().keySet().iterator();
                  while (tmp$5.hasNext()) {
                    var KMFLoopEntryKey_4 = tmp$5.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_4), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_childs(), _.org.kevoree.util.Constants.get_org_kevoree_ComponentType());
                {
                  var tmp$6 = this.get__childs().keySet().iterator();
                  while (tmp$6.hasNext()) {
                    var KMFLoopEntryKey_5 = tmp$6.next();
                    this.internal_visit(visitor, this.get__childs().get(KMFLoopEntryKey_5), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_childs());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_childs());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_stopMethod(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this);
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_updateMethod(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
              visitor.visit(this.get_startMethod(), _.org.kevoree.util.Constants.get_Att_startMethod(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_CompositeType();
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getRequired: function () {
              return this.get_required();
            },
            setRequired: function (internal_p) {
              this.set_required(internal_p);
            },
            getIntegrationPatterns: function () {
              return this.get_integrationPatterns();
            },
            setIntegrationPatterns: function (internal_p) {
              this.set_integrationPatterns(internal_p);
            },
            getExtraFonctionalProperties: function () {
              return this.get_extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (internal_p) {
              this.set_extraFonctionalProperties(internal_p);
            },
            getProvided: function () {
              return this.get_provided();
            },
            setProvided: function (internal_p) {
              this.set_provided(internal_p);
            },
            getChilds: function () {
              return this.get_childs();
            },
            setChilds: function (internal_p) {
              this.set_childs(internal_p);
            },
            getWires: function () {
              return this.get_wires();
            },
            setWires: function (internal_p) {
              this.set_wires(internal_p);
            }
          }),
          DictionaryTypeImpl: Kotlin.createClass([classes.cv, classes.c1e], /** @lends _.org.kevoree.impl.DictionaryTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_attributes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllAttributesCurrentlyProcessing = false;
              this.$_defaultValues = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllDefaultValuesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__attributes()) != null ? tmp$0.clear() : null;
              (tmp$1 = this.get__defaultValues()) != null ? tmp$1.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__attributes: function () {
              return this.$_attributes;
            },
            get_attributes: function () {
              return _.kotlin.toList(this.get__attributes().values());
            },
            set_attributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (attributesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_attributes(attributesP, true, true);
            },
            internal_attributes: function (attributesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__attributes().values(), attributesP)) {
                this.get__attributes().clear();
                {
                  var tmp$0 = attributesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__attributes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_attributes(), el), _.org.kevoree.util.Constants.get_Ref_attributes());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
                }
              }
            },
            doAddAttributes: function (attributesP) {
              var _key_ = (attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__attributes().containsKey(_key_)) {
                this.get__attributes().put(_key_, attributesP);
                (attributesP != null ? attributesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP), _.org.kevoree.util.Constants.get_Ref_attributes());
              }
            },
            addAttributes: function (attributesP) {
              this.internal_addAttributes(attributesP, true, true);
            },
            addAllAttributes: function (attributesP) {
              this.internal_addAllAttributes(attributesP, true, true);
            },
            internal_addAttributes: function (attributesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddAttributes(attributesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
              }
            },
            internal_addAllAttributes: function (attributesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = attributesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddAttributes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = attributesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddAttributes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
              }
            },
            removeAttributes: function (attributesP) {
              this.internal_removeAttributes(attributesP, true, true);
            },
            get_removeAllAttributesCurrentlyProcessing: function () {
              return this.$removeAllAttributesCurrentlyProcessing;
            },
            set_removeAllAttributesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllAttributesCurrentlyProcessing = tmp$0;
            },
            removeAllAttributes: function () {
              this.internal_removeAllAttributes(true, true);
            },
            internal_removeAttributes: function (attributesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey((attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__attributes().remove((attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey());
                ((attributesP != null ? attributesP : Kotlin.throwNPE()) != null ? attributesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllAttributesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), attributesP));
                }
              }
            },
            internal_removeAllAttributes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllAttributesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_attributes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__attributes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_attributes(), temp_els));
                this.set_removeAllAttributesCurrentlyProcessing(false);
              }
            },
            get__defaultValues: function () {
              return this.$_defaultValues;
            },
            get_defaultValues: function () {
              return _.kotlin.toList(this.get__defaultValues().values());
            },
            set_defaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (defaultValuesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_defaultValues(defaultValuesP, true, true);
            },
            internal_defaultValues: function (defaultValuesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__defaultValues().values(), defaultValuesP)) {
                this.get__defaultValues().clear();
                {
                  var tmp$0 = defaultValuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__defaultValues().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), el), _.org.kevoree.util.Constants.get_Ref_defaultValues());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
                }
              }
            },
            doAddDefaultValues: function (defaultValuesP) {
              var _key_ = (defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__defaultValues().containsKey(_key_)) {
                this.get__defaultValues().put(_key_, defaultValuesP);
                (defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP), _.org.kevoree.util.Constants.get_Ref_defaultValues());
              }
            },
            addDefaultValues: function (defaultValuesP) {
              this.internal_addDefaultValues(defaultValuesP, true, true);
            },
            addAllDefaultValues: function (defaultValuesP) {
              this.internal_addAllDefaultValues(defaultValuesP, true, true);
            },
            internal_addDefaultValues: function (defaultValuesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDefaultValues(defaultValuesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
              }
            },
            internal_addAllDefaultValues: function (defaultValuesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = defaultValuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDefaultValues(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = defaultValuesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDefaultValues(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
              }
            },
            removeDefaultValues: function (defaultValuesP) {
              this.internal_removeDefaultValues(defaultValuesP, true, true);
            },
            get_removeAllDefaultValuesCurrentlyProcessing: function () {
              return this.$removeAllDefaultValuesCurrentlyProcessing;
            },
            set_removeAllDefaultValuesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllDefaultValuesCurrentlyProcessing = tmp$0;
            },
            removeAllDefaultValues: function () {
              this.internal_removeAllDefaultValues(true, true);
            },
            internal_removeDefaultValues: function (defaultValuesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().containsKey((defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__defaultValues().remove((defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()).internalGetKey());
                ((defaultValuesP != null ? defaultValuesP : Kotlin.throwNPE()) != null ? defaultValuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllDefaultValuesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), defaultValuesP));
                }
              }
            },
            internal_removeAllDefaultValues: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllDefaultValuesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_defaultValues()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__defaultValues().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_defaultValues(), temp_els));
                this.set_removeAllDefaultValuesCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_attributes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addAttributes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllAttributes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeAttributes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllAttributes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey(value)) {
                    var obj = this.get__attributes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__attributes().remove(value);
                    this.get__attributes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_defaultValues()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDefaultValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDefaultValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDefaultValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDefaultValues();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().containsKey(value)) {
                    var obj_0 = this.get__defaultValues().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__defaultValues().remove(value);
                    this.get__defaultValues().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findAttributesByID: function (key) {
              return this.get__attributes().get(key);
            },
            findDefaultValuesByID: function (key) {
              return this.get__defaultValues().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_attributes()) {
                return this.findAttributesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_defaultValues()) {
                return this.findDefaultValuesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_attributes(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryAttribute());
                {
                  var tmp$0 = this.get__attributes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__attributes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_attributes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_attributes());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_defaultValues(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryValue());
                {
                  var tmp$1 = this.get__defaultValues().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__defaultValues().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_defaultValues());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_defaultValues());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getAttributes: function () {
              return this.get_attributes();
            },
            setAttributes: function (internal_p) {
              this.set_attributes(internal_p);
            },
            getDefaultValues: function () {
              return this.get_defaultValues();
            },
            setDefaultValues: function (internal_p) {
              this.set_defaultValues(internal_p);
            }
          }),
          ChannelImpl: Kotlin.createClass([classes.cv, classes.cu], /** @lends _.org.kevoree.impl.ChannelImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$metaData = null;
              this.$started = true;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_bindings = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              var tmp$0;
              (tmp$0 = this.get__bindings()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              this.internal_metaData(iP, true);
            },
            internal_metaData: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_metaData())) {
                var oldPath = this.path();
                this.$metaData = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
                }
              }
            },
            get_started: function () {
              return this.$started;
            },
            set_started: function (iP) {
              this.internal_started(iP, true);
            },
            internal_started: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_started())) {
                var oldPath = this.path();
                this.$started = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_started(), this.get_started()));
                }
              }
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_typeDefinition(typeDefinitionP, true, true);
            },
            internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
                }
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionary(dictionaryP, true, true);
            },
            internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionary());
                }
                this.$dictionary = dictionaryP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
                }
              }
            },
            get__bindings: function () {
              return this.$_bindings;
            },
            get_bindings: function () {
              return _.kotlin.toList(this.get__bindings().values());
            },
            set_bindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (bindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_bindings(bindingsP, true, true);
            },
            internal_bindings: function (bindingsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__bindings().values(), bindingsP)) {
                this.internal_removeAllBindings(true, false);
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__bindings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_hub(), this, false, fireEvents);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
                }
              }
            },
            doAddBindings: function (bindingsP) {
              var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__bindings().containsKey(_key_)) {
                this.get__bindings().put(_key_, bindingsP);
              }
            },
            addBindings: function (bindingsP) {
              this.internal_addBindings(bindingsP, true, true);
            },
            addAllBindings: function (bindingsP) {
              this.internal_addAllBindings(bindingsP, true, true);
            },
            internal_addBindings: function (bindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddBindings(bindingsP);
              if (setOpposite) {
                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_hub(), this, false, fireEvents);
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            internal_addAllBindings: function (bindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddBindings(el);
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_hub(), this, false, fireEvents);
                  }
                }
              }
               else {
                {
                  var tmp$1 = bindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddBindings(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            removeBindings: function (bindingsP) {
              this.internal_removeBindings(bindingsP, true, true);
            },
            removeAllBindings: function () {
              this.internal_removeAllBindings(true, true);
            },
            internal_removeBindings: function (bindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__bindings().remove((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
                }
                if (setOpposite) {
                  (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_hub(), null, false, fireEvents);
                }
              }
            },
            internal_removeAllBindings: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_bindings()) != null ? tmp$0 : Kotlin.throwNPE();
              if (setOpposite) {
                {
                  var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                  while (tmp$1.hasNext()) {
                    var el = tmp$1.next();
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_hub(), null, false, fireEvents);
                  }
                }
              }
              this.get__bindings().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                this.internal_metaData(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_typeDefinition(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionary(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.internal_removeAllBindings(setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(value)) {
                    var obj = this.get__bindings().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__bindings().remove(value);
                    this.get__bindings().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findBindingsByID: function (key) {
              return this.get__bindings().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                var objFound = this.get_typeDefinition();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                var objFound_0 = this.get_dictionary();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                return this.findBindingsByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary(), _.org.kevoree.util.Constants.get_org_kevoree_Dictionary());
                this.internal_visit(visitor, this.get_dictionary(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                this.internal_visit(visitor, this.get_typeDefinition(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_bindings(), _.org.kevoree.util.Constants.get_org_kevoree_MBinding());
                {
                  var tmp$0 = this.get__bindings().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__bindings().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_bindings());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_bindings());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_started(), _.org.kevoree.util.Constants.get_Att_started(), this);
              visitor.visit(this.get_metaData(), _.org.kevoree.util.Constants.get_Att_metaData(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Channel();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getStarted: function () {
              return this.get_started();
            },
            setStarted: function (internal_p) {
              this.set_started(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getBindings: function () {
              return this.get_bindings();
            },
            setBindings: function (internal_p) {
              this.set_bindings(internal_p);
            }
          }),
          NamespaceImpl: Kotlin.createClass([classes.cv, classes.c1f], /** @lends _.org.kevoree.impl.NamespaceImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$_childs = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllChildsCurrentlyProcessing = false;
              this.$parent = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__childs()) != null ? tmp$0.clear() : null;
              this.set_parent(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get__childs: function () {
              return this.$_childs;
            },
            get_childs: function () {
              return _.kotlin.toList(this.get__childs().values());
            },
            set_childs: function (childsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (childsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_childs(childsP, true, true);
            },
            internal_childs: function (childsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__childs().values(), childsP)) {
                this.get__childs().clear();
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__childs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_childs(), el), _.org.kevoree.util.Constants.get_Ref_childs());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
                }
              }
            },
            doAddChilds: function (childsP) {
              var _key_ = (childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__childs().containsKey(_key_)) {
                this.get__childs().put(_key_, childsP);
                (childsP != null ? childsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP), _.org.kevoree.util.Constants.get_Ref_childs());
              }
            },
            addChilds: function (childsP) {
              this.internal_addChilds(childsP, true, true);
            },
            addAllChilds: function (childsP) {
              this.internal_addAllChilds(childsP, true, true);
            },
            internal_addChilds: function (childsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddChilds(childsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            internal_addAllChilds: function (childsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddChilds(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = childsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddChilds(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
              }
            },
            removeChilds: function (childsP) {
              this.internal_removeChilds(childsP, true, true);
            },
            get_removeAllChildsCurrentlyProcessing: function () {
              return this.$removeAllChildsCurrentlyProcessing;
            },
            set_removeAllChildsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllChildsCurrentlyProcessing = tmp$0;
            },
            removeAllChilds: function () {
              this.internal_removeAllChilds(true, true);
            },
            internal_removeChilds: function (childsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__childs().size() !== 0 && this.get__childs().containsKey((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__childs().remove((childsP != null ? childsP : Kotlin.throwNPE()).internalGetKey());
                ((childsP != null ? childsP : Kotlin.throwNPE()) != null ? childsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllChildsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), childsP));
                }
              }
            },
            internal_removeAllChilds: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllChildsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_childs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__childs().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_childs(), temp_els));
                this.set_removeAllChildsCurrentlyProcessing(false);
              }
            },
            get_parent: function () {
              return this.$parent;
            },
            set_parent: function (parentP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_parent(parentP, true, true);
            },
            internal_parent: function (parentP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$parent, parentP)) {
                this.$parent = parentP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_parent(), parentP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addChilds(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllChilds(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeChilds(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllChilds();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__childs().size() !== 0 && this.get__childs().containsKey(value)) {
                    var obj = this.get__childs().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__childs().remove(value);
                    this.get__childs().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_parent()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_parent(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_parent(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_parent(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findChildsByID: function (key) {
              return this.get__childs().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                return this.findChildsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_parent()) {
                var objFound = this.get_parent();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_childs(), _.org.kevoree.util.Constants.get_org_kevoree_Namespace());
                {
                  var tmp$0 = this.get__childs().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__childs().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_childs());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_childs());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_parent(), _.org.kevoree.util.Constants.get_org_kevoree_Namespace());
                this.internal_visit(visitor, this.get_parent(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_parent());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_parent());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Namespace();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getChilds: function () {
              return this.get_childs();
            },
            setChilds: function (internal_p) {
              this.set_childs(internal_p);
            },
            getParent: function () {
              return this.get_parent();
            },
            setParent: function (internal_p) {
              this.set_parent(internal_p);
            }
          }),
          ContainerNodeImpl: Kotlin.createClass([classes.cv, classes.c1], /** @lends _.org.kevoree.impl.ContainerNodeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$metaData = null;
              this.$started = true;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_components = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllComponentsCurrentlyProcessing = false;
              this.$_hosts = new Kotlin.PrimitiveHashMap(0);
              this.$host = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              var tmp$0, tmp$1;
              (tmp$0 = this.get__components()) != null ? tmp$0.clear() : null;
              (tmp$1 = this.get__hosts()) != null ? tmp$1.clear() : null;
              this.set_host(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              this.internal_metaData(iP, true);
            },
            internal_metaData: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_metaData())) {
                var oldPath = this.path();
                this.$metaData = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
                }
              }
            },
            get_started: function () {
              return this.$started;
            },
            set_started: function (iP) {
              this.internal_started(iP, true);
            },
            internal_started: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_started())) {
                var oldPath = this.path();
                this.$started = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_started(), this.get_started()));
                }
              }
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_typeDefinition(typeDefinitionP, true, true);
            },
            internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
                }
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionary(dictionaryP, true, true);
            },
            internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionary());
                }
                this.$dictionary = dictionaryP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
                }
              }
            },
            get__components: function () {
              return this.$_components;
            },
            get_components: function () {
              return _.kotlin.toList(this.get__components().values());
            },
            set_components: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (componentsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_components(componentsP, true, true);
            },
            internal_components: function (componentsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__components().values(), componentsP)) {
                this.get__components().clear();
                {
                  var tmp$0 = componentsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__components().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_components(), el), _.org.kevoree.util.Constants.get_Ref_components());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
                }
              }
            },
            doAddComponents: function (componentsP) {
              var _key_ = (componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__components().containsKey(_key_)) {
                this.get__components().put(_key_, componentsP);
                (componentsP != null ? componentsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP), _.org.kevoree.util.Constants.get_Ref_components());
              }
            },
            addComponents: function (componentsP) {
              this.internal_addComponents(componentsP, true, true);
            },
            addAllComponents: function (componentsP) {
              this.internal_addAllComponents(componentsP, true, true);
            },
            internal_addComponents: function (componentsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddComponents(componentsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
              }
            },
            internal_addAllComponents: function (componentsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = componentsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddComponents(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = componentsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddComponents(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
              }
            },
            removeComponents: function (componentsP) {
              this.internal_removeComponents(componentsP, true, true);
            },
            get_removeAllComponentsCurrentlyProcessing: function () {
              return this.$removeAllComponentsCurrentlyProcessing;
            },
            set_removeAllComponentsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllComponentsCurrentlyProcessing = tmp$0;
            },
            removeAllComponents: function () {
              this.internal_removeAllComponents(true, true);
            },
            internal_removeComponents: function (componentsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__components().size() !== 0 && this.get__components().containsKey((componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__components().remove((componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey());
                ((componentsP != null ? componentsP : Kotlin.throwNPE()) != null ? componentsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllComponentsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), componentsP));
                }
              }
            },
            internal_removeAllComponents: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllComponentsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_components()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__components().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_components(), temp_els));
                this.set_removeAllComponentsCurrentlyProcessing(false);
              }
            },
            get__hosts: function () {
              return this.$_hosts;
            },
            get_hosts: function () {
              return _.kotlin.toList(this.get__hosts().values());
            },
            set_hosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (hostsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_hosts(hostsP, true, true);
            },
            internal_hosts: function (hostsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__hosts().values(), hostsP)) {
                this.internal_removeAllHosts(true, false);
                {
                  var tmp$0 = hostsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__hosts().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_host(), this, false, fireEvents);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
                }
              }
            },
            doAddHosts: function (hostsP) {
              var _key_ = (hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__hosts().containsKey(_key_)) {
                this.get__hosts().put(_key_, hostsP);
              }
            },
            addHosts: function (hostsP) {
              this.internal_addHosts(hostsP, true, true);
            },
            addAllHosts: function (hostsP) {
              this.internal_addAllHosts(hostsP, true, true);
            },
            internal_addHosts: function (hostsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddHosts(hostsP);
              if (setOpposite) {
                (hostsP != null ? hostsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_host(), this, false, fireEvents);
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
              }
            },
            internal_addAllHosts: function (hostsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = hostsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddHosts(el);
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_host(), this, false, fireEvents);
                  }
                }
              }
               else {
                {
                  var tmp$1 = hostsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddHosts(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
              }
            },
            removeHosts: function (hostsP) {
              this.internal_removeHosts(hostsP, true, true);
            },
            removeAllHosts: function () {
              this.internal_removeAllHosts(true, true);
            },
            internal_removeHosts: function (hostsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__hosts().remove((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), hostsP));
                }
                if (setOpposite) {
                  (hostsP != null ? hostsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_host(), null, false, fireEvents);
                }
              }
            },
            internal_removeAllHosts: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_hosts()) != null ? tmp$0 : Kotlin.throwNPE();
              if (setOpposite) {
                {
                  var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                  while (tmp$1.hasNext()) {
                    var el = tmp$1.next();
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_host(), null, false, fireEvents);
                  }
                }
              }
              this.get__hosts().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hosts(), temp_els));
              }
            },
            get_host: function () {
              return this.$host;
            },
            set_host: function (hostP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_host(hostP, true, true);
            },
            internal_host: function (hostP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$host, hostP)) {
                if (setOpposite) {
                  if (this.$host != null) {
                    var tmp$0;
                    ((tmp$0 = this.$host) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_hosts(), this, false, fireEvents);
                  }
                  if (hostP != null) {
                    hostP.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.util.Constants.get_Ref_hosts(), this, false, fireEvents);
                  }
                }
                this.$host = hostP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_host(), hostP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                this.internal_metaData(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_typeDefinition(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionary(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_components()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addComponents(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllComponents(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeComponents(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllComponents();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__components().size() !== 0 && this.get__components().containsKey(value)) {
                    var obj = this.get__components().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__components().remove(value);
                    this.get__components().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hosts()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addHosts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllHosts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeHosts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.internal_removeAllHosts(setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey(value)) {
                    var obj_0 = this.get__hosts().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__hosts().remove(value);
                    this.get__hosts().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_host()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_host(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_host(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_host(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findComponentsByID: function (key) {
              return this.get__components().get(key);
            },
            findHostsByID: function (key) {
              return this.get__hosts().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                var objFound = this.get_typeDefinition();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                var objFound_0 = this.get_dictionary();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_components()) {
                return this.findComponentsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hosts()) {
                return this.findHostsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_host()) {
                var objFound_1 = this.get_host();
                if (objFound_1 != null && Kotlin.equals((objFound_1 != null ? objFound_1 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_1;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary(), _.org.kevoree.util.Constants.get_org_kevoree_Dictionary());
                this.internal_visit(visitor, this.get_dictionary(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_components(), _.org.kevoree.util.Constants.get_org_kevoree_ComponentInstance());
                {
                  var tmp$0 = this.get__components().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__components().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_components());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_components());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                this.internal_visit(visitor, this.get_typeDefinition(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_hosts(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                {
                  var tmp$1 = this.get__hosts().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__hosts().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_hosts());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_hosts());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_host(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                this.internal_visit(visitor, this.get_host(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_host());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_host());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_started(), _.org.kevoree.util.Constants.get_Att_started(), this);
              visitor.visit(this.get_metaData(), _.org.kevoree.util.Constants.get_Att_metaData(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getStarted: function () {
              return this.get_started();
            },
            setStarted: function (internal_p) {
              this.set_started(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getComponents: function () {
              return this.get_components();
            },
            setComponents: function (internal_p) {
              this.set_components(internal_p);
            },
            getHosts: function () {
              return this.get_hosts();
            },
            setHosts: function (internal_p) {
              this.set_hosts(internal_p);
            },
            getHost: function () {
              return this.get_host();
            },
            setHost: function (internal_p) {
              this.set_host(internal_p);
            }
          }),
          ComponentInstanceImpl: Kotlin.createClass([classes.cv, classes.c1m], /** @lends _.org.kevoree.impl.ComponentInstanceImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$metaData = null;
              this.$started = true;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_provided = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllProvidedCurrentlyProcessing = false;
              this.$_required = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRequiredCurrentlyProcessing = false;
              this.$namespace = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              var tmp$0, tmp$1;
              (tmp$0 = this.get__provided()) != null ? tmp$0.clear() : null;
              (tmp$1 = this.get__required()) != null ? tmp$1.clear() : null;
              this.set_namespace(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              this.internal_metaData(iP, true);
            },
            internal_metaData: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_metaData())) {
                var oldPath = this.path();
                this.$metaData = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
                }
              }
            },
            get_started: function () {
              return this.$started;
            },
            set_started: function (iP) {
              this.internal_started(iP, true);
            },
            internal_started: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_started())) {
                var oldPath = this.path();
                this.$started = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_started(), this.get_started()));
                }
              }
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_typeDefinition(typeDefinitionP, true, true);
            },
            internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
                }
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionary(dictionaryP, true, true);
            },
            internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionary());
                }
                this.$dictionary = dictionaryP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
                }
              }
            },
            get__provided: function () {
              return this.$_provided;
            },
            get_provided: function () {
              return _.kotlin.toList(this.get__provided().values());
            },
            set_provided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_provided(providedP, true, true);
            },
            internal_provided: function (providedP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__provided().values(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__provided().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_provided(), el), _.org.kevoree.util.Constants.get_Ref_provided());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            doAddProvided: function (providedP) {
              var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__provided().containsKey(_key_)) {
                this.get__provided().put(_key_, providedP);
                (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP), _.org.kevoree.util.Constants.get_Ref_provided());
              }
            },
            addProvided: function (providedP) {
              this.internal_addProvided(providedP, true, true);
            },
            addAllProvided: function (providedP) {
              this.internal_addAllProvided(providedP, true, true);
            },
            internal_addProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddProvided(providedP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            internal_addAllProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddProvided(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddProvided(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            removeProvided: function (providedP) {
              this.internal_removeProvided(providedP, true, true);
            },
            get_removeAllProvidedCurrentlyProcessing: function () {
              return this.$removeAllProvidedCurrentlyProcessing;
            },
            set_removeAllProvidedCurrentlyProcessing: function (tmp$0) {
              this.$removeAllProvidedCurrentlyProcessing = tmp$0;
            },
            removeAllProvided: function () {
              this.internal_removeAllProvided(true, true);
            },
            internal_removeProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__provided().remove((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllProvidedCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            internal_removeAllProvided: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllProvidedCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_provided()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__provided().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), temp_els));
                this.set_removeAllProvidedCurrentlyProcessing(false);
              }
            },
            get__required: function () {
              return this.$_required;
            },
            get_required: function () {
              return _.kotlin.toList(this.get__required().values());
            },
            set_required: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_required(requiredP, true, true);
            },
            internal_required: function (requiredP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__required().values(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__required().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_required(), el), _.org.kevoree.util.Constants.get_Ref_required());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            doAddRequired: function (requiredP) {
              var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__required().containsKey(_key_)) {
                this.get__required().put(_key_, requiredP);
                (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP), _.org.kevoree.util.Constants.get_Ref_required());
              }
            },
            addRequired: function (requiredP) {
              this.internal_addRequired(requiredP, true, true);
            },
            addAllRequired: function (requiredP) {
              this.internal_addAllRequired(requiredP, true, true);
            },
            internal_addRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddRequired(requiredP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            internal_addAllRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddRequired(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddRequired(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            removeRequired: function (requiredP) {
              this.internal_removeRequired(requiredP, true, true);
            },
            get_removeAllRequiredCurrentlyProcessing: function () {
              return this.$removeAllRequiredCurrentlyProcessing;
            },
            set_removeAllRequiredCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRequiredCurrentlyProcessing = tmp$0;
            },
            removeAllRequired: function () {
              this.internal_removeAllRequired(true, true);
            },
            internal_removeRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__required().size() !== 0 && this.get__required().containsKey((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__required().remove((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRequiredCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            internal_removeAllRequired: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllRequiredCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_required()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__required().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), temp_els));
                this.set_removeAllRequiredCurrentlyProcessing(false);
              }
            },
            get_namespace: function () {
              return this.$namespace;
            },
            set_namespace: function (namespaceP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_namespace(namespaceP, true, true);
            },
            internal_namespace: function (namespaceP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$namespace, namespaceP)) {
                this.$namespace = namespaceP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_namespace(), namespaceP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                this.internal_metaData(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_typeDefinition(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionary(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj = this.get__provided().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__provided().remove(value);
                    this.get__provided().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_0 = this.get__required().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__required().remove(value);
                    this.get__required().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_namespace()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_namespace(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_namespace(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_namespace(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                var objFound = this.get_typeDefinition();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                var objFound_0 = this.get_dictionary();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                return this.findProvidedByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                return this.findRequiredByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_namespace()) {
                var objFound_1 = this.get_namespace();
                if (objFound_1 != null && Kotlin.equals((objFound_1 != null ? objFound_1 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_1;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary(), _.org.kevoree.util.Constants.get_org_kevoree_Dictionary());
                this.internal_visit(visitor, this.get_dictionary(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_provided(), _.org.kevoree.util.Constants.get_org_kevoree_Port());
                {
                  var tmp$0 = this.get__provided().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__provided().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_provided());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_provided());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_required(), _.org.kevoree.util.Constants.get_org_kevoree_Port());
                {
                  var tmp$1 = this.get__required().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__required().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_required());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_required());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                this.internal_visit(visitor, this.get_typeDefinition(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_namespace(), _.org.kevoree.util.Constants.get_org_kevoree_Namespace());
                this.internal_visit(visitor, this.get_namespace(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_namespace());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_namespace());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_started(), _.org.kevoree.util.Constants.get_Att_started(), this);
              visitor.visit(this.get_metaData(), _.org.kevoree.util.Constants.get_Att_metaData(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ComponentInstance();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getStarted: function () {
              return this.get_started();
            },
            setStarted: function (internal_p) {
              this.set_started(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getProvided: function () {
              return this.get_provided();
            },
            setProvided: function (internal_p) {
              this.set_provided(internal_p);
            },
            getRequired: function () {
              return this.get_required();
            },
            setRequired: function (internal_p) {
              this.set_required(internal_p);
            },
            getNamespace: function () {
              return this.get_namespace();
            },
            setNamespace: function (internal_p) {
              this.set_namespace(internal_p);
            }
          }),
          MessagePortTypeImpl: Kotlin.createClass([classes.cv, classes.c2], /** @lends _.org.kevoree.impl.MessagePortTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$synchrone = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_filters = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__filters()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_synchrone: function () {
              return this.$synchrone;
            },
            set_synchrone: function (iP) {
              this.internal_synchrone(iP, true);
            },
            internal_synchrone: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_synchrone())) {
                var oldPath = this.path();
                this.$synchrone = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_synchrone(), this.get_synchrone()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            get__filters: function () {
              return this.$_filters;
            },
            get_filters: function () {
              return _.kotlin.toList(this.get__filters().values());
            },
            set_filters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (filtersP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_filters(filtersP, true, true);
            },
            internal_filters: function (filtersP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__filters().values(), filtersP)) {
                this.get__filters().clear();
                {
                  var tmp$0 = filtersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__filters().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
                }
              }
            },
            doAddFilters: function (filtersP) {
              var _key_ = (filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__filters().containsKey(_key_)) {
                this.get__filters().put(_key_, filtersP);
              }
            },
            addFilters: function (filtersP) {
              this.internal_addFilters(filtersP, true, true);
            },
            addAllFilters: function (filtersP) {
              this.internal_addAllFilters(filtersP, true, true);
            },
            internal_addFilters: function (filtersP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddFilters(filtersP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
              }
            },
            internal_addAllFilters: function (filtersP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = filtersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddFilters(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = filtersP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddFilters(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
              }
            },
            removeFilters: function (filtersP) {
              this.internal_removeFilters(filtersP, true, true);
            },
            removeAllFilters: function () {
              this.internal_removeAllFilters(true, true);
            },
            internal_removeFilters: function (filtersP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__filters().size() !== 0 && this.get__filters().containsKey((filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__filters().remove((filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), filtersP));
                }
              }
            },
            internal_removeAllFilters: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_filters()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__filters().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_filters(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                this.internal_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_filters()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addFilters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllFilters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeFilters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllFilters();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__filters().size() !== 0 && this.get__filters().containsKey(value)) {
                    var obj_1 = this.get__filters().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__filters().remove(value);
                    this.get__filters().put(objNewKey_1, obj_1);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findFiltersByID: function (key) {
              return this.get__filters().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_filters()) {
                return this.findFiltersByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$0 = this.get__deployUnits().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$1 = this.get__superTypes().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_filters(), _.org.kevoree.util.Constants.get_org_kevoree_TypedElement());
                {
                  var tmp$2 = this.get__filters().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$2.next();
                    this.internal_visit(visitor, this.get__filters().get(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_filters());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_filters());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_synchrone(), _.org.kevoree.util.Constants.get_Att_synchrone(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_MessagePortType();
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getSynchrone: function () {
              return this.get_synchrone();
            },
            setSynchrone: function (internal_p) {
              this.set_synchrone(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getFilters: function () {
              return this.get_filters();
            },
            setFilters: function (internal_p) {
              this.set_filters(internal_p);
            }
          }),
          ParameterImpl: Kotlin.createClass([classes.cv, classes.cx], /** @lends _.org.kevoree.impl.ParameterImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$order = null;
              this.$type = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_type(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_order: function () {
              return this.$order;
            },
            set_order: function (iP) {
              this.internal_order(iP, true);
            },
            internal_order: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (iP !== this.get_order()) {
                var oldPath = this.path();
                this.$order = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_order(), this.get_order()));
                }
              }
            },
            get_type: function () {
              return this.$type;
            },
            set_type: function (typeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_type(typeP, true, true);
            },
            internal_type: function (typeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$type, typeP)) {
                this.$type = typeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_type(), typeP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_order()) {
                this.internal_order(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_type()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_type(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_type(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_type(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_type()) {
                var objFound = this.get_type();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_type(), _.org.kevoree.util.Constants.get_org_kevoree_TypedElement());
                this.internal_visit(visitor, this.get_type(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_type());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_type());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_order(), _.org.kevoree.util.Constants.get_Att_order(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Parameter();
            },
            getOrder: function () {
              return this.get_order();
            },
            setOrder: function (internal_p) {
              this.set_order(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getType: function () {
              return this.get_type();
            },
            setType: function (internal_p) {
              this.set_type(internal_p);
            }
          }),
          DictionaryAttributeImpl: Kotlin.createClass([classes.cv, classes.c17], /** @lends _.org.kevoree.impl.DictionaryAttributeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$optional = null;
              this.$state = null;
              this.$datatype = null;
              this.$fragmentDependant = null;
              this.$_genericTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__genericTypes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_optional: function () {
              return this.$optional;
            },
            set_optional: function (iP) {
              this.internal_optional(iP, true);
            },
            internal_optional: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_optional())) {
                var oldPath = this.path();
                this.$optional = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_optional(), this.get_optional()));
                }
              }
            },
            get_state: function () {
              return this.$state;
            },
            set_state: function (iP) {
              this.internal_state(iP, true);
            },
            internal_state: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_state())) {
                var oldPath = this.path();
                this.$state = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_state(), this.get_state()));
                }
              }
            },
            get_datatype: function () {
              return this.$datatype;
            },
            set_datatype: function (iP) {
              this.internal_datatype(iP, true);
            },
            internal_datatype: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_datatype())) {
                var oldPath = this.path();
                this.$datatype = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_datatype(), this.get_datatype()));
                }
              }
            },
            get_fragmentDependant: function () {
              return this.$fragmentDependant;
            },
            set_fragmentDependant: function (iP) {
              this.internal_fragmentDependant(iP, true);
            },
            internal_fragmentDependant: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_fragmentDependant())) {
                var oldPath = this.path();
                this.$fragmentDependant = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), this.get_fragmentDependant()));
                }
              }
            },
            get__genericTypes: function () {
              return this.$_genericTypes;
            },
            get_genericTypes: function () {
              return _.kotlin.toList(this.get__genericTypes().values());
            },
            set_genericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (genericTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_genericTypes(genericTypesP, true, true);
            },
            internal_genericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__genericTypes().values(), genericTypesP)) {
                this.get__genericTypes().clear();
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__genericTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
                }
              }
            },
            doAddGenericTypes: function (genericTypesP) {
              var _key_ = (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__genericTypes().containsKey(_key_)) {
                this.get__genericTypes().put(_key_, genericTypesP);
              }
            },
            addGenericTypes: function (genericTypesP) {
              this.internal_addGenericTypes(genericTypesP, true, true);
            },
            addAllGenericTypes: function (genericTypesP) {
              this.internal_addAllGenericTypes(genericTypesP, true, true);
            },
            internal_addGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddGenericTypes(genericTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            internal_addAllGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddGenericTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = genericTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddGenericTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            removeGenericTypes: function (genericTypesP) {
              this.internal_removeGenericTypes(genericTypesP, true, true);
            },
            removeAllGenericTypes: function () {
              this.internal_removeAllGenericTypes(true, true);
            },
            internal_removeGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__genericTypes().remove((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
                }
              }
            },
            internal_removeAllGenericTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_genericTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__genericTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_optional()) {
                this.internal_optional(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_state()) {
                this.internal_state(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_datatype()) {
                this.internal_datatype(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_fragmentDependant()) {
                this.internal_fragmentDependant(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGenericTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(value)) {
                    var obj = this.get__genericTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__genericTypes().remove(value);
                    this.get__genericTypes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findGenericTypesByID: function (key) {
              return this.get__genericTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                return this.findGenericTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_genericTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypedElement());
                {
                  var tmp$0 = this.get__genericTypes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__genericTypes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_genericTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_genericTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_fragmentDependant(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), this);
              visitor.visit(this.get_optional(), _.org.kevoree.util.Constants.get_Att_optional(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_state(), _.org.kevoree.util.Constants.get_Att_state(), this);
              visitor.visit(this.get_datatype(), _.org.kevoree.util.Constants.get_Att_datatype(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_DictionaryAttribute();
            },
            getFragmentDependant: function () {
              return this.get_fragmentDependant();
            },
            setFragmentDependant: function (internal_p) {
              this.set_fragmentDependant(internal_p);
            },
            getOptional: function () {
              return this.get_optional();
            },
            setOptional: function (internal_p) {
              this.set_optional(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getState: function () {
              return this.get_state();
            },
            setState: function (internal_p) {
              this.set_state(internal_p);
            },
            getDatatype: function () {
              return this.get_datatype();
            },
            setDatatype: function (internal_p) {
              this.set_datatype(internal_p);
            },
            getGenericTypes: function () {
              return this.get_genericTypes();
            },
            setGenericTypes: function (internal_p) {
              this.set_genericTypes(internal_p);
            }
          }),
          InstanceImpl: Kotlin.createClass([classes.cv, classes.c13], /** @lends _.org.kevoree.impl.InstanceImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$metaData = null;
              this.$started = true;
              this.$typeDefinition = null;
              this.$dictionary = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_typeDefinition(null);
              this.set_dictionary(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              this.internal_metaData(iP, true);
            },
            internal_metaData: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_metaData())) {
                var oldPath = this.path();
                this.$metaData = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
                }
              }
            },
            get_started: function () {
              return this.$started;
            },
            set_started: function (iP) {
              this.internal_started(iP, true);
            },
            internal_started: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_started())) {
                var oldPath = this.path();
                this.$started = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_started(), this.get_started()));
                }
              }
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_typeDefinition(typeDefinitionP, true, true);
            },
            internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
                }
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionary(dictionaryP, true, true);
            },
            internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionary());
                }
                this.$dictionary = dictionaryP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                this.internal_metaData(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_typeDefinition(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionary(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                var objFound = this.get_typeDefinition();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                var objFound_0 = this.get_dictionary();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary(), _.org.kevoree.util.Constants.get_org_kevoree_Dictionary());
                this.internal_visit(visitor, this.get_dictionary(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                this.internal_visit(visitor, this.get_typeDefinition(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_started(), _.org.kevoree.util.Constants.get_Att_started(), this);
              visitor.visit(this.get_metaData(), _.org.kevoree.util.Constants.get_Att_metaData(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Instance();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getStarted: function () {
              return this.get_started();
            },
            setStarted: function (internal_p) {
              this.set_started(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            }
          }),
          TypedElementImpl: Kotlin.createClass([classes.cv, classes.cw], /** @lends _.org.kevoree.impl.TypedElementImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$_genericTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__genericTypes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get__genericTypes: function () {
              return this.$_genericTypes;
            },
            get_genericTypes: function () {
              return _.kotlin.toList(this.get__genericTypes().values());
            },
            set_genericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (genericTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_genericTypes(genericTypesP, true, true);
            },
            internal_genericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__genericTypes().values(), genericTypesP)) {
                this.get__genericTypes().clear();
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__genericTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
                }
              }
            },
            doAddGenericTypes: function (genericTypesP) {
              var _key_ = (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__genericTypes().containsKey(_key_)) {
                this.get__genericTypes().put(_key_, genericTypesP);
              }
            },
            addGenericTypes: function (genericTypesP) {
              this.internal_addGenericTypes(genericTypesP, true, true);
            },
            addAllGenericTypes: function (genericTypesP) {
              this.internal_addAllGenericTypes(genericTypesP, true, true);
            },
            internal_addGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddGenericTypes(genericTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            internal_addAllGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddGenericTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = genericTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddGenericTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
              }
            },
            removeGenericTypes: function (genericTypesP) {
              this.internal_removeGenericTypes(genericTypesP, true, true);
            },
            removeAllGenericTypes: function () {
              this.internal_removeAllGenericTypes(true, true);
            },
            internal_removeGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__genericTypes().remove((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), genericTypesP));
                }
              }
            },
            internal_removeAllGenericTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_genericTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__genericTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGenericTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(value)) {
                    var obj = this.get__genericTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__genericTypes().remove(value);
                    this.get__genericTypes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findGenericTypesByID: function (key) {
              return this.get__genericTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                return this.findGenericTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_genericTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypedElement());
                {
                  var tmp$0 = this.get__genericTypes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__genericTypes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_genericTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_genericTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_TypedElement();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getGenericTypes: function () {
              return this.get_genericTypes();
            },
            setGenericTypes: function (internal_p) {
              this.set_genericTypes(internal_p);
            }
          }),
          NodeTypeImpl: Kotlin.createClass([classes.cv, classes.c14], /** @lends _.org.kevoree.impl.NodeTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_managedPrimitiveTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_managedPrimitiveTypeRefs = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllManagedPrimitiveTypeRefsCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2, tmp$3;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__managedPrimitiveTypes()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__managedPrimitiveTypeRefs()) != null ? tmp$3.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              this.internal_startMethod(iP, true);
            },
            internal_startMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_startMethod())) {
                var oldPath = this.path();
                this.$startMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
                }
              }
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              this.internal_stopMethod(iP, true);
            },
            internal_stopMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_stopMethod())) {
                var oldPath = this.path();
                this.$stopMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
                }
              }
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              this.internal_updateMethod(iP, true);
            },
            internal_updateMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_updateMethod())) {
                var oldPath = this.path();
                this.$updateMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            get__managedPrimitiveTypes: function () {
              return this.$_managedPrimitiveTypes;
            },
            get_managedPrimitiveTypes: function () {
              return _.kotlin.toList(this.get__managedPrimitiveTypes().values());
            },
            set_managedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (managedPrimitiveTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_managedPrimitiveTypes(managedPrimitiveTypesP, true, true);
            },
            internal_managedPrimitiveTypes: function (managedPrimitiveTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__managedPrimitiveTypes().values(), managedPrimitiveTypesP)) {
                this.get__managedPrimitiveTypes().clear();
                {
                  var tmp$0 = managedPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__managedPrimitiveTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
                }
              }
            },
            doAddManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              var _key_ = (managedPrimitiveTypesP != null ? managedPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__managedPrimitiveTypes().containsKey(_key_)) {
                this.get__managedPrimitiveTypes().put(_key_, managedPrimitiveTypesP);
              }
            },
            addManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              this.internal_addManagedPrimitiveTypes(managedPrimitiveTypesP, true, true);
            },
            addAllManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              this.internal_addAllManagedPrimitiveTypes(managedPrimitiveTypesP, true, true);
            },
            internal_addManagedPrimitiveTypes: function (managedPrimitiveTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddManagedPrimitiveTypes(managedPrimitiveTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
              }
            },
            internal_addAllManagedPrimitiveTypes: function (managedPrimitiveTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = managedPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddManagedPrimitiveTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = managedPrimitiveTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddManagedPrimitiveTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
              }
            },
            removeManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              this.internal_removeManagedPrimitiveTypes(managedPrimitiveTypesP, true, true);
            },
            removeAllManagedPrimitiveTypes: function () {
              this.internal_removeAllManagedPrimitiveTypes(true, true);
            },
            internal_removeManagedPrimitiveTypes: function (managedPrimitiveTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey((managedPrimitiveTypesP != null ? managedPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__managedPrimitiveTypes().remove((managedPrimitiveTypesP != null ? managedPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), managedPrimitiveTypesP));
                }
              }
            },
            internal_removeAllManagedPrimitiveTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_managedPrimitiveTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__managedPrimitiveTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), temp_els));
              }
            },
            get__managedPrimitiveTypeRefs: function () {
              return this.$_managedPrimitiveTypeRefs;
            },
            get_managedPrimitiveTypeRefs: function () {
              return _.kotlin.toList(this.get__managedPrimitiveTypeRefs().values());
            },
            set_managedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (managedPrimitiveTypeRefsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_managedPrimitiveTypeRefs(managedPrimitiveTypeRefsP, true, true);
            },
            internal_managedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__managedPrimitiveTypeRefs().values(), managedPrimitiveTypeRefsP)) {
                this.get__managedPrimitiveTypeRefs().clear();
                {
                  var tmp$0 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__managedPrimitiveTypeRefs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), el), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
                }
              }
            },
            doAddManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              var _key_ = (managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__managedPrimitiveTypeRefs().containsKey(_key_)) {
                this.get__managedPrimitiveTypeRefs().put(_key_, managedPrimitiveTypeRefsP);
                (managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs());
              }
            },
            addManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              this.internal_addManagedPrimitiveTypeRefs(managedPrimitiveTypeRefsP, true, true);
            },
            addAllManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              this.internal_addAllManagedPrimitiveTypeRefs(managedPrimitiveTypeRefsP, true, true);
            },
            internal_addManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddManagedPrimitiveTypeRefs(managedPrimitiveTypeRefsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
              }
            },
            internal_addAllManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddManagedPrimitiveTypeRefs(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddManagedPrimitiveTypeRefs(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
              }
            },
            removeManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              this.internal_removeManagedPrimitiveTypeRefs(managedPrimitiveTypeRefsP, true, true);
            },
            get_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing: function () {
              return this.$removeAllManagedPrimitiveTypeRefsCurrentlyProcessing;
            },
            set_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllManagedPrimitiveTypeRefsCurrentlyProcessing = tmp$0;
            },
            removeAllManagedPrimitiveTypeRefs: function () {
              this.internal_removeAllManagedPrimitiveTypeRefs(true, true);
            },
            internal_removeManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__managedPrimitiveTypeRefs().size() !== 0 && this.get__managedPrimitiveTypeRefs().containsKey((managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__managedPrimitiveTypeRefs().remove((managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).internalGetKey());
                ((managedPrimitiveTypeRefsP != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()) != null ? managedPrimitiveTypeRefsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP));
                }
              }
            },
            internal_removeAllManagedPrimitiveTypeRefs: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_managedPrimitiveTypeRefs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__managedPrimitiveTypeRefs().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), temp_els));
                this.set_removeAllManagedPrimitiveTypeRefsCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                this.internal_startMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                this.internal_stopMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                this.internal_updateMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addManagedPrimitiveTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllManagedPrimitiveTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeManagedPrimitiveTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllManagedPrimitiveTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey(value)) {
                    var obj_1 = this.get__managedPrimitiveTypes().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__managedPrimitiveTypes().remove(value);
                    this.get__managedPrimitiveTypes().put(objNewKey_1, obj_1);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addManagedPrimitiveTypeRefs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllManagedPrimitiveTypeRefs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeManagedPrimitiveTypeRefs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllManagedPrimitiveTypeRefs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__managedPrimitiveTypeRefs().size() !== 0 && this.get__managedPrimitiveTypeRefs().containsKey(value)) {
                    var obj_2 = this.get__managedPrimitiveTypeRefs().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__managedPrimitiveTypeRefs().remove(value);
                    this.get__managedPrimitiveTypeRefs().put(objNewKey_2, obj_2);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findManagedPrimitiveTypesByID: function (key) {
              return this.get__managedPrimitiveTypes().get(key);
            },
            findManagedPrimitiveTypeRefsByID: function (key) {
              return this.get__managedPrimitiveTypeRefs().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes()) {
                return this.findManagedPrimitiveTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs()) {
                return this.findManagedPrimitiveTypeRefsByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs(), _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveTypeRef());
                {
                  var tmp$0 = this.get__managedPrimitiveTypeRefs().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__managedPrimitiveTypeRefs().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$1 = this.get__deployUnits().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$2 = this.get__superTypes().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$2.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveType());
                {
                  var tmp$3 = this.get__managedPrimitiveTypes().keySet().iterator();
                  while (tmp$3.hasNext()) {
                    var KMFLoopEntryKey_2 = tmp$3.next();
                    this.internal_visit(visitor, this.get__managedPrimitiveTypes().get(KMFLoopEntryKey_2), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_stopMethod(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this);
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_updateMethod(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
              visitor.visit(this.get_startMethod(), _.org.kevoree.util.Constants.get_Att_startMethod(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_NodeType();
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getManagedPrimitiveTypes: function () {
              return this.get_managedPrimitiveTypes();
            },
            setManagedPrimitiveTypes: function (internal_p) {
              this.set_managedPrimitiveTypes(internal_p);
            },
            getManagedPrimitiveTypeRefs: function () {
              return this.get_managedPrimitiveTypeRefs();
            },
            setManagedPrimitiveTypeRefs: function (internal_p) {
              this.set_managedPrimitiveTypeRefs(internal_p);
            }
          }),
          DeployUnitImpl: Kotlin.createClass([classes.cv, classes.c0], /** @lends _.org.kevoree.impl.DeployUnitImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$groupName = null;
              this.$unitName = null;
              this.$version = null;
              this.$url = null;
              this.$hashcode = null;
              this.$type = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_requiredLibs = new Kotlin.PrimitiveHashMap(0);
              this.$targetNodeType = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__requiredLibs()) != null ? tmp$0.clear() : null;
              this.set_targetNodeType(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
              }
            },
            get_groupName: function () {
              return this.$groupName;
            },
            set_groupName: function (iP) {
              this.internal_groupName(iP, true);
            },
            internal_groupName: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_groupName())) {
                var oldPath = this.path();
                this.$groupName = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_groupName(), this.get_groupName()));
                }
              }
            },
            get_unitName: function () {
              return this.$unitName;
            },
            set_unitName: function (iP) {
              this.internal_unitName(iP, true);
            },
            internal_unitName: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_unitName())) {
                var oldPath = this.path();
                this.$unitName = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_unitName(), this.get_unitName()));
                }
              }
            },
            get_version: function () {
              return this.$version;
            },
            set_version: function (iP) {
              this.internal_version(iP, true);
            },
            internal_version: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_version())) {
                var oldPath = this.path();
                this.$version = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_version(), this.get_version()));
                }
              }
            },
            get_url: function () {
              return this.$url;
            },
            set_url: function (iP) {
              this.internal_url(iP, true);
            },
            internal_url: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_url())) {
                var oldPath = this.path();
                this.$url = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_url(), this.get_url()));
                }
              }
            },
            get_hashcode: function () {
              return this.$hashcode;
            },
            set_hashcode: function (iP) {
              this.internal_hashcode(iP, true);
            },
            internal_hashcode: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_hashcode())) {
                var oldPath = this.path();
                this.$hashcode = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_hashcode(), this.get_hashcode()));
                }
              }
            },
            get_type: function () {
              return this.$type;
            },
            set_type: function (iP) {
              this.internal_type(iP, true);
            },
            internal_type: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_type())) {
                var oldPath = this.path();
                this.$type = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_type(), this.get_type()));
                }
              }
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__requiredLibs: function () {
              return this.$_requiredLibs;
            },
            get_requiredLibs: function () {
              return _.kotlin.toList(this.get__requiredLibs().values());
            },
            set_requiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredLibsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_requiredLibs(requiredLibsP, true, true);
            },
            internal_requiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__requiredLibs().values(), requiredLibsP)) {
                this.get__requiredLibs().clear();
                {
                  var tmp$0 = requiredLibsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__requiredLibs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
                }
              }
            },
            doAddRequiredLibs: function (requiredLibsP) {
              var _key_ = (requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__requiredLibs().containsKey(_key_)) {
                this.get__requiredLibs().put(_key_, requiredLibsP);
              }
            },
            addRequiredLibs: function (requiredLibsP) {
              this.internal_addRequiredLibs(requiredLibsP, true, true);
            },
            addAllRequiredLibs: function (requiredLibsP) {
              this.internal_addAllRequiredLibs(requiredLibsP, true, true);
            },
            internal_addRequiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddRequiredLibs(requiredLibsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
              }
            },
            internal_addAllRequiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = requiredLibsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddRequiredLibs(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = requiredLibsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddRequiredLibs(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
              }
            },
            removeRequiredLibs: function (requiredLibsP) {
              this.internal_removeRequiredLibs(requiredLibsP, true, true);
            },
            removeAllRequiredLibs: function () {
              this.internal_removeAllRequiredLibs(true, true);
            },
            internal_removeRequiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey((requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__requiredLibs().remove((requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), requiredLibsP));
                }
              }
            },
            internal_removeAllRequiredLibs: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_requiredLibs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__requiredLibs().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), temp_els));
              }
            },
            get_targetNodeType: function () {
              return this.$targetNodeType;
            },
            set_targetNodeType: function (targetNodeTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_targetNodeType(targetNodeTypeP, true, true);
            },
            internal_targetNodeType: function (targetNodeTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$targetNodeType, targetNodeTypeP)) {
                this.$targetNodeType = targetNodeTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_targetNodeType(), targetNodeTypeP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_groupName()) {
                this.internal_groupName(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_unitName()) {
                this.internal_unitName(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_version()) {
                this.internal_version(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_url()) {
                this.internal_url(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_hashcode()) {
                this.internal_hashcode(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_type()) {
                this.internal_type(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_requiredLibs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addRequiredLibs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllRequiredLibs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeRequiredLibs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequiredLibs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey(value)) {
                    var obj = this.get__requiredLibs().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__requiredLibs().remove(value);
                    this.get__requiredLibs().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_targetNodeType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_targetNodeType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_targetNodeType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_targetNodeType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findRequiredLibsByID: function (key) {
              return this.get__requiredLibs().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_requiredLibs()) {
                return this.findRequiredLibsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_targetNodeType()) {
                var objFound = this.get_targetNodeType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_requiredLibs(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$0 = this.get__requiredLibs().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__requiredLibs().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_requiredLibs());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_requiredLibs());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_targetNodeType(), _.org.kevoree.util.Constants.get_org_kevoree_NodeType());
                this.internal_visit(visitor, this.get_targetNodeType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_targetNodeType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_targetNodeType());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_groupName(), _.org.kevoree.util.Constants.get_Att_groupName(), this);
              visitor.visit(this.get_unitName(), _.org.kevoree.util.Constants.get_Att_unitName(), this);
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_hashcode(), _.org.kevoree.util.Constants.get_Att_hashcode(), this);
              visitor.visit(this.get_type(), _.org.kevoree.util.Constants.get_Att_type(), this);
              visitor.visit(this.get_url(), _.org.kevoree.util.Constants.get_Att_url(), this);
              visitor.visit(this.get_version(), _.org.kevoree.util.Constants.get_Att_version(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit();
            },
            getGroupName: function () {
              return this.get_groupName();
            },
            setGroupName: function (internal_p) {
              this.set_groupName(internal_p);
            },
            getUnitName: function () {
              return this.get_unitName();
            },
            setUnitName: function (internal_p) {
              this.set_unitName(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getHashcode: function () {
              return this.get_hashcode();
            },
            setHashcode: function (internal_p) {
              this.set_hashcode(internal_p);
            },
            getType: function () {
              return this.get_type();
            },
            setType: function (internal_p) {
              this.set_type(internal_p);
            },
            getUrl: function () {
              return this.get_url();
            },
            setUrl: function (internal_p) {
              this.set_url(internal_p);
            },
            getVersion: function () {
              return this.get_version();
            },
            setVersion: function (internal_p) {
              this.set_version(internal_p);
            },
            getRequiredLibs: function () {
              return this.get_requiredLibs();
            },
            setRequiredLibs: function (internal_p) {
              this.set_requiredLibs(internal_p);
            },
            getTargetNodeType: function () {
              return this.get_targetNodeType();
            },
            setTargetNodeType: function (internal_p) {
              this.set_targetNodeType(internal_p);
            }
          }),
          GroupTypeImpl: Kotlin.createClass([classes.cv, classes.c3], /** @lends _.org.kevoree.impl.GroupTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              this.internal_startMethod(iP, true);
            },
            internal_startMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_startMethod())) {
                var oldPath = this.path();
                this.$startMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
                }
              }
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              this.internal_stopMethod(iP, true);
            },
            internal_stopMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_stopMethod())) {
                var oldPath = this.path();
                this.$stopMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
                }
              }
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              this.internal_updateMethod(iP, true);
            },
            internal_updateMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_updateMethod())) {
                var oldPath = this.path();
                this.$updateMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                this.internal_startMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                this.internal_stopMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                this.internal_updateMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$0 = this.get__deployUnits().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$1 = this.get__superTypes().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_stopMethod(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this);
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_updateMethod(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
              visitor.visit(this.get_startMethod(), _.org.kevoree.util.Constants.get_Att_startMethod(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_GroupType();
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          AdaptationPrimitiveTypeRefImpl: Kotlin.createClass([classes.cv, classes.cs], /** @lends _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$maxTime = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$ref = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_ref(null);
            },
            get_maxTime: function () {
              return this.$maxTime;
            },
            set_maxTime: function (iP) {
              this.internal_maxTime(iP, true);
            },
            internal_maxTime: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_maxTime())) {
                var oldPath = this.path();
                this.$maxTime = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_maxTime(), this.get_maxTime()));
                }
              }
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get_ref: function () {
              return this.$ref;
            },
            set_ref: function (refP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_ref(refP, true, true);
            },
            internal_ref: function (refP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$ref, refP)) {
                this.$ref = refP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ref(), refP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_maxTime()) {
                this.internal_maxTime(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_ref(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_ref(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_ref(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                var objFound = this.get_ref();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_ref(), _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveType());
                this.internal_visit(visitor, this.get_ref(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_ref());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_ref());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
              visitor.visit(this.get_maxTime(), _.org.kevoree.util.Constants.get_Att_maxTime(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveTypeRef();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getMaxTime: function () {
              return this.get_maxTime();
            },
            setMaxTime: function (internal_p) {
              this.set_maxTime(internal_p);
            },
            getRef: function () {
              return this.get_ref();
            },
            setRef: function (internal_p) {
              this.set_ref(internal_p);
            }
          }),
          IntegrationPatternImpl: Kotlin.createClass([classes.cv, classes.c1k], /** @lends _.org.kevoree.impl.IntegrationPatternImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$_extraFonctionalProperties = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllExtraFonctionalPropertiesCurrentlyProcessing = false;
              this.$_portTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__extraFonctionalProperties()) != null ? tmp$0.clear() : null;
              (tmp$1 = this.get__portTypes()) != null ? tmp$1.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get__extraFonctionalProperties: function () {
              return this.$_extraFonctionalProperties;
            },
            get_extraFonctionalProperties: function () {
              return _.kotlin.toList(this.get__extraFonctionalProperties().values());
            },
            set_extraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (extraFonctionalPropertiesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_extraFonctionalProperties(extraFonctionalPropertiesP, true, true);
            },
            internal_extraFonctionalProperties: function (extraFonctionalPropertiesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__extraFonctionalProperties().values(), extraFonctionalPropertiesP)) {
                this.get__extraFonctionalProperties().clear();
                {
                  var tmp$0 = extraFonctionalPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__extraFonctionalProperties().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), el), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
                }
              }
            },
            doAddExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              var _key_ = (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__extraFonctionalProperties().containsKey(_key_)) {
                this.get__extraFonctionalProperties().put(_key_, extraFonctionalPropertiesP);
                (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
              }
            },
            addExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              this.internal_addExtraFonctionalProperties(extraFonctionalPropertiesP, true, true);
            },
            addAllExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              this.internal_addAllExtraFonctionalProperties(extraFonctionalPropertiesP, true, true);
            },
            internal_addExtraFonctionalProperties: function (extraFonctionalPropertiesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddExtraFonctionalProperties(extraFonctionalPropertiesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
              }
            },
            internal_addAllExtraFonctionalProperties: function (extraFonctionalPropertiesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = extraFonctionalPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddExtraFonctionalProperties(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = extraFonctionalPropertiesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddExtraFonctionalProperties(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
              }
            },
            removeExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              this.internal_removeExtraFonctionalProperties(extraFonctionalPropertiesP, true, true);
            },
            get_removeAllExtraFonctionalPropertiesCurrentlyProcessing: function () {
              return this.$removeAllExtraFonctionalPropertiesCurrentlyProcessing;
            },
            set_removeAllExtraFonctionalPropertiesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllExtraFonctionalPropertiesCurrentlyProcessing = tmp$0;
            },
            removeAllExtraFonctionalProperties: function () {
              this.internal_removeAllExtraFonctionalProperties(true, true);
            },
            internal_removeExtraFonctionalProperties: function (extraFonctionalPropertiesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().containsKey((extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__extraFonctionalProperties().remove((extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).internalGetKey());
                ((extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()) != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllExtraFonctionalPropertiesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
                }
              }
            },
            internal_removeAllExtraFonctionalProperties: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllExtraFonctionalPropertiesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_extraFonctionalProperties()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__extraFonctionalProperties().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), temp_els));
                this.set_removeAllExtraFonctionalPropertiesCurrentlyProcessing(false);
              }
            },
            get__portTypes: function () {
              return this.$_portTypes;
            },
            get_portTypes: function () {
              return _.kotlin.toList(this.get__portTypes().values());
            },
            set_portTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_portTypes(portTypesP, true, true);
            },
            internal_portTypes: function (portTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__portTypes().values(), portTypesP)) {
                this.get__portTypes().clear();
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__portTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
                }
              }
            },
            doAddPortTypes: function (portTypesP) {
              var _key_ = (portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__portTypes().containsKey(_key_)) {
                this.get__portTypes().put(_key_, portTypesP);
              }
            },
            addPortTypes: function (portTypesP) {
              this.internal_addPortTypes(portTypesP, true, true);
            },
            addAllPortTypes: function (portTypesP) {
              this.internal_addAllPortTypes(portTypesP, true, true);
            },
            internal_addPortTypes: function (portTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddPortTypes(portTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            internal_addAllPortTypes: function (portTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddPortTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = portTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddPortTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            removePortTypes: function (portTypesP) {
              this.internal_removePortTypes(portTypesP, true, true);
            },
            removeAllPortTypes: function () {
              this.internal_removeAllPortTypes(true, true);
            },
            internal_removePortTypes: function (portTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__portTypes().remove((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
                }
              }
            },
            internal_removeAllPortTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_portTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__portTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addExtraFonctionalProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllExtraFonctionalProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeExtraFonctionalProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllExtraFonctionalProperties();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().containsKey(value)) {
                    var obj = this.get__extraFonctionalProperties().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__extraFonctionalProperties().remove(value);
                    this.get__extraFonctionalProperties().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addPortTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllPortTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removePortTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPortTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(value)) {
                    var obj_0 = this.get__portTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__portTypes().remove(value);
                    this.get__portTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findExtraFonctionalPropertiesByID: function (key) {
              return this.get__extraFonctionalProperties().get(key);
            },
            findPortTypesByID: function (key) {
              return this.get__portTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                return this.findExtraFonctionalPropertiesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                return this.findPortTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), _.org.kevoree.util.Constants.get_org_kevoree_ExtraFonctionalProperty());
                {
                  var tmp$0 = this.get__extraFonctionalProperties().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__extraFonctionalProperties().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_portTypes(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$1 = this.get__portTypes().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__portTypes().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_portTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_portTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_IntegrationPattern();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getExtraFonctionalProperties: function () {
              return this.get_extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (internal_p) {
              this.set_extraFonctionalProperties(internal_p);
            },
            getPortTypes: function () {
              return this.get_portTypes();
            },
            setPortTypes: function (internal_p) {
              this.set_portTypes(internal_p);
            }
          }),
          ChannelTypeImpl: Kotlin.createClass([classes.cv, classes.cr], /** @lends _.org.kevoree.impl.ChannelTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$lowerBindings = null;
              this.$upperBindings = null;
              this.$lowerFragments = null;
              this.$upperFragments = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              this.internal_startMethod(iP, true);
            },
            internal_startMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_startMethod())) {
                var oldPath = this.path();
                this.$startMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
                }
              }
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              this.internal_stopMethod(iP, true);
            },
            internal_stopMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_stopMethod())) {
                var oldPath = this.path();
                this.$stopMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
                }
              }
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              this.internal_updateMethod(iP, true);
            },
            internal_updateMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_updateMethod())) {
                var oldPath = this.path();
                this.$updateMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
                }
              }
            },
            get_lowerBindings: function () {
              return this.$lowerBindings;
            },
            set_lowerBindings: function (iP) {
              this.internal_lowerBindings(iP, true);
            },
            internal_lowerBindings: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (iP !== this.get_lowerBindings()) {
                var oldPath = this.path();
                this.$lowerBindings = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), this.get_lowerBindings()));
                }
              }
            },
            get_upperBindings: function () {
              return this.$upperBindings;
            },
            set_upperBindings: function (iP) {
              this.internal_upperBindings(iP, true);
            },
            internal_upperBindings: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (iP !== this.get_upperBindings()) {
                var oldPath = this.path();
                this.$upperBindings = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_upperBindings(), this.get_upperBindings()));
                }
              }
            },
            get_lowerFragments: function () {
              return this.$lowerFragments;
            },
            set_lowerFragments: function (iP) {
              this.internal_lowerFragments(iP, true);
            },
            internal_lowerFragments: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (iP !== this.get_lowerFragments()) {
                var oldPath = this.path();
                this.$lowerFragments = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), this.get_lowerFragments()));
                }
              }
            },
            get_upperFragments: function () {
              return this.$upperFragments;
            },
            set_upperFragments: function (iP) {
              this.internal_upperFragments(iP, true);
            },
            internal_upperFragments: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (iP !== this.get_upperFragments()) {
                var oldPath = this.path();
                this.$upperFragments = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_upperFragments(), this.get_upperFragments()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                this.internal_startMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                this.internal_stopMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                this.internal_updateMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lowerBindings()) {
                this.internal_lowerBindings(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_upperBindings()) {
                this.internal_upperBindings(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lowerFragments()) {
                this.internal_lowerFragments(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_upperFragments()) {
                this.internal_upperFragments(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$0 = this.get__deployUnits().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$1 = this.get__superTypes().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_upperFragments(), _.org.kevoree.util.Constants.get_Att_upperFragments(), this);
              visitor.visit(this.get_stopMethod(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this);
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_upperBindings(), _.org.kevoree.util.Constants.get_Att_upperBindings(), this);
              visitor.visit(this.get_lowerBindings(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_lowerFragments(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), this);
              visitor.visit(this.get_updateMethod(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
              visitor.visit(this.get_startMethod(), _.org.kevoree.util.Constants.get_Att_startMethod(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ChannelType();
            },
            getUpperFragments: function () {
              return this.get_upperFragments();
            },
            setUpperFragments: function (internal_p) {
              this.set_upperFragments(internal_p);
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getUpperBindings: function () {
              return this.get_upperBindings();
            },
            setUpperBindings: function (internal_p) {
              this.set_upperBindings(internal_p);
            },
            getLowerBindings: function () {
              return this.get_lowerBindings();
            },
            setLowerBindings: function (internal_p) {
              this.set_lowerBindings(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getLowerFragments: function () {
              return this.get_lowerFragments();
            },
            setLowerFragments: function (internal_p) {
              this.set_lowerFragments(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            }
          }),
          ServicePortTypeImpl: Kotlin.createClass([classes.cv, classes.cq], /** @lends _.org.kevoree.impl.ServicePortTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$synchrone = null;
              this.$interface = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_operations = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllOperationsCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__operations()) != null ? tmp$2.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_synchrone: function () {
              return this.$synchrone;
            },
            set_synchrone: function (iP) {
              this.internal_synchrone(iP, true);
            },
            internal_synchrone: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_synchrone())) {
                var oldPath = this.path();
                this.$synchrone = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_synchrone(), this.get_synchrone()));
                }
              }
            },
            get_interface: function () {
              return this.$interface;
            },
            set_interface: function (iP) {
              this.internal_interface(iP, true);
            },
            internal_interface: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_interface())) {
                var oldPath = this.path();
                this.$interface = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_interface(), this.get_interface()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            get__operations: function () {
              return this.$_operations;
            },
            get_operations: function () {
              return _.kotlin.toList(this.get__operations().values());
            },
            set_operations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (operationsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_operations(operationsP, true, true);
            },
            internal_operations: function (operationsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__operations().values(), operationsP)) {
                this.get__operations().clear();
                {
                  var tmp$0 = operationsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__operations().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_operations(), el), _.org.kevoree.util.Constants.get_Ref_operations());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
                }
              }
            },
            doAddOperations: function (operationsP) {
              var _key_ = (operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__operations().containsKey(_key_)) {
                this.get__operations().put(_key_, operationsP);
                (operationsP != null ? operationsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP), _.org.kevoree.util.Constants.get_Ref_operations());
              }
            },
            addOperations: function (operationsP) {
              this.internal_addOperations(operationsP, true, true);
            },
            addAllOperations: function (operationsP) {
              this.internal_addAllOperations(operationsP, true, true);
            },
            internal_addOperations: function (operationsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddOperations(operationsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
              }
            },
            internal_addAllOperations: function (operationsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = operationsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddOperations(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = operationsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddOperations(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
              }
            },
            removeOperations: function (operationsP) {
              this.internal_removeOperations(operationsP, true, true);
            },
            get_removeAllOperationsCurrentlyProcessing: function () {
              return this.$removeAllOperationsCurrentlyProcessing;
            },
            set_removeAllOperationsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllOperationsCurrentlyProcessing = tmp$0;
            },
            removeAllOperations: function () {
              this.internal_removeAllOperations(true, true);
            },
            internal_removeOperations: function (operationsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__operations().size() !== 0 && this.get__operations().containsKey((operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__operations().remove((operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey());
                ((operationsP != null ? operationsP : Kotlin.throwNPE()) != null ? operationsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllOperationsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), operationsP));
                }
              }
            },
            internal_removeAllOperations: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllOperationsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_operations()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__operations().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_operations(), temp_els));
                this.set_removeAllOperationsCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                this.internal_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_interface()) {
                this.internal_interface(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_operations()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addOperations(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllOperations(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeOperations(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllOperations();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__operations().size() !== 0 && this.get__operations().containsKey(value)) {
                    var obj_1 = this.get__operations().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__operations().remove(value);
                    this.get__operations().put(objNewKey_1, obj_1);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findOperationsByID: function (key) {
              return this.get__operations().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_operations()) {
                return this.findOperationsByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_operations(), _.org.kevoree.util.Constants.get_org_kevoree_Operation());
                {
                  var tmp$0 = this.get__operations().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__operations().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_operations());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_operations());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$1 = this.get__deployUnits().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$2 = this.get__superTypes().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$2.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_synchrone(), _.org.kevoree.util.Constants.get_Att_synchrone(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
              visitor.visit(this.get_interface(), _.org.kevoree.util.Constants.get_Att_interface(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ServicePortType();
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getSynchrone: function () {
              return this.get_synchrone();
            },
            setSynchrone: function (internal_p) {
              this.set_synchrone(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getInterface: function () {
              return this.get_interface();
            },
            setInterface: function (internal_p) {
              this.set_interface(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getOperations: function () {
              return this.get_operations();
            },
            setOperations: function (internal_p) {
              this.set_operations(internal_p);
            }
          }),
          NamedElementImpl: Kotlin.createClass([classes.cv, classes.cl], /** @lends _.org.kevoree.impl.NamedElementImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findByID: function (relationName, idP) {
              {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_NamedElement();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            }
          }),
          GroupImpl: Kotlin.createClass([classes.cv, classes.c1c], /** @lends _.org.kevoree.impl.GroupImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$metaData = null;
              this.$started = true;
              this.$typeDefinition = null;
              this.$dictionary = null;
              this.$_subNodes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_typeDefinition(null);
              this.set_dictionary(null);
              var tmp$0;
              (tmp$0 = this.get__subNodes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_metaData: function () {
              return this.$metaData;
            },
            set_metaData: function (iP) {
              this.internal_metaData(iP, true);
            },
            internal_metaData: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_metaData())) {
                var oldPath = this.path();
                this.$metaData = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_metaData(), this.get_metaData()));
                }
              }
            },
            get_started: function () {
              return this.$started;
            },
            set_started: function (iP) {
              this.internal_started(iP, true);
            },
            internal_started: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_started())) {
                var oldPath = this.path();
                this.$started = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_started(), this.get_started()));
                }
              }
            },
            get_typeDefinition: function () {
              return this.$typeDefinition;
            },
            set_typeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_typeDefinition(typeDefinitionP, true, true);
            },
            internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$typeDefinition, typeDefinitionP)) {
                this.$typeDefinition = typeDefinitionP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), typeDefinitionP));
                }
              }
            },
            get_dictionary: function () {
              return this.$dictionary;
            },
            set_dictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionary(dictionaryP, true, true);
            },
            internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionary, dictionaryP)) {
                if (this.$dictionary != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionary) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionary());
                }
                this.$dictionary = dictionaryP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionary(), dictionaryP));
                }
              }
            },
            get__subNodes: function () {
              return this.$_subNodes;
            },
            get_subNodes: function () {
              return _.kotlin.toList(this.get__subNodes().values());
            },
            set_subNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (subNodesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_subNodes(subNodesP, true, true);
            },
            internal_subNodes: function (subNodesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__subNodes().values(), subNodesP)) {
                this.get__subNodes().clear();
                {
                  var tmp$0 = subNodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__subNodes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
                }
              }
            },
            doAddSubNodes: function (subNodesP) {
              var _key_ = (subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__subNodes().containsKey(_key_)) {
                this.get__subNodes().put(_key_, subNodesP);
              }
            },
            addSubNodes: function (subNodesP) {
              this.internal_addSubNodes(subNodesP, true, true);
            },
            addAllSubNodes: function (subNodesP) {
              this.internal_addAllSubNodes(subNodesP, true, true);
            },
            internal_addSubNodes: function (subNodesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSubNodes(subNodesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
              }
            },
            internal_addAllSubNodes: function (subNodesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = subNodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSubNodes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = subNodesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSubNodes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
              }
            },
            removeSubNodes: function (subNodesP) {
              this.internal_removeSubNodes(subNodesP, true, true);
            },
            removeAllSubNodes: function () {
              this.internal_removeAllSubNodes(true, true);
            },
            internal_removeSubNodes: function (subNodesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey((subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__subNodes().remove((subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), subNodesP));
                }
              }
            },
            internal_removeAllSubNodes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_subNodes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__subNodes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                this.internal_metaData(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_typeDefinition(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_typeDefinition(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionary(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionary(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_subNodes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSubNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSubNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSubNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSubNodes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey(value)) {
                    var obj = this.get__subNodes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__subNodes().remove(value);
                    this.get__subNodes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findSubNodesByID: function (key) {
              return this.get__subNodes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                var objFound = this.get_typeDefinition();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                var objFound_0 = this.get_dictionary();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_subNodes()) {
                return this.findSubNodesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary(), _.org.kevoree.util.Constants.get_org_kevoree_Dictionary());
                this.internal_visit(visitor, this.get_dictionary(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionary());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionary());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                this.internal_visit(visitor, this.get_typeDefinition(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinition());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_subNodes(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                {
                  var tmp$0 = this.get__subNodes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__subNodes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_subNodes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_subNodes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_started(), _.org.kevoree.util.Constants.get_Att_started(), this);
              visitor.visit(this.get_metaData(), _.org.kevoree.util.Constants.get_Att_metaData(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Group();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getStarted: function () {
              return this.get_started();
            },
            setStarted: function (internal_p) {
              this.set_started(internal_p);
            },
            getMetaData: function () {
              return this.get_metaData();
            },
            setMetaData: function (internal_p) {
              this.set_metaData(internal_p);
            },
            getTypeDefinition: function () {
              return this.get_typeDefinition();
            },
            setTypeDefinition: function (internal_p) {
              this.set_typeDefinition(internal_p);
            },
            getDictionary: function () {
              return this.get_dictionary();
            },
            setDictionary: function (internal_p) {
              this.set_dictionary(internal_p);
            },
            getSubNodes: function () {
              return this.get_subNodes();
            },
            setSubNodes: function (internal_p) {
              this.set_subNodes(internal_p);
            }
          }),
          NodeNetworkImpl: Kotlin.createClass([classes.cv, classes.cy], /** @lends _.org.kevoree.impl.NodeNetworkImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_link = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllLinkCurrentlyProcessing = false;
              this.$initBy = null;
              this.$target = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__link()) != null ? tmp$0.clear() : null;
              this.set_initBy(null);
              this.set_target(null);
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__link: function () {
              return this.$_link;
            },
            get_link: function () {
              return _.kotlin.toList(this.get__link().values());
            },
            set_link: function (linkP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (linkP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_link(linkP, true, true);
            },
            internal_link: function (linkP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__link().values(), linkP)) {
                this.get__link().clear();
                {
                  var tmp$0 = linkP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__link().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_link(), el), _.org.kevoree.util.Constants.get_Ref_link());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
                }
              }
            },
            doAddLink: function (linkP) {
              var _key_ = (linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__link().containsKey(_key_)) {
                this.get__link().put(_key_, linkP);
                (linkP != null ? linkP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_link(), linkP), _.org.kevoree.util.Constants.get_Ref_link());
              }
            },
            addLink: function (linkP) {
              this.internal_addLink(linkP, true, true);
            },
            addAllLink: function (linkP) {
              this.internal_addAllLink(linkP, true, true);
            },
            internal_addLink: function (linkP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddLink(linkP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
              }
            },
            internal_addAllLink: function (linkP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = linkP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddLink(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = linkP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddLink(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
              }
            },
            removeLink: function (linkP) {
              this.internal_removeLink(linkP, true, true);
            },
            get_removeAllLinkCurrentlyProcessing: function () {
              return this.$removeAllLinkCurrentlyProcessing;
            },
            set_removeAllLinkCurrentlyProcessing: function (tmp$0) {
              this.$removeAllLinkCurrentlyProcessing = tmp$0;
            },
            removeAllLink: function () {
              this.internal_removeAllLink(true, true);
            },
            internal_removeLink: function (linkP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__link().size() !== 0 && this.get__link().containsKey((linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__link().remove((linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey());
                ((linkP != null ? linkP : Kotlin.throwNPE()) != null ? linkP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllLinkCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), linkP));
                }
              }
            },
            internal_removeAllLink: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllLinkCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_link()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__link().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_link(), temp_els));
                this.set_removeAllLinkCurrentlyProcessing(false);
              }
            },
            get_initBy: function () {
              return this.$initBy;
            },
            set_initBy: function (initByP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_initBy(initByP, true, true);
            },
            internal_initBy: function (initByP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$initBy, initByP)) {
                this.$initBy = initByP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_initBy(), initByP));
                }
              }
            },
            get_target: function () {
              return this.$target;
            },
            set_target: function (targetP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_target(targetP, true, true);
            },
            internal_target: function (targetP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$target, targetP)) {
                this.$target = targetP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_target(), targetP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_link()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addLink(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllLink(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeLink(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllLink();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__link().size() !== 0 && this.get__link().containsKey(value)) {
                    var obj = this.get__link().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__link().remove(value);
                    this.get__link().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_initBy()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_initBy(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_initBy(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_initBy(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_target()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_target(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_target(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_target(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findLinkByID: function (key) {
              return this.get__link().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_link()) {
                return this.findLinkByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_initBy()) {
                var objFound = this.get_initBy();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_target()) {
                var objFound_0 = this.get_target();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_link(), _.org.kevoree.util.Constants.get_org_kevoree_NodeLink());
                {
                  var tmp$0 = this.get__link().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__link().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_link());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_link());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_initBy(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                this.internal_visit(visitor, this.get_initBy(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_initBy());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_initBy());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_target(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                this.internal_visit(visitor, this.get_target(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_target());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_target());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_NodeNetwork();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getLink: function () {
              return this.get_link();
            },
            setLink: function (internal_p) {
              this.set_link(internal_p);
            },
            getInitBy: function () {
              return this.get_initBy();
            },
            setInitBy: function (internal_p) {
              this.set_initBy(internal_p);
            },
            getTarget: function () {
              return this.get_target();
            },
            setTarget: function (internal_p) {
              this.set_target(internal_p);
            }
          }),
          NetworkPropertyImpl: Kotlin.createClass([classes.cv, classes.cp], /** @lends _.org.kevoree.impl.NetworkPropertyImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$value = null;
              this.$lastCheck = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_value: function () {
              return this.$value;
            },
            set_value: function (iP) {
              this.internal_value(iP, true);
            },
            internal_value: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_value())) {
                var oldPath = this.path();
                this.$value = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_value(), this.get_value()));
                }
              }
            },
            get_lastCheck: function () {
              return this.$lastCheck;
            },
            set_lastCheck: function (iP) {
              this.internal_lastCheck(iP, true);
            },
            internal_lastCheck: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_lastCheck())) {
                var oldPath = this.path();
                this.$lastCheck = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), this.get_lastCheck()));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_value()) {
                this.internal_value(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lastCheck()) {
                this.internal_lastCheck(value, fireEvents);
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findByID: function (relationName, idP) {
              {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_value(), _.org.kevoree.util.Constants.get_Att_value(), this);
              visitor.visit(this.get_lastCheck(), _.org.kevoree.util.Constants.get_Att_lastCheck(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_NetworkProperty();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getValue: function () {
              return this.get_value();
            },
            setValue: function (internal_p) {
              this.set_value(internal_p);
            },
            getLastCheck: function () {
              return this.get_lastCheck();
            },
            setLastCheck: function (internal_p) {
              this.set_lastCheck(internal_p);
            }
          }),
          AdaptationPrimitiveTypeImpl: Kotlin.createClass([classes.cv, classes.c1h], /** @lends _.org.kevoree.impl.AdaptationPrimitiveTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findByID: function (relationName, idP) {
              {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveType();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            }
          }),
          NodeLinkImpl: Kotlin.createClass([classes.cv, classes.cz], /** @lends _.org.kevoree.impl.NodeLinkImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$networkType = null;
              this.$estimatedRate = null;
              this.$lastCheck = null;
              this.$zoneID = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_networkProperties = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllNetworkPropertiesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__networkProperties()) != null ? tmp$0.clear() : null;
            },
            get_networkType: function () {
              return this.$networkType;
            },
            set_networkType: function (iP) {
              this.internal_networkType(iP, true);
            },
            internal_networkType: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_networkType())) {
                var oldPath = this.path();
                this.$networkType = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_networkType(), this.get_networkType()));
                }
              }
            },
            get_estimatedRate: function () {
              return this.$estimatedRate;
            },
            set_estimatedRate: function (iP) {
              this.internal_estimatedRate(iP, true);
            },
            internal_estimatedRate: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (iP !== this.get_estimatedRate()) {
                var oldPath = this.path();
                this.$estimatedRate = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), this.get_estimatedRate()));
                }
              }
            },
            get_lastCheck: function () {
              return this.$lastCheck;
            },
            set_lastCheck: function (iP) {
              this.internal_lastCheck(iP, true);
            },
            internal_lastCheck: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_lastCheck())) {
                var oldPath = this.path();
                this.$lastCheck = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), this.get_lastCheck()));
                }
              }
            },
            get_zoneID: function () {
              return this.$zoneID;
            },
            set_zoneID: function (iP) {
              this.internal_zoneID(iP, true);
            },
            internal_zoneID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_zoneID())) {
                var oldPath = this.path();
                this.$zoneID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_zoneID(), this.get_zoneID()));
                }
              }
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__networkProperties: function () {
              return this.$_networkProperties;
            },
            get_networkProperties: function () {
              return _.kotlin.toList(this.get__networkProperties().values());
            },
            set_networkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (networkPropertiesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_networkProperties(networkPropertiesP, true, true);
            },
            internal_networkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__networkProperties().values(), networkPropertiesP)) {
                this.get__networkProperties().clear();
                {
                  var tmp$0 = networkPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__networkProperties().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), el), _.org.kevoree.util.Constants.get_Ref_networkProperties());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
                }
              }
            },
            doAddNetworkProperties: function (networkPropertiesP) {
              var _key_ = (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__networkProperties().containsKey(_key_)) {
                this.get__networkProperties().put(_key_, networkPropertiesP);
                (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP), _.org.kevoree.util.Constants.get_Ref_networkProperties());
              }
            },
            addNetworkProperties: function (networkPropertiesP) {
              this.internal_addNetworkProperties(networkPropertiesP, true, true);
            },
            addAllNetworkProperties: function (networkPropertiesP) {
              this.internal_addAllNetworkProperties(networkPropertiesP, true, true);
            },
            internal_addNetworkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddNetworkProperties(networkPropertiesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
              }
            },
            internal_addAllNetworkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = networkPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddNetworkProperties(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = networkPropertiesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddNetworkProperties(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
              }
            },
            removeNetworkProperties: function (networkPropertiesP) {
              this.internal_removeNetworkProperties(networkPropertiesP, true, true);
            },
            get_removeAllNetworkPropertiesCurrentlyProcessing: function () {
              return this.$removeAllNetworkPropertiesCurrentlyProcessing;
            },
            set_removeAllNetworkPropertiesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllNetworkPropertiesCurrentlyProcessing = tmp$0;
            },
            removeAllNetworkProperties: function () {
              this.internal_removeAllNetworkProperties(true, true);
            },
            internal_removeNetworkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__networkProperties().remove((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey());
                ((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()) != null ? networkPropertiesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllNetworkPropertiesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), networkPropertiesP));
                }
              }
            },
            internal_removeAllNetworkProperties: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllNetworkPropertiesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_networkProperties()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__networkProperties().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_networkProperties(), temp_els));
                this.set_removeAllNetworkPropertiesCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_networkType()) {
                this.internal_networkType(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_estimatedRate()) {
                this.internal_estimatedRate(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lastCheck()) {
                this.internal_lastCheck(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_zoneID()) {
                this.internal_zoneID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_networkProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addNetworkProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllNetworkProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeNetworkProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNetworkProperties();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey(value)) {
                    var obj = this.get__networkProperties().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__networkProperties().remove(value);
                    this.get__networkProperties().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findNetworkPropertiesByID: function (key) {
              return this.get__networkProperties().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_networkProperties()) {
                return this.findNetworkPropertiesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_networkProperties(), _.org.kevoree.util.Constants.get_org_kevoree_NetworkProperty());
                {
                  var tmp$0 = this.get__networkProperties().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__networkProperties().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_networkProperties());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_networkProperties());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_estimatedRate(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), this);
              visitor.visit(this.get_networkType(), _.org.kevoree.util.Constants.get_Att_networkType(), this);
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
              visitor.visit(this.get_lastCheck(), _.org.kevoree.util.Constants.get_Att_lastCheck(), this);
              visitor.visit(this.get_zoneID(), _.org.kevoree.util.Constants.get_Att_zoneID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_NodeLink();
            },
            getEstimatedRate: function () {
              return this.get_estimatedRate();
            },
            setEstimatedRate: function (internal_p) {
              this.set_estimatedRate(internal_p);
            },
            getNetworkType: function () {
              return this.get_networkType();
            },
            setNetworkType: function (internal_p) {
              this.set_networkType(internal_p);
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getLastCheck: function () {
              return this.get_lastCheck();
            },
            setLastCheck: function (internal_p) {
              this.set_lastCheck(internal_p);
            },
            getZoneID: function () {
              return this.get_zoneID();
            },
            setZoneID: function (internal_p) {
              this.set_zoneID(internal_p);
            },
            getNetworkProperties: function () {
              return this.get_networkProperties();
            },
            setNetworkProperties: function (internal_p) {
              this.set_networkProperties(internal_p);
            }
          }),
          DictionaryValueImpl: Kotlin.createClass([classes.cv, classes.c1a], /** @lends _.org.kevoree.impl.DictionaryValueImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$value = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$attribute = null;
              this.$targetNode = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_attribute(null);
              this.set_targetNode(null);
            },
            get_value: function () {
              return this.$value;
            },
            set_value: function (iP) {
              this.internal_value(iP, true);
            },
            internal_value: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_value())) {
                var oldPath = this.path();
                this.$value = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_value(), this.get_value()));
                }
              }
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get_attribute: function () {
              return this.$attribute;
            },
            set_attribute: function (attributeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_attribute(attributeP, true, true);
            },
            internal_attribute: function (attributeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$attribute, attributeP)) {
                this.$attribute = attributeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_attribute(), attributeP));
                }
              }
            },
            get_targetNode: function () {
              return this.$targetNode;
            },
            set_targetNode: function (targetNodeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_targetNode(targetNodeP, true, true);
            },
            internal_targetNode: function (targetNodeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$targetNode, targetNodeP)) {
                this.$targetNode = targetNodeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_targetNode(), targetNodeP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_value()) {
                this.internal_value(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_attribute()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_attribute(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_attribute(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_attribute(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_targetNode()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_targetNode(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_targetNode(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_targetNode(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_attribute()) {
                var objFound = this.get_attribute();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_targetNode()) {
                var objFound_0 = this.get_targetNode();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_attribute(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryAttribute());
                this.internal_visit(visitor, this.get_attribute(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_attribute());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_attribute());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_targetNode(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                this.internal_visit(visitor, this.get_targetNode(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_targetNode());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_targetNode());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
              visitor.visit(this.get_value(), _.org.kevoree.util.Constants.get_Att_value(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_DictionaryValue();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getValue: function () {
              return this.get_value();
            },
            setValue: function (internal_p) {
              this.set_value(internal_p);
            },
            getAttribute: function () {
              return this.get_attribute();
            },
            setAttribute: function (internal_p) {
              this.set_attribute(internal_p);
            },
            getTargetNode: function () {
              return this.get_targetNode();
            },
            setTargetNode: function (internal_p) {
              this.set_targetNode(internal_p);
            }
          }),
          OperationImpl: Kotlin.createClass([classes.cv, classes.c12], /** @lends _.org.kevoree.impl.OperationImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$_parameters = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllParametersCurrentlyProcessing = false;
              this.$returnType = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__parameters()) != null ? tmp$0.clear() : null;
              this.set_returnType(null);
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get__parameters: function () {
              return this.$_parameters;
            },
            get_parameters: function () {
              return _.kotlin.toList(this.get__parameters().values());
            },
            set_parameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (parametersP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_parameters(parametersP, true, true);
            },
            internal_parameters: function (parametersP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__parameters().values(), parametersP)) {
                this.get__parameters().clear();
                {
                  var tmp$0 = parametersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__parameters().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_parameters(), el), _.org.kevoree.util.Constants.get_Ref_parameters());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
                }
              }
            },
            doAddParameters: function (parametersP) {
              var _key_ = (parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__parameters().containsKey(_key_)) {
                this.get__parameters().put(_key_, parametersP);
                (parametersP != null ? parametersP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP), _.org.kevoree.util.Constants.get_Ref_parameters());
              }
            },
            addParameters: function (parametersP) {
              this.internal_addParameters(parametersP, true, true);
            },
            addAllParameters: function (parametersP) {
              this.internal_addAllParameters(parametersP, true, true);
            },
            internal_addParameters: function (parametersP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddParameters(parametersP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
              }
            },
            internal_addAllParameters: function (parametersP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = parametersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddParameters(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = parametersP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddParameters(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
              }
            },
            removeParameters: function (parametersP) {
              this.internal_removeParameters(parametersP, true, true);
            },
            get_removeAllParametersCurrentlyProcessing: function () {
              return this.$removeAllParametersCurrentlyProcessing;
            },
            set_removeAllParametersCurrentlyProcessing: function (tmp$0) {
              this.$removeAllParametersCurrentlyProcessing = tmp$0;
            },
            removeAllParameters: function () {
              this.internal_removeAllParameters(true, true);
            },
            internal_removeParameters: function (parametersP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey((parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__parameters().remove((parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey());
                ((parametersP != null ? parametersP : Kotlin.throwNPE()) != null ? parametersP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllParametersCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), parametersP));
                }
              }
            },
            internal_removeAllParameters: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllParametersCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_parameters()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__parameters().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_parameters(), temp_els));
                this.set_removeAllParametersCurrentlyProcessing(false);
              }
            },
            get_returnType: function () {
              return this.$returnType;
            },
            set_returnType: function (returnTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_returnType(returnTypeP, true, true);
            },
            internal_returnType: function (returnTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$returnType, returnTypeP)) {
                this.$returnType = returnTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_returnType(), returnTypeP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_parameters()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addParameters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllParameters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeParameters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllParameters();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey(value)) {
                    var obj = this.get__parameters().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__parameters().remove(value);
                    this.get__parameters().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_returnType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_returnType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_returnType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_returnType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findParametersByID: function (key) {
              return this.get__parameters().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_parameters()) {
                return this.findParametersByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_returnType()) {
                var objFound = this.get_returnType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_parameters(), _.org.kevoree.util.Constants.get_org_kevoree_Parameter());
                {
                  var tmp$0 = this.get__parameters().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__parameters().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_parameters());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_parameters());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_returnType(), _.org.kevoree.util.Constants.get_org_kevoree_TypedElement());
                this.internal_visit(visitor, this.get_returnType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_returnType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_returnType());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Operation();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getParameters: function () {
              return this.get_parameters();
            },
            setParameters: function (internal_p) {
              this.set_parameters(internal_p);
            },
            getReturnType: function () {
              return this.get_returnType();
            },
            setReturnType: function (internal_p) {
              this.set_returnType(internal_p);
            }
          }),
          DefaultKevoreeFactory: Kotlin.createClass(classes.c19, /** @lends _.org.kevoree.impl.DefaultKevoreeFactory.prototype */ {
            initialize: function () {
            },
            getVersion: function () {
              return '2.0.12-SNAPSHOT';
            },
            createComponentInstance: function () {
              return new _.org.kevoree.impl.ComponentInstanceImpl();
            },
            createComponentType: function () {
              return new _.org.kevoree.impl.ComponentTypeImpl();
            },
            createContainerNode: function () {
              return new _.org.kevoree.impl.ContainerNodeImpl();
            },
            createContainerRoot: function () {
              return new _.org.kevoree.impl.ContainerRootImpl();
            },
            createPort: function () {
              return new _.org.kevoree.impl.PortImpl();
            },
            createNamespace: function () {
              return new _.org.kevoree.impl.NamespaceImpl();
            },
            createDictionary: function () {
              return new _.org.kevoree.impl.DictionaryImpl();
            },
            createDictionaryType: function () {
              return new _.org.kevoree.impl.DictionaryTypeImpl();
            },
            createDictionaryAttribute: function () {
              return new _.org.kevoree.impl.DictionaryAttributeImpl();
            },
            createDictionaryValue: function () {
              return new _.org.kevoree.impl.DictionaryValueImpl();
            },
            createCompositeType: function () {
              return new _.org.kevoree.impl.CompositeTypeImpl();
            },
            createPortTypeRef: function () {
              return new _.org.kevoree.impl.PortTypeRefImpl();
            },
            createWire: function () {
              return new _.org.kevoree.impl.WireImpl();
            },
            createServicePortType: function () {
              return new _.org.kevoree.impl.ServicePortTypeImpl();
            },
            createOperation: function () {
              return new _.org.kevoree.impl.OperationImpl();
            },
            createParameter: function () {
              return new _.org.kevoree.impl.ParameterImpl();
            },
            createTypedElement: function () {
              return new _.org.kevoree.impl.TypedElementImpl();
            },
            createMessagePortType: function () {
              return new _.org.kevoree.impl.MessagePortTypeImpl();
            },
            createRepository: function () {
              return new _.org.kevoree.impl.RepositoryImpl();
            },
            createDeployUnit: function () {
              return new _.org.kevoree.impl.DeployUnitImpl();
            },
            createTypeLibrary: function () {
              return new _.org.kevoree.impl.TypeLibraryImpl();
            },
            createNamedElement: function () {
              return new _.org.kevoree.impl.NamedElementImpl();
            },
            createIntegrationPattern: function () {
              return new _.org.kevoree.impl.IntegrationPatternImpl();
            },
            createExtraFonctionalProperty: function () {
              return new _.org.kevoree.impl.ExtraFonctionalPropertyImpl();
            },
            createPortTypeMapping: function () {
              return new _.org.kevoree.impl.PortTypeMappingImpl();
            },
            createChannel: function () {
              return new _.org.kevoree.impl.ChannelImpl();
            },
            createMBinding: function () {
              return new _.org.kevoree.impl.MBindingImpl();
            },
            createNodeNetwork: function () {
              return new _.org.kevoree.impl.NodeNetworkImpl();
            },
            createNodeLink: function () {
              return new _.org.kevoree.impl.NodeLinkImpl();
            },
            createNetworkProperty: function () {
              return new _.org.kevoree.impl.NetworkPropertyImpl();
            },
            createChannelType: function () {
              return new _.org.kevoree.impl.ChannelTypeImpl();
            },
            createInstance: function () {
              return new _.org.kevoree.impl.InstanceImpl();
            },
            createGroup: function () {
              return new _.org.kevoree.impl.GroupImpl();
            },
            createGroupType: function () {
              return new _.org.kevoree.impl.GroupTypeImpl();
            },
            createNodeType: function () {
              return new _.org.kevoree.impl.NodeTypeImpl();
            },
            createAdaptationPrimitiveType: function () {
              return new _.org.kevoree.impl.AdaptationPrimitiveTypeImpl();
            },
            createAdaptationPrimitiveTypeRef: function () {
              return new _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl();
            },
            create: function (metaClassName) {
              if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ComponentInstance()) {
                return this.createComponentInstance();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ComponentInstance()) {
                return this.createComponentInstance();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ComponentType()) {
                return this.createComponentType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ComponentType()) {
                return this.createComponentType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode()) {
                return this.createContainerNode();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ContainerNode()) {
                return this.createContainerNode();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ContainerRoot()) {
                return this.createContainerRoot();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ContainerRoot()) {
                return this.createContainerRoot();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Port()) {
                return this.createPort();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Port()) {
                return this.createPort();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Namespace()) {
                return this.createNamespace();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Namespace()) {
                return this.createNamespace();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Dictionary()) {
                return this.createDictionary();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Dictionary()) {
                return this.createDictionary();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType()) {
                return this.createDictionaryType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_DictionaryType()) {
                return this.createDictionaryType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_DictionaryAttribute()) {
                return this.createDictionaryAttribute();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_DictionaryAttribute()) {
                return this.createDictionaryAttribute();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_DictionaryValue()) {
                return this.createDictionaryValue();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_DictionaryValue()) {
                return this.createDictionaryValue();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_CompositeType()) {
                return this.createCompositeType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_CompositeType()) {
                return this.createCompositeType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef()) {
                return this.createPortTypeRef();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_PortTypeRef()) {
                return this.createPortTypeRef();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Wire()) {
                return this.createWire();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Wire()) {
                return this.createWire();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ServicePortType()) {
                return this.createServicePortType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ServicePortType()) {
                return this.createServicePortType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Operation()) {
                return this.createOperation();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Operation()) {
                return this.createOperation();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Parameter()) {
                return this.createParameter();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Parameter()) {
                return this.createParameter();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_TypedElement()) {
                return this.createTypedElement();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_TypedElement()) {
                return this.createTypedElement();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_MessagePortType()) {
                return this.createMessagePortType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_MessagePortType()) {
                return this.createMessagePortType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Repository()) {
                return this.createRepository();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Repository()) {
                return this.createRepository();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit()) {
                return this.createDeployUnit();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_DeployUnit()) {
                return this.createDeployUnit();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_TypeLibrary()) {
                return this.createTypeLibrary();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_TypeLibrary()) {
                return this.createTypeLibrary();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_NamedElement()) {
                return this.createNamedElement();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_NamedElement()) {
                return this.createNamedElement();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_IntegrationPattern()) {
                return this.createIntegrationPattern();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_IntegrationPattern()) {
                return this.createIntegrationPattern();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ExtraFonctionalProperty()) {
                return this.createExtraFonctionalProperty();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ExtraFonctionalProperty()) {
                return this.createExtraFonctionalProperty();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_PortTypeMapping()) {
                return this.createPortTypeMapping();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_PortTypeMapping()) {
                return this.createPortTypeMapping();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Channel()) {
                return this.createChannel();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Channel()) {
                return this.createChannel();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_MBinding()) {
                return this.createMBinding();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_MBinding()) {
                return this.createMBinding();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_NodeNetwork()) {
                return this.createNodeNetwork();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_NodeNetwork()) {
                return this.createNodeNetwork();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_NodeLink()) {
                return this.createNodeLink();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_NodeLink()) {
                return this.createNodeLink();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_NetworkProperty()) {
                return this.createNetworkProperty();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_NetworkProperty()) {
                return this.createNetworkProperty();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_ChannelType()) {
                return this.createChannelType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_ChannelType()) {
                return this.createChannelType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Instance()) {
                return this.createInstance();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Instance()) {
                return this.createInstance();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_Group()) {
                return this.createGroup();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_Group()) {
                return this.createGroup();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_GroupType()) {
                return this.createGroupType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_GroupType()) {
                return this.createGroupType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_NodeType()) {
                return this.createNodeType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_NodeType()) {
                return this.createNodeType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveType()) {
                return this.createAdaptationPrimitiveType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_AdaptationPrimitiveType()) {
                return this.createAdaptationPrimitiveType();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveTypeRef()) {
                return this.createAdaptationPrimitiveTypeRef();
              }
               else if (metaClassName === _.org.kevoree.util.Constants.get_CN_AdaptationPrimitiveTypeRef()) {
                return this.createAdaptationPrimitiveTypeRef();
              }
               else {
                return null;
              }
            }
          }),
          ContainerRootImpl: Kotlin.createClass([classes.cv, classes.ct], /** @lends _.org.kevoree.impl.ContainerRootImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_nodes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllNodesCurrentlyProcessing = false;
              this.$_typeDefinitions = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllTypeDefinitionsCurrentlyProcessing = false;
              this.$_repositories = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRepositoriesCurrentlyProcessing = false;
              this.$_dataTypes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllDataTypesCurrentlyProcessing = false;
              this.$_libraries = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllLibrariesCurrentlyProcessing = false;
              this.$_hubs = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllHubsCurrentlyProcessing = false;
              this.$_mBindings = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllMBindingsCurrentlyProcessing = false;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllDeployUnitsCurrentlyProcessing = false;
              this.$_nodeNetworks = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllNodeNetworksCurrentlyProcessing = false;
              this.$_groups = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllGroupsCurrentlyProcessing = false;
              this.$_adaptationPrimitiveTypes = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllAdaptationPrimitiveTypesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9, tmp$10;
              (tmp$0 = this.get__nodes()) != null ? tmp$0.clear() : null;
              (tmp$1 = this.get__typeDefinitions()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__repositories()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__dataTypes()) != null ? tmp$3.clear() : null;
              (tmp$4 = this.get__libraries()) != null ? tmp$4.clear() : null;
              (tmp$5 = this.get__hubs()) != null ? tmp$5.clear() : null;
              (tmp$6 = this.get__mBindings()) != null ? tmp$6.clear() : null;
              (tmp$7 = this.get__deployUnits()) != null ? tmp$7.clear() : null;
              (tmp$8 = this.get__nodeNetworks()) != null ? tmp$8.clear() : null;
              (tmp$9 = this.get__groups()) != null ? tmp$9.clear() : null;
              (tmp$10 = this.get__adaptationPrimitiveTypes()) != null ? tmp$10.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__nodes: function () {
              return this.$_nodes;
            },
            get_nodes: function () {
              return _.kotlin.toList(this.get__nodes().values());
            },
            set_nodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (nodesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_nodes(nodesP, true, true);
            },
            internal_nodes: function (nodesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__nodes().values(), nodesP)) {
                this.get__nodes().clear();
                {
                  var tmp$0 = nodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__nodes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_nodes(), el), _.org.kevoree.util.Constants.get_Ref_nodes());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
                }
              }
            },
            doAddNodes: function (nodesP) {
              var _key_ = (nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__nodes().containsKey(_key_)) {
                this.get__nodes().put(_key_, nodesP);
                (nodesP != null ? nodesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP), _.org.kevoree.util.Constants.get_Ref_nodes());
              }
            },
            addNodes: function (nodesP) {
              this.internal_addNodes(nodesP, true, true);
            },
            addAllNodes: function (nodesP) {
              this.internal_addAllNodes(nodesP, true, true);
            },
            internal_addNodes: function (nodesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddNodes(nodesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
              }
            },
            internal_addAllNodes: function (nodesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = nodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddNodes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = nodesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddNodes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
              }
            },
            removeNodes: function (nodesP) {
              this.internal_removeNodes(nodesP, true, true);
            },
            get_removeAllNodesCurrentlyProcessing: function () {
              return this.$removeAllNodesCurrentlyProcessing;
            },
            set_removeAllNodesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllNodesCurrentlyProcessing = tmp$0;
            },
            removeAllNodes: function () {
              this.internal_removeAllNodes(true, true);
            },
            internal_removeNodes: function (nodesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey((nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__nodes().remove((nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey());
                ((nodesP != null ? nodesP : Kotlin.throwNPE()) != null ? nodesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllNodesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), nodesP));
                }
              }
            },
            internal_removeAllNodes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllNodesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_nodes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__nodes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodes(), temp_els));
                this.set_removeAllNodesCurrentlyProcessing(false);
              }
            },
            get__typeDefinitions: function () {
              return this.$_typeDefinitions;
            },
            get_typeDefinitions: function () {
              return _.kotlin.toList(this.get__typeDefinitions().values());
            },
            set_typeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (typeDefinitionsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_typeDefinitions(typeDefinitionsP, true, true);
            },
            internal_typeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__typeDefinitions().values(), typeDefinitionsP)) {
                this.get__typeDefinitions().clear();
                {
                  var tmp$0 = typeDefinitionsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__typeDefinitions().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), el), _.org.kevoree.util.Constants.get_Ref_typeDefinitions());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
                }
              }
            },
            doAddTypeDefinitions: function (typeDefinitionsP) {
              var _key_ = (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__typeDefinitions().containsKey(_key_)) {
                this.get__typeDefinitions().put(_key_, typeDefinitionsP);
                (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP), _.org.kevoree.util.Constants.get_Ref_typeDefinitions());
              }
            },
            addTypeDefinitions: function (typeDefinitionsP) {
              this.internal_addTypeDefinitions(typeDefinitionsP, true, true);
            },
            addAllTypeDefinitions: function (typeDefinitionsP) {
              this.internal_addAllTypeDefinitions(typeDefinitionsP, true, true);
            },
            internal_addTypeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddTypeDefinitions(typeDefinitionsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
              }
            },
            internal_addAllTypeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = typeDefinitionsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddTypeDefinitions(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = typeDefinitionsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddTypeDefinitions(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
              }
            },
            removeTypeDefinitions: function (typeDefinitionsP) {
              this.internal_removeTypeDefinitions(typeDefinitionsP, true, true);
            },
            get_removeAllTypeDefinitionsCurrentlyProcessing: function () {
              return this.$removeAllTypeDefinitionsCurrentlyProcessing;
            },
            set_removeAllTypeDefinitionsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllTypeDefinitionsCurrentlyProcessing = tmp$0;
            },
            removeAllTypeDefinitions: function () {
              this.internal_removeAllTypeDefinitions(true, true);
            },
            internal_removeTypeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__typeDefinitions().remove((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey());
                ((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()) != null ? typeDefinitionsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllTypeDefinitionsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), typeDefinitionsP));
                }
              }
            },
            internal_removeAllTypeDefinitions: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllTypeDefinitionsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_typeDefinitions()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__typeDefinitions().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_typeDefinitions(), temp_els));
                this.set_removeAllTypeDefinitionsCurrentlyProcessing(false);
              }
            },
            get__repositories: function () {
              return this.$_repositories;
            },
            get_repositories: function () {
              return _.kotlin.toList(this.get__repositories().values());
            },
            set_repositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (repositoriesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_repositories(repositoriesP, true, true);
            },
            internal_repositories: function (repositoriesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__repositories().values(), repositoriesP)) {
                this.get__repositories().clear();
                {
                  var tmp$0 = repositoriesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__repositories().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_repositories(), el), _.org.kevoree.util.Constants.get_Ref_repositories());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
                }
              }
            },
            doAddRepositories: function (repositoriesP) {
              var _key_ = (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__repositories().containsKey(_key_)) {
                this.get__repositories().put(_key_, repositoriesP);
                (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP), _.org.kevoree.util.Constants.get_Ref_repositories());
              }
            },
            addRepositories: function (repositoriesP) {
              this.internal_addRepositories(repositoriesP, true, true);
            },
            addAllRepositories: function (repositoriesP) {
              this.internal_addAllRepositories(repositoriesP, true, true);
            },
            internal_addRepositories: function (repositoriesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddRepositories(repositoriesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
              }
            },
            internal_addAllRepositories: function (repositoriesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = repositoriesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddRepositories(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = repositoriesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddRepositories(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
              }
            },
            removeRepositories: function (repositoriesP) {
              this.internal_removeRepositories(repositoriesP, true, true);
            },
            get_removeAllRepositoriesCurrentlyProcessing: function () {
              return this.$removeAllRepositoriesCurrentlyProcessing;
            },
            set_removeAllRepositoriesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRepositoriesCurrentlyProcessing = tmp$0;
            },
            removeAllRepositories: function () {
              this.internal_removeAllRepositories(true, true);
            },
            internal_removeRepositories: function (repositoriesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__repositories().remove((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey());
                ((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()) != null ? repositoriesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRepositoriesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), repositoriesP));
                }
              }
            },
            internal_removeAllRepositories: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllRepositoriesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_repositories()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__repositories().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_repositories(), temp_els));
                this.set_removeAllRepositoriesCurrentlyProcessing(false);
              }
            },
            get__dataTypes: function () {
              return this.$_dataTypes;
            },
            get_dataTypes: function () {
              return _.kotlin.toList(this.get__dataTypes().values());
            },
            set_dataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (dataTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_dataTypes(dataTypesP, true, true);
            },
            internal_dataTypes: function (dataTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__dataTypes().values(), dataTypesP)) {
                this.get__dataTypes().clear();
                {
                  var tmp$0 = dataTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__dataTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), el), _.org.kevoree.util.Constants.get_Ref_dataTypes());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
                }
              }
            },
            doAddDataTypes: function (dataTypesP) {
              var _key_ = (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__dataTypes().containsKey(_key_)) {
                this.get__dataTypes().put(_key_, dataTypesP);
                (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP), _.org.kevoree.util.Constants.get_Ref_dataTypes());
              }
            },
            addDataTypes: function (dataTypesP) {
              this.internal_addDataTypes(dataTypesP, true, true);
            },
            addAllDataTypes: function (dataTypesP) {
              this.internal_addAllDataTypes(dataTypesP, true, true);
            },
            internal_addDataTypes: function (dataTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDataTypes(dataTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
              }
            },
            internal_addAllDataTypes: function (dataTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = dataTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDataTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = dataTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDataTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
              }
            },
            removeDataTypes: function (dataTypesP) {
              this.internal_removeDataTypes(dataTypesP, true, true);
            },
            get_removeAllDataTypesCurrentlyProcessing: function () {
              return this.$removeAllDataTypesCurrentlyProcessing;
            },
            set_removeAllDataTypesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllDataTypesCurrentlyProcessing = tmp$0;
            },
            removeAllDataTypes: function () {
              this.internal_removeAllDataTypes(true, true);
            },
            internal_removeDataTypes: function (dataTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__dataTypes().remove((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey());
                ((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()) != null ? dataTypesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllDataTypesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), dataTypesP));
                }
              }
            },
            internal_removeAllDataTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllDataTypesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_dataTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__dataTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dataTypes(), temp_els));
                this.set_removeAllDataTypesCurrentlyProcessing(false);
              }
            },
            get__libraries: function () {
              return this.$_libraries;
            },
            get_libraries: function () {
              return _.kotlin.toList(this.get__libraries().values());
            },
            set_libraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (librariesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_libraries(librariesP, true, true);
            },
            internal_libraries: function (librariesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__libraries().values(), librariesP)) {
                this.get__libraries().clear();
                {
                  var tmp$0 = librariesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__libraries().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_libraries(), el), _.org.kevoree.util.Constants.get_Ref_libraries());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
                }
              }
            },
            doAddLibraries: function (librariesP) {
              var _key_ = (librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__libraries().containsKey(_key_)) {
                this.get__libraries().put(_key_, librariesP);
                (librariesP != null ? librariesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP), _.org.kevoree.util.Constants.get_Ref_libraries());
              }
            },
            addLibraries: function (librariesP) {
              this.internal_addLibraries(librariesP, true, true);
            },
            addAllLibraries: function (librariesP) {
              this.internal_addAllLibraries(librariesP, true, true);
            },
            internal_addLibraries: function (librariesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddLibraries(librariesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
              }
            },
            internal_addAllLibraries: function (librariesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = librariesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddLibraries(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = librariesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddLibraries(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
              }
            },
            removeLibraries: function (librariesP) {
              this.internal_removeLibraries(librariesP, true, true);
            },
            get_removeAllLibrariesCurrentlyProcessing: function () {
              return this.$removeAllLibrariesCurrentlyProcessing;
            },
            set_removeAllLibrariesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllLibrariesCurrentlyProcessing = tmp$0;
            },
            removeAllLibraries: function () {
              this.internal_removeAllLibraries(true, true);
            },
            internal_removeLibraries: function (librariesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey((librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__libraries().remove((librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey());
                ((librariesP != null ? librariesP : Kotlin.throwNPE()) != null ? librariesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllLibrariesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), librariesP));
                }
              }
            },
            internal_removeAllLibraries: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllLibrariesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_libraries()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__libraries().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_libraries(), temp_els));
                this.set_removeAllLibrariesCurrentlyProcessing(false);
              }
            },
            get__hubs: function () {
              return this.$_hubs;
            },
            get_hubs: function () {
              return _.kotlin.toList(this.get__hubs().values());
            },
            set_hubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (hubsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_hubs(hubsP, true, true);
            },
            internal_hubs: function (hubsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__hubs().values(), hubsP)) {
                this.get__hubs().clear();
                {
                  var tmp$0 = hubsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__hubs().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_hubs(), el), _.org.kevoree.util.Constants.get_Ref_hubs());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
                }
              }
            },
            doAddHubs: function (hubsP) {
              var _key_ = (hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__hubs().containsKey(_key_)) {
                this.get__hubs().put(_key_, hubsP);
                (hubsP != null ? hubsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP), _.org.kevoree.util.Constants.get_Ref_hubs());
              }
            },
            addHubs: function (hubsP) {
              this.internal_addHubs(hubsP, true, true);
            },
            addAllHubs: function (hubsP) {
              this.internal_addAllHubs(hubsP, true, true);
            },
            internal_addHubs: function (hubsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddHubs(hubsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
              }
            },
            internal_addAllHubs: function (hubsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = hubsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddHubs(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = hubsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddHubs(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
              }
            },
            removeHubs: function (hubsP) {
              this.internal_removeHubs(hubsP, true, true);
            },
            get_removeAllHubsCurrentlyProcessing: function () {
              return this.$removeAllHubsCurrentlyProcessing;
            },
            set_removeAllHubsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllHubsCurrentlyProcessing = tmp$0;
            },
            removeAllHubs: function () {
              this.internal_removeAllHubs(true, true);
            },
            internal_removeHubs: function (hubsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey((hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__hubs().remove((hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey());
                ((hubsP != null ? hubsP : Kotlin.throwNPE()) != null ? hubsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllHubsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), hubsP));
                }
              }
            },
            internal_removeAllHubs: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllHubsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_hubs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__hubs().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_hubs(), temp_els));
                this.set_removeAllHubsCurrentlyProcessing(false);
              }
            },
            get__mBindings: function () {
              return this.$_mBindings;
            },
            get_mBindings: function () {
              return _.kotlin.toList(this.get__mBindings().values());
            },
            set_mBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (mBindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_mBindings(mBindingsP, true, true);
            },
            internal_mBindings: function (mBindingsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__mBindings().values(), mBindingsP)) {
                this.get__mBindings().clear();
                {
                  var tmp$0 = mBindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__mBindings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_mBindings(), el), _.org.kevoree.util.Constants.get_Ref_mBindings());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
                }
              }
            },
            doAddMBindings: function (mBindingsP) {
              var _key_ = (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__mBindings().containsKey(_key_)) {
                this.get__mBindings().put(_key_, mBindingsP);
                (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP), _.org.kevoree.util.Constants.get_Ref_mBindings());
              }
            },
            addMBindings: function (mBindingsP) {
              this.internal_addMBindings(mBindingsP, true, true);
            },
            addAllMBindings: function (mBindingsP) {
              this.internal_addAllMBindings(mBindingsP, true, true);
            },
            internal_addMBindings: function (mBindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddMBindings(mBindingsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
              }
            },
            internal_addAllMBindings: function (mBindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = mBindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddMBindings(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = mBindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddMBindings(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
              }
            },
            removeMBindings: function (mBindingsP) {
              this.internal_removeMBindings(mBindingsP, true, true);
            },
            get_removeAllMBindingsCurrentlyProcessing: function () {
              return this.$removeAllMBindingsCurrentlyProcessing;
            },
            set_removeAllMBindingsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllMBindingsCurrentlyProcessing = tmp$0;
            },
            removeAllMBindings: function () {
              this.internal_removeAllMBindings(true, true);
            },
            internal_removeMBindings: function (mBindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__mBindings().size() !== 0 && this.get__mBindings().containsKey((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__mBindings().remove((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey());
                ((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()) != null ? mBindingsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllMBindingsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), mBindingsP));
                }
              }
            },
            internal_removeAllMBindings: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllMBindingsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_mBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__mBindings().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mBindings(), temp_els));
                this.set_removeAllMBindingsCurrentlyProcessing(false);
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), el), _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
                (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP), _.org.kevoree.util.Constants.get_Ref_deployUnits());
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            get_removeAllDeployUnitsCurrentlyProcessing: function () {
              return this.$removeAllDeployUnitsCurrentlyProcessing;
            },
            set_removeAllDeployUnitsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllDeployUnitsCurrentlyProcessing = tmp$0;
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                ((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()) != null ? deployUnitsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllDeployUnitsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllDeployUnitsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
                this.set_removeAllDeployUnitsCurrentlyProcessing(false);
              }
            },
            get__nodeNetworks: function () {
              return this.$_nodeNetworks;
            },
            get_nodeNetworks: function () {
              return _.kotlin.toList(this.get__nodeNetworks().values());
            },
            set_nodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (nodeNetworksP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_nodeNetworks(nodeNetworksP, true, true);
            },
            internal_nodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__nodeNetworks().values(), nodeNetworksP)) {
                this.get__nodeNetworks().clear();
                {
                  var tmp$0 = nodeNetworksP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__nodeNetworks().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), el), _.org.kevoree.util.Constants.get_Ref_nodeNetworks());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
                }
              }
            },
            doAddNodeNetworks: function (nodeNetworksP) {
              var _key_ = (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__nodeNetworks().containsKey(_key_)) {
                this.get__nodeNetworks().put(_key_, nodeNetworksP);
                (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP), _.org.kevoree.util.Constants.get_Ref_nodeNetworks());
              }
            },
            addNodeNetworks: function (nodeNetworksP) {
              this.internal_addNodeNetworks(nodeNetworksP, true, true);
            },
            addAllNodeNetworks: function (nodeNetworksP) {
              this.internal_addAllNodeNetworks(nodeNetworksP, true, true);
            },
            internal_addNodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddNodeNetworks(nodeNetworksP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
              }
            },
            internal_addAllNodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = nodeNetworksP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddNodeNetworks(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = nodeNetworksP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddNodeNetworks(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
              }
            },
            removeNodeNetworks: function (nodeNetworksP) {
              this.internal_removeNodeNetworks(nodeNetworksP, true, true);
            },
            get_removeAllNodeNetworksCurrentlyProcessing: function () {
              return this.$removeAllNodeNetworksCurrentlyProcessing;
            },
            set_removeAllNodeNetworksCurrentlyProcessing: function (tmp$0) {
              this.$removeAllNodeNetworksCurrentlyProcessing = tmp$0;
            },
            removeAllNodeNetworks: function () {
              this.internal_removeAllNodeNetworks(true, true);
            },
            internal_removeNodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().containsKey((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__nodeNetworks().remove((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey());
                ((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()) != null ? nodeNetworksP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllNodeNetworksCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), nodeNetworksP));
                }
              }
            },
            internal_removeAllNodeNetworks: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllNodeNetworksCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_nodeNetworks()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__nodeNetworks().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_nodeNetworks(), temp_els));
                this.set_removeAllNodeNetworksCurrentlyProcessing(false);
              }
            },
            get__groups: function () {
              return this.$_groups;
            },
            get_groups: function () {
              return _.kotlin.toList(this.get__groups().values());
            },
            set_groups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (groupsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_groups(groupsP, true, true);
            },
            internal_groups: function (groupsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__groups().values(), groupsP)) {
                this.get__groups().clear();
                {
                  var tmp$0 = groupsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__groups().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_groups(), el), _.org.kevoree.util.Constants.get_Ref_groups());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
                }
              }
            },
            doAddGroups: function (groupsP) {
              var _key_ = (groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__groups().containsKey(_key_)) {
                this.get__groups().put(_key_, groupsP);
                (groupsP != null ? groupsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP), _.org.kevoree.util.Constants.get_Ref_groups());
              }
            },
            addGroups: function (groupsP) {
              this.internal_addGroups(groupsP, true, true);
            },
            addAllGroups: function (groupsP) {
              this.internal_addAllGroups(groupsP, true, true);
            },
            internal_addGroups: function (groupsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddGroups(groupsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
              }
            },
            internal_addAllGroups: function (groupsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = groupsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddGroups(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = groupsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddGroups(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
              }
            },
            removeGroups: function (groupsP) {
              this.internal_removeGroups(groupsP, true, true);
            },
            get_removeAllGroupsCurrentlyProcessing: function () {
              return this.$removeAllGroupsCurrentlyProcessing;
            },
            set_removeAllGroupsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllGroupsCurrentlyProcessing = tmp$0;
            },
            removeAllGroups: function () {
              this.internal_removeAllGroups(true, true);
            },
            internal_removeGroups: function (groupsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__groups().size() !== 0 && this.get__groups().containsKey((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__groups().remove((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey());
                ((groupsP != null ? groupsP : Kotlin.throwNPE()) != null ? groupsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllGroupsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), groupsP));
                }
              }
            },
            internal_removeAllGroups: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllGroupsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_groups()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__groups().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_groups(), temp_els));
                this.set_removeAllGroupsCurrentlyProcessing(false);
              }
            },
            get__adaptationPrimitiveTypes: function () {
              return this.$_adaptationPrimitiveTypes;
            },
            get_adaptationPrimitiveTypes: function () {
              return _.kotlin.toList(this.get__adaptationPrimitiveTypes().values());
            },
            set_adaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (adaptationPrimitiveTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_adaptationPrimitiveTypes(adaptationPrimitiveTypesP, true, true);
            },
            internal_adaptationPrimitiveTypes: function (adaptationPrimitiveTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__adaptationPrimitiveTypes().values(), adaptationPrimitiveTypesP)) {
                this.get__adaptationPrimitiveTypes().clear();
                {
                  var tmp$0 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__adaptationPrimitiveTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), el), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
                }
              }
            },
            doAddAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              var _key_ = (adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__adaptationPrimitiveTypes().containsKey(_key_)) {
                this.get__adaptationPrimitiveTypes().put(_key_, adaptationPrimitiveTypesP);
                (adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes());
              }
            },
            addAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              this.internal_addAdaptationPrimitiveTypes(adaptationPrimitiveTypesP, true, true);
            },
            addAllAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              this.internal_addAllAdaptationPrimitiveTypes(adaptationPrimitiveTypesP, true, true);
            },
            internal_addAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddAdaptationPrimitiveTypes(adaptationPrimitiveTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
              }
            },
            internal_addAllAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddAdaptationPrimitiveTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddAdaptationPrimitiveTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
              }
            },
            removeAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              this.internal_removeAdaptationPrimitiveTypes(adaptationPrimitiveTypesP, true, true);
            },
            get_removeAllAdaptationPrimitiveTypesCurrentlyProcessing: function () {
              return this.$removeAllAdaptationPrimitiveTypesCurrentlyProcessing;
            },
            set_removeAllAdaptationPrimitiveTypesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllAdaptationPrimitiveTypesCurrentlyProcessing = tmp$0;
            },
            removeAllAdaptationPrimitiveTypes: function () {
              this.internal_removeAllAdaptationPrimitiveTypes(true, true);
            },
            internal_removeAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey((adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__adaptationPrimitiveTypes().remove((adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).internalGetKey());
                ((adaptationPrimitiveTypesP != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()) != null ? adaptationPrimitiveTypesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllAdaptationPrimitiveTypesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), adaptationPrimitiveTypesP));
                }
              }
            },
            internal_removeAllAdaptationPrimitiveTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllAdaptationPrimitiveTypesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_adaptationPrimitiveTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__adaptationPrimitiveTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), temp_els));
                this.set_removeAllAdaptationPrimitiveTypesCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_nodes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNodes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey(value)) {
                    var obj = this.get__nodes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__nodes().remove(value);
                    this.get__nodes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinitions()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addTypeDefinitions(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllTypeDefinitions(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeTypeDefinitions(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllTypeDefinitions();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey(value)) {
                    var obj_0 = this.get__typeDefinitions().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__typeDefinitions().remove(value);
                    this.get__typeDefinitions().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_repositories()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addRepositories(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllRepositories(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeRepositories(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRepositories();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey(value)) {
                    var obj_1 = this.get__repositories().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__repositories().remove(value);
                    this.get__repositories().put(objNewKey_1, obj_1);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dataTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDataTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDataTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDataTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDataTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey(value)) {
                    var obj_2 = this.get__dataTypes().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__dataTypes().remove(value);
                    this.get__dataTypes().put(objNewKey_2, obj_2);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_libraries()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addLibraries(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllLibraries(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeLibraries(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllLibraries();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey(value)) {
                    var obj_3 = this.get__libraries().get(value);
                    var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_3 == null) {
                      throw new Error('Key newed to null ' + obj_3);
                    }
                    this.get__libraries().remove(value);
                    this.get__libraries().put(objNewKey_3, obj_3);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hubs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addHubs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllHubs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeHubs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllHubs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey(value)) {
                    var obj_4 = this.get__hubs().get(value);
                    var objNewKey_4 = (obj_4 != null ? obj_4 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_4 == null) {
                      throw new Error('Key newed to null ' + obj_4);
                    }
                    this.get__hubs().remove(value);
                    this.get__hubs().put(objNewKey_4, obj_4);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_mBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addMBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllMBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeMBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllMBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__mBindings().size() !== 0 && this.get__mBindings().containsKey(value)) {
                    var obj_5 = this.get__mBindings().get(value);
                    var objNewKey_5 = (obj_5 != null ? obj_5 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_5 == null) {
                      throw new Error('Key newed to null ' + obj_5);
                    }
                    this.get__mBindings().remove(value);
                    this.get__mBindings().put(objNewKey_5, obj_5);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj_6 = this.get__deployUnits().get(value);
                    var objNewKey_6 = (obj_6 != null ? obj_6 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_6 == null) {
                      throw new Error('Key newed to null ' + obj_6);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey_6, obj_6);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_nodeNetworks()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addNodeNetworks(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllNodeNetworks(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeNodeNetworks(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNodeNetworks();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().containsKey(value)) {
                    var obj_7 = this.get__nodeNetworks().get(value);
                    var objNewKey_7 = (obj_7 != null ? obj_7 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_7 == null) {
                      throw new Error('Key newed to null ' + obj_7);
                    }
                    this.get__nodeNetworks().remove(value);
                    this.get__nodeNetworks().put(objNewKey_7, obj_7);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_groups()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGroups();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__groups().size() !== 0 && this.get__groups().containsKey(value)) {
                    var obj_8 = this.get__groups().get(value);
                    var objNewKey_8 = (obj_8 != null ? obj_8 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_8 == null) {
                      throw new Error('Key newed to null ' + obj_8);
                    }
                    this.get__groups().remove(value);
                    this.get__groups().put(objNewKey_8, obj_8);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addAdaptationPrimitiveTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllAdaptationPrimitiveTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeAdaptationPrimitiveTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllAdaptationPrimitiveTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey(value)) {
                    var obj_9 = this.get__adaptationPrimitiveTypes().get(value);
                    var objNewKey_9 = (obj_9 != null ? obj_9 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_9 == null) {
                      throw new Error('Key newed to null ' + obj_9);
                    }
                    this.get__adaptationPrimitiveTypes().remove(value);
                    this.get__adaptationPrimitiveTypes().put(objNewKey_9, obj_9);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findNodesByID: function (key) {
              return this.get__nodes().get(key);
            },
            findTypeDefinitionsByID: function (key) {
              return this.get__typeDefinitions().get(key);
            },
            findRepositoriesByID: function (key) {
              return this.get__repositories().get(key);
            },
            findDataTypesByID: function (key) {
              return this.get__dataTypes().get(key);
            },
            findLibrariesByID: function (key) {
              return this.get__libraries().get(key);
            },
            findHubsByID: function (key) {
              return this.get__hubs().get(key);
            },
            findMBindingsByID: function (key) {
              return this.get__mBindings().get(key);
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findNodeNetworksByID: function (key) {
              return this.get__nodeNetworks().get(key);
            },
            findGroupsByID: function (key) {
              return this.get__groups().get(key);
            },
            findAdaptationPrimitiveTypesByID: function (key) {
              return this.get__adaptationPrimitiveTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_nodes()) {
                return this.findNodesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinitions()) {
                return this.findTypeDefinitionsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_repositories()) {
                return this.findRepositoriesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dataTypes()) {
                return this.findDataTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_libraries()) {
                return this.findLibrariesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hubs()) {
                return this.findHubsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_mBindings()) {
                return this.findMBindingsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_nodeNetworks()) {
                return this.findNodeNetworksByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_groups()) {
                return this.findGroupsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes()) {
                return this.findAdaptationPrimitiveTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_nodes(), _.org.kevoree.util.Constants.get_org_kevoree_ContainerNode());
                {
                  var tmp$0 = this.get__nodes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__nodes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_nodes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_nodes());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinitions(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$1 = this.get__typeDefinitions().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__typeDefinitions().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_typeDefinitions());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_typeDefinitions());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_repositories(), _.org.kevoree.util.Constants.get_org_kevoree_Repository());
                {
                  var tmp$2 = this.get__repositories().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$2.next();
                    this.internal_visit(visitor, this.get__repositories().get(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_repositories());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_repositories());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dataTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypedElement());
                {
                  var tmp$3 = this.get__dataTypes().keySet().iterator();
                  while (tmp$3.hasNext()) {
                    var KMFLoopEntryKey_2 = tmp$3.next();
                    this.internal_visit(visitor, this.get__dataTypes().get(KMFLoopEntryKey_2), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dataTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dataTypes());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_libraries(), _.org.kevoree.util.Constants.get_org_kevoree_TypeLibrary());
                {
                  var tmp$4 = this.get__libraries().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_3 = tmp$4.next();
                    this.internal_visit(visitor, this.get__libraries().get(KMFLoopEntryKey_3), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_libraries());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_libraries());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_hubs(), _.org.kevoree.util.Constants.get_org_kevoree_Channel());
                {
                  var tmp$5 = this.get__hubs().keySet().iterator();
                  while (tmp$5.hasNext()) {
                    var KMFLoopEntryKey_4 = tmp$5.next();
                    this.internal_visit(visitor, this.get__hubs().get(KMFLoopEntryKey_4), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_hubs());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_hubs());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_mBindings(), _.org.kevoree.util.Constants.get_org_kevoree_MBinding());
                {
                  var tmp$6 = this.get__mBindings().keySet().iterator();
                  while (tmp$6.hasNext()) {
                    var KMFLoopEntryKey_5 = tmp$6.next();
                    this.internal_visit(visitor, this.get__mBindings().get(KMFLoopEntryKey_5), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_mBindings());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_mBindings());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$7 = this.get__deployUnits().keySet().iterator();
                  while (tmp$7.hasNext()) {
                    var KMFLoopEntryKey_6 = tmp$7.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey_6), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_nodeNetworks(), _.org.kevoree.util.Constants.get_org_kevoree_NodeNetwork());
                {
                  var tmp$8 = this.get__nodeNetworks().keySet().iterator();
                  while (tmp$8.hasNext()) {
                    var KMFLoopEntryKey_7 = tmp$8.next();
                    this.internal_visit(visitor, this.get__nodeNetworks().get(KMFLoopEntryKey_7), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_nodeNetworks());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_nodeNetworks());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_groups(), _.org.kevoree.util.Constants.get_org_kevoree_Group());
                {
                  var tmp$9 = this.get__groups().keySet().iterator();
                  while (tmp$9.hasNext()) {
                    var KMFLoopEntryKey_8 = tmp$9.next();
                    this.internal_visit(visitor, this.get__groups().get(KMFLoopEntryKey_8), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_groups());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_groups());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes(), _.org.kevoree.util.Constants.get_org_kevoree_AdaptationPrimitiveType());
                {
                  var tmp$10 = this.get__adaptationPrimitiveTypes().keySet().iterator();
                  while (tmp$10.hasNext()) {
                    var KMFLoopEntryKey_9 = tmp$10.next();
                    this.internal_visit(visitor, this.get__adaptationPrimitiveTypes().get(KMFLoopEntryKey_9), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ContainerRoot();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getNodes: function () {
              return this.get_nodes();
            },
            setNodes: function (internal_p) {
              this.set_nodes(internal_p);
            },
            getTypeDefinitions: function () {
              return this.get_typeDefinitions();
            },
            setTypeDefinitions: function (internal_p) {
              this.set_typeDefinitions(internal_p);
            },
            getRepositories: function () {
              return this.get_repositories();
            },
            setRepositories: function (internal_p) {
              this.set_repositories(internal_p);
            },
            getDataTypes: function () {
              return this.get_dataTypes();
            },
            setDataTypes: function (internal_p) {
              this.set_dataTypes(internal_p);
            },
            getLibraries: function () {
              return this.get_libraries();
            },
            setLibraries: function (internal_p) {
              this.set_libraries(internal_p);
            },
            getHubs: function () {
              return this.get_hubs();
            },
            setHubs: function (internal_p) {
              this.set_hubs(internal_p);
            },
            getMBindings: function () {
              return this.get_mBindings();
            },
            setMBindings: function (internal_p) {
              this.set_mBindings(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getNodeNetworks: function () {
              return this.get_nodeNetworks();
            },
            setNodeNetworks: function (internal_p) {
              this.set_nodeNetworks(internal_p);
            },
            getGroups: function () {
              return this.get_groups();
            },
            setGroups: function (internal_p) {
              this.set_groups(internal_p);
            },
            getAdaptationPrimitiveTypes: function () {
              return this.get_adaptationPrimitiveTypes();
            },
            setAdaptationPrimitiveTypes: function (internal_p) {
              this.set_adaptationPrimitiveTypes(internal_p);
            }
          }),
          PortImpl: Kotlin.createClass([classes.cv, classes.c1j], /** @lends _.org.kevoree.impl.PortImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_bindings = new Kotlin.PrimitiveHashMap(0);
              this.$portTypeRef = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__bindings()) != null ? tmp$0.clear() : null;
              this.set_portTypeRef(null);
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__bindings: function () {
              return this.$_bindings;
            },
            get_bindings: function () {
              return _.kotlin.toList(this.get__bindings().values());
            },
            set_bindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (bindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_bindings(bindingsP, true, true);
            },
            internal_bindings: function (bindingsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__bindings().values(), bindingsP)) {
                this.internal_removeAllBindings(true, false);
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__bindings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_port(), this, false, fireEvents);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
                }
              }
            },
            doAddBindings: function (bindingsP) {
              var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__bindings().containsKey(_key_)) {
                this.get__bindings().put(_key_, bindingsP);
              }
            },
            addBindings: function (bindingsP) {
              this.internal_addBindings(bindingsP, true, true);
            },
            addAllBindings: function (bindingsP) {
              this.internal_addAllBindings(bindingsP, true, true);
            },
            internal_addBindings: function (bindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddBindings(bindingsP);
              if (setOpposite) {
                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_port(), this, false, fireEvents);
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            internal_addAllBindings: function (bindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddBindings(el);
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_port(), this, false, fireEvents);
                  }
                }
              }
               else {
                {
                  var tmp$1 = bindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddBindings(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
              }
            },
            removeBindings: function (bindingsP) {
              this.internal_removeBindings(bindingsP, true, true);
            },
            removeAllBindings: function () {
              this.internal_removeAllBindings(true, true);
            },
            internal_removeBindings: function (bindingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__bindings().remove((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), bindingsP));
                }
                if (setOpposite) {
                  (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_port(), null, false, fireEvents);
                }
              }
            },
            internal_removeAllBindings: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_bindings()) != null ? tmp$0 : Kotlin.throwNPE();
              if (setOpposite) {
                {
                  var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                  while (tmp$1.hasNext()) {
                    var el = tmp$1.next();
                    (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.util.Constants.get_Ref_port(), null, false, fireEvents);
                  }
                }
              }
              this.get__bindings().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_bindings(), temp_els));
              }
            },
            get_portTypeRef: function () {
              return this.$portTypeRef;
            },
            set_portTypeRef: function (portTypeRefP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_portTypeRef(portTypeRefP, true, true);
            },
            internal_portTypeRef: function (portTypeRefP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$portTypeRef, portTypeRefP)) {
                this.$portTypeRef = portTypeRefP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypeRef(), portTypeRefP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.internal_removeAllBindings(setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(value)) {
                    var obj = this.get__bindings().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__bindings().remove(value);
                    this.get__bindings().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypeRef()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_portTypeRef(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_portTypeRef(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_portTypeRef(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findBindingsByID: function (key) {
              return this.get__bindings().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                return this.findBindingsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypeRef()) {
                var objFound = this.get_portTypeRef();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_bindings(), _.org.kevoree.util.Constants.get_org_kevoree_MBinding());
                {
                  var tmp$0 = this.get__bindings().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__bindings().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_bindings());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_bindings());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_portTypeRef(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                this.internal_visit(visitor, this.get_portTypeRef(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_portTypeRef());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_portTypeRef());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Port();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getBindings: function () {
              return this.get_bindings();
            },
            setBindings: function (internal_p) {
              this.set_bindings(internal_p);
            },
            getPortTypeRef: function () {
              return this.get_portTypeRef();
            },
            setPortTypeRef: function (internal_p) {
              this.set_portTypeRef(internal_p);
            }
          }),
          RepositoryImpl: Kotlin.createClass([classes.cv, classes.co], /** @lends _.org.kevoree.impl.RepositoryImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$url = null;
              this.$_units = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__units()) != null ? tmp$0.clear() : null;
            },
            get_url: function () {
              return this.$url;
            },
            set_url: function (iP) {
              this.internal_url(iP, true);
            },
            internal_url: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_url())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$url = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_url(), this.get_url()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_url(), this.path()));
                }
              }
            },
            get__units: function () {
              return this.$_units;
            },
            get_units: function () {
              return _.kotlin.toList(this.get__units().values());
            },
            set_units: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (unitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_units(unitsP, true, true);
            },
            internal_units: function (unitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__units().values(), unitsP)) {
                this.get__units().clear();
                {
                  var tmp$0 = unitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__units().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
                }
              }
            },
            doAddUnits: function (unitsP) {
              var _key_ = (unitsP != null ? unitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__units().containsKey(_key_)) {
                this.get__units().put(_key_, unitsP);
              }
            },
            addUnits: function (unitsP) {
              this.internal_addUnits(unitsP, true, true);
            },
            addAllUnits: function (unitsP) {
              this.internal_addAllUnits(unitsP, true, true);
            },
            internal_addUnits: function (unitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddUnits(unitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
              }
            },
            internal_addAllUnits: function (unitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = unitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = unitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
              }
            },
            removeUnits: function (unitsP) {
              this.internal_removeUnits(unitsP, true, true);
            },
            removeAllUnits: function () {
              this.internal_removeAllUnits(true, true);
            },
            internal_removeUnits: function (unitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__units().size() !== 0 && this.get__units().containsKey((unitsP != null ? unitsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__units().remove((unitsP != null ? unitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), unitsP));
                }
              }
            },
            internal_removeAllUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_units()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__units().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_units(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_url()) {
                this.internal_url(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_units()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__units().size() !== 0 && this.get__units().containsKey(value)) {
                    var obj = this.get__units().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__units().remove(value);
                    this.get__units().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_url();
            },
            findUnitsByID: function (key) {
              return this.get__units().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_units()) {
                return this.findUnitsByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_units(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$0 = this.get__units().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__units().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_units());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_units());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_url(), _.org.kevoree.util.Constants.get_Att_url(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Repository();
            },
            getUrl: function () {
              return this.get_url();
            },
            setUrl: function (internal_p) {
              this.set_url(internal_p);
            },
            getUnits: function () {
              return this.get_units();
            },
            setUnits: function (internal_p) {
              this.set_units(internal_p);
            }
          }),
          DictionaryImpl: Kotlin.createClass([classes.cv, classes.c1l], /** @lends _.org.kevoree.impl.DictionaryImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_values = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllValuesCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__values()) != null ? tmp$0.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__values: function () {
              return this.$_values;
            },
            get_values: function () {
              return _.kotlin.toList(this.get__values().values());
            },
            set_values: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (valuesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_values(valuesP, true, true);
            },
            internal_values: function (valuesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__values().values(), valuesP)) {
                this.get__values().clear();
                {
                  var tmp$0 = valuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__values().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_values(), el), _.org.kevoree.util.Constants.get_Ref_values());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
                }
              }
            },
            doAddValues: function (valuesP) {
              var _key_ = (valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__values().containsKey(_key_)) {
                this.get__values().put(_key_, valuesP);
                (valuesP != null ? valuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP), _.org.kevoree.util.Constants.get_Ref_values());
              }
            },
            addValues: function (valuesP) {
              this.internal_addValues(valuesP, true, true);
            },
            addAllValues: function (valuesP) {
              this.internal_addAllValues(valuesP, true, true);
            },
            internal_addValues: function (valuesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddValues(valuesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
              }
            },
            internal_addAllValues: function (valuesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = valuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddValues(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = valuesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddValues(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
              }
            },
            removeValues: function (valuesP) {
              this.internal_removeValues(valuesP, true, true);
            },
            get_removeAllValuesCurrentlyProcessing: function () {
              return this.$removeAllValuesCurrentlyProcessing;
            },
            set_removeAllValuesCurrentlyProcessing: function (tmp$0) {
              this.$removeAllValuesCurrentlyProcessing = tmp$0;
            },
            removeAllValues: function () {
              this.internal_removeAllValues(true, true);
            },
            internal_removeValues: function (valuesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__values().size() !== 0 && this.get__values().containsKey((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__values().remove((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey());
                ((valuesP != null ? valuesP : Kotlin.throwNPE()) != null ? valuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllValuesCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), valuesP));
                }
              }
            },
            internal_removeAllValues: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllValuesCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_values()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__values().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_values(), temp_els));
                this.set_removeAllValuesCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_values()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllValues();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__values().size() !== 0 && this.get__values().containsKey(value)) {
                    var obj = this.get__values().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__values().remove(value);
                    this.get__values().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findValuesByID: function (key) {
              return this.get__values().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_values()) {
                return this.findValuesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_values(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryValue());
                {
                  var tmp$0 = this.get__values().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__values().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_values());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_values());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Dictionary();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getValues: function () {
              return this.get_values();
            },
            setValues: function (internal_p) {
              this.set_values(internal_p);
            }
          }),
          TypeLibraryImpl: Kotlin.createClass([classes.cv, classes.c1i], /** @lends _.org.kevoree.impl.TypeLibraryImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$_subTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__subTypes()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get__subTypes: function () {
              return this.$_subTypes;
            },
            get_subTypes: function () {
              return _.kotlin.toList(this.get__subTypes().values());
            },
            set_subTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (subTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_subTypes(subTypesP, true, true);
            },
            internal_subTypes: function (subTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__subTypes().values(), subTypesP)) {
                this.get__subTypes().clear();
                {
                  var tmp$0 = subTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__subTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
                }
              }
            },
            doAddSubTypes: function (subTypesP) {
              var _key_ = (subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__subTypes().containsKey(_key_)) {
                this.get__subTypes().put(_key_, subTypesP);
              }
            },
            addSubTypes: function (subTypesP) {
              this.internal_addSubTypes(subTypesP, true, true);
            },
            addAllSubTypes: function (subTypesP) {
              this.internal_addAllSubTypes(subTypesP, true, true);
            },
            internal_addSubTypes: function (subTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSubTypes(subTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
              }
            },
            internal_addAllSubTypes: function (subTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = subTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSubTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = subTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSubTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
              }
            },
            removeSubTypes: function (subTypesP) {
              this.internal_removeSubTypes(subTypesP, true, true);
            },
            removeAllSubTypes: function () {
              this.internal_removeAllSubTypes(true, true);
            },
            internal_removeSubTypes: function (subTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey((subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__subTypes().remove((subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), subTypesP));
                }
              }
            },
            internal_removeAllSubTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_subTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__subTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_subTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSubTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSubTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSubTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSubTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey(value)) {
                    var obj = this.get__subTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__subTypes().remove(value);
                    this.get__subTypes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findSubTypesByID: function (key) {
              return this.get__subTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_subTypes()) {
                return this.findSubTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_subTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$0 = this.get__subTypes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__subTypes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_subTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_subTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_TypeLibrary();
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getSubTypes: function () {
              return this.get_subTypes();
            },
            setSubTypes: function (internal_p) {
              this.set_subTypes(internal_p);
            }
          }),
          PortTypeMappingImpl: Kotlin.createClass([classes.cv, classes.c1b], /** @lends _.org.kevoree.impl.PortTypeMappingImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$beanMethodName = null;
              this.$serviceMethodName = null;
              this.$paramTypes = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
            },
            get_beanMethodName: function () {
              return this.$beanMethodName;
            },
            set_beanMethodName: function (iP) {
              this.internal_beanMethodName(iP, true);
            },
            internal_beanMethodName: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_beanMethodName())) {
                var oldPath = this.path();
                this.$beanMethodName = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), this.get_beanMethodName()));
                }
              }
            },
            get_serviceMethodName: function () {
              return this.$serviceMethodName;
            },
            set_serviceMethodName: function (iP) {
              this.internal_serviceMethodName(iP, true);
            },
            internal_serviceMethodName: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_serviceMethodName())) {
                var oldPath = this.path();
                this.$serviceMethodName = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), this.get_serviceMethodName()));
                }
              }
            },
            get_paramTypes: function () {
              return this.$paramTypes;
            },
            set_paramTypes: function (iP) {
              this.internal_paramTypes(iP, true);
            },
            internal_paramTypes: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_paramTypes())) {
                var oldPath = this.path();
                this.$paramTypes = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_paramTypes(), this.get_paramTypes()));
                }
              }
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_beanMethodName()) {
                this.internal_beanMethodName(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_serviceMethodName()) {
                this.internal_serviceMethodName(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_paramTypes()) {
                this.internal_paramTypes(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findByID: function (relationName, idP) {
              {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
              visitor.visit(this.get_paramTypes(), _.org.kevoree.util.Constants.get_Att_paramTypes(), this);
              visitor.visit(this.get_serviceMethodName(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), this);
              visitor.visit(this.get_beanMethodName(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_PortTypeMapping();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getParamTypes: function () {
              return this.get_paramTypes();
            },
            setParamTypes: function (internal_p) {
              this.set_paramTypes(internal_p);
            },
            getServiceMethodName: function () {
              return this.get_serviceMethodName();
            },
            setServiceMethodName: function (internal_p) {
              this.set_serviceMethodName(internal_p);
            },
            getBeanMethodName: function () {
              return this.get_beanMethodName();
            },
            setBeanMethodName: function (internal_p) {
              this.set_beanMethodName(internal_p);
            }
          }),
          WireImpl: Kotlin.createClass([classes.cv, classes.cm], /** @lends _.org.kevoree.impl.WireImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_ports = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__ports()) != null ? tmp$0.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__ports: function () {
              return this.$_ports;
            },
            get_ports: function () {
              return _.kotlin.toList(this.get__ports().values());
            },
            set_ports: function (portsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_ports(portsP, true, true);
            },
            internal_ports: function (portsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__ports().values(), portsP)) {
                this.get__ports().clear();
                {
                  var tmp$0 = portsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__ports().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
                }
              }
            },
            doAddPorts: function (portsP) {
              var _key_ = (portsP != null ? portsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__ports().containsKey(_key_)) {
                this.get__ports().put(_key_, portsP);
              }
            },
            addPorts: function (portsP) {
              this.internal_addPorts(portsP, true, true);
            },
            addAllPorts: function (portsP) {
              this.internal_addAllPorts(portsP, true, true);
            },
            internal_addPorts: function (portsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddPorts(portsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
              }
            },
            internal_addAllPorts: function (portsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = portsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddPorts(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = portsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddPorts(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
              }
            },
            removePorts: function (portsP) {
              this.internal_removePorts(portsP, true, true);
            },
            removeAllPorts: function () {
              this.internal_removeAllPorts(true, true);
            },
            internal_removePorts: function (portsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__ports()) === 2 && this.get__ports().containsKey((portsP != null ? portsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of portsP must contain at least 2 element. Can not remove sizeof(portsP)=' + _.kotlin.get_size_0(this.get__ports()));
              }
               else {
                this.get__ports().remove((portsP != null ? portsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), portsP));
                }
              }
            },
            internal_removeAllPorts: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_ports()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__ports().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ports(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ports()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addPorts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllPorts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removePorts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPorts();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__ports().size() !== 0 && this.get__ports().containsKey(value)) {
                    var obj = this.get__ports().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__ports().remove(value);
                    this.get__ports().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findPortsByID: function (key) {
              return this.get__ports().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ports()) {
                return this.findPortsByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_ports(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$0 = this.get__ports().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__ports().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_ports());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_ports());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_Wire();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getPorts: function () {
              return this.get_ports();
            },
            setPorts: function (internal_p) {
              this.set_ports(internal_p);
            }
          }),
          MBindingImpl: Kotlin.createClass([classes.cv, classes.c10], /** @lends _.org.kevoree.impl.MBindingImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$port = null;
              this.$hub = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_port(null);
              this.set_hub(null);
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get_port: function () {
              return this.$port;
            },
            set_port: function (portP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_port(portP, true, true);
            },
            internal_port: function (portP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$port, portP)) {
                if (setOpposite) {
                  if (this.$port != null) {
                    var tmp$0;
                    ((tmp$0 = this.$port) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_bindings(), this, false, fireEvents);
                  }
                  if (portP != null) {
                    portP.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.util.Constants.get_Ref_bindings(), this, false, fireEvents);
                  }
                }
                this.$port = portP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_port(), portP));
                }
              }
            },
            get_hub: function () {
              return this.$hub;
            },
            set_hub: function (hubP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_hub(hubP, true, true);
            },
            internal_hub: function (hubP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$hub, hubP)) {
                if (setOpposite) {
                  if (this.$hub != null) {
                    var tmp$0;
                    ((tmp$0 = this.$hub) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_bindings(), this, false, fireEvents);
                  }
                  if (hubP != null) {
                    hubP.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.util.Constants.get_Ref_bindings(), this, false, fireEvents);
                  }
                }
                this.$hub = hubP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_hub(), hubP));
                }
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_port()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_port(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_port(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_port(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hub()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_hub(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_hub(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_hub(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_port()) {
                var objFound = this.get_port();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hub()) {
                var objFound_0 = this.get_hub();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_port(), _.org.kevoree.util.Constants.get_org_kevoree_Port());
                this.internal_visit(visitor, this.get_port(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_port());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_port());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_hub(), _.org.kevoree.util.Constants.get_org_kevoree_Channel());
                this.internal_visit(visitor, this.get_hub(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_hub());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_hub());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_MBinding();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getPort: function () {
              return this.get_port();
            },
            setPort: function (internal_p) {
              this.set_port(internal_p);
            },
            getHub: function () {
              return this.get_hub();
            },
            setHub: function (internal_p) {
              this.set_hub(internal_p);
            }
          }),
          ComponentTypeImpl: Kotlin.createClass([classes.cv, classes.c1g], /** @lends _.org.kevoree.impl.ComponentTypeImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$factoryBean = null;
              this.$bean = null;
              this.$abstract = null;
              this.$startMethod = null;
              this.$stopMethod = null;
              this.$updateMethod = null;
              this.$_deployUnits = new Kotlin.PrimitiveHashMap(0);
              this.$dictionaryType = null;
              this.$_superTypes = new Kotlin.PrimitiveHashMap(0);
              this.$_required = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllRequiredCurrentlyProcessing = false;
              this.$_integrationPatterns = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllIntegrationPatternsCurrentlyProcessing = false;
              this.$extraFonctionalProperties = null;
              this.$_provided = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllProvidedCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
              (tmp$0 = this.get__deployUnits()) != null ? tmp$0.clear() : null;
              this.set_dictionaryType(null);
              (tmp$1 = this.get__superTypes()) != null ? tmp$1.clear() : null;
              (tmp$2 = this.get__required()) != null ? tmp$2.clear() : null;
              (tmp$3 = this.get__integrationPatterns()) != null ? tmp$3.clear() : null;
              this.set_extraFonctionalProperties(null);
              (tmp$4 = this.get__provided()) != null ? tmp$4.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_factoryBean: function () {
              return this.$factoryBean;
            },
            set_factoryBean: function (iP) {
              this.internal_factoryBean(iP, true);
            },
            internal_factoryBean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_factoryBean())) {
                var oldPath = this.path();
                this.$factoryBean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this.get_factoryBean()));
                }
              }
            },
            get_bean: function () {
              return this.$bean;
            },
            set_bean: function (iP) {
              this.internal_bean(iP, true);
            },
            internal_bean: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_bean())) {
                var oldPath = this.path();
                this.$bean = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_bean(), this.get_bean()));
                }
              }
            },
            get_abstract: function () {
              return this.$abstract;
            },
            set_abstract: function (iP) {
              this.internal_abstract(iP, true);
            },
            internal_abstract: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_abstract())) {
                var oldPath = this.path();
                this.$abstract = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_abstract(), this.get_abstract()));
                }
              }
            },
            get_startMethod: function () {
              return this.$startMethod;
            },
            set_startMethod: function (iP) {
              this.internal_startMethod(iP, true);
            },
            internal_startMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_startMethod())) {
                var oldPath = this.path();
                this.$startMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_startMethod(), this.get_startMethod()));
                }
              }
            },
            get_stopMethod: function () {
              return this.$stopMethod;
            },
            set_stopMethod: function (iP) {
              this.internal_stopMethod(iP, true);
            },
            internal_stopMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_stopMethod())) {
                var oldPath = this.path();
                this.$stopMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this.get_stopMethod()));
                }
              }
            },
            get_updateMethod: function () {
              return this.$updateMethod;
            },
            set_updateMethod: function (iP) {
              this.internal_updateMethod(iP, true);
            },
            internal_updateMethod: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_updateMethod())) {
                var oldPath = this.path();
                this.$updateMethod = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this.get_updateMethod()));
                }
              }
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get_deployUnits: function () {
              return _.kotlin.toList(this.get__deployUnits().values());
            },
            set_deployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_deployUnits(deployUnitsP, true, true);
            },
            internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__deployUnits().values(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__deployUnits().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            doAddDeployUnits: function (deployUnitsP) {
              var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__deployUnits().containsKey(_key_)) {
                this.get__deployUnits().put(_key_, deployUnitsP);
              }
            },
            addDeployUnits: function (deployUnitsP) {
              this.internal_addDeployUnits(deployUnitsP, true, true);
            },
            addAllDeployUnits: function (deployUnitsP) {
              this.internal_addAllDeployUnits(deployUnitsP, true, true);
            },
            internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddDeployUnits(deployUnitsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddDeployUnits(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddDeployUnits(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              this.internal_removeDeployUnits(deployUnitsP, true, true);
            },
            removeAllDeployUnits: function () {
              this.internal_removeAllDeployUnits(true, true);
            },
            internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (_.kotlin.get_size_0(this.get__deployUnits()) === 1 && this.get__deployUnits().containsKey((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of deployUnitsP must contain at least 1 element. Can not remove sizeof(deployUnitsP)=' + _.kotlin.get_size_0(this.get__deployUnits()));
              }
               else {
                this.get__deployUnits().remove((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), deployUnitsP));
                }
              }
            },
            internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_deployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__deployUnits().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), temp_els));
              }
            },
            get_dictionaryType: function () {
              return this.$dictionaryType;
            },
            set_dictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_dictionaryType(dictionaryTypeP, true, true);
            },
            internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$dictionaryType, dictionaryTypeP)) {
                if (this.$dictionaryType != null) {
                  var tmp$0;
                  (((tmp$0 = this.$dictionaryType) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                }
                this.$dictionaryType = dictionaryTypeP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_dictionaryType(), dictionaryTypeP));
                }
              }
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get_superTypes: function () {
              return _.kotlin.toList(this.get__superTypes().values());
            },
            set_superTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_superTypes(superTypesP, true, true);
            },
            internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__superTypes().values(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__superTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            doAddSuperTypes: function (superTypesP) {
              var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__superTypes().containsKey(_key_)) {
                this.get__superTypes().put(_key_, superTypesP);
              }
            },
            addSuperTypes: function (superTypesP) {
              this.internal_addSuperTypes(superTypesP, true, true);
            },
            addAllSuperTypes: function (superTypesP) {
              this.internal_addAllSuperTypes(superTypesP, true, true);
            },
            internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddSuperTypes(superTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddSuperTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = superTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddSuperTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
              }
            },
            removeSuperTypes: function (superTypesP) {
              this.internal_removeSuperTypes(superTypesP, true, true);
            },
            removeAllSuperTypes: function () {
              this.internal_removeAllSuperTypes(true, true);
            },
            internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__superTypes().remove((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), superTypesP));
                }
              }
            },
            internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_superTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__superTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), temp_els));
              }
            },
            get__required: function () {
              return this.$_required;
            },
            get_required: function () {
              return _.kotlin.toList(this.get__required().values());
            },
            set_required: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_required(requiredP, true, true);
            },
            internal_required: function (requiredP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__required().values(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__required().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_required(), el), _.org.kevoree.util.Constants.get_Ref_required());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            doAddRequired: function (requiredP) {
              var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__required().containsKey(_key_)) {
                this.get__required().put(_key_, requiredP);
                (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP), _.org.kevoree.util.Constants.get_Ref_required());
              }
            },
            addRequired: function (requiredP) {
              this.internal_addRequired(requiredP, true, true);
            },
            addAllRequired: function (requiredP) {
              this.internal_addAllRequired(requiredP, true, true);
            },
            internal_addRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddRequired(requiredP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            internal_addAllRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddRequired(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddRequired(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
              }
            },
            removeRequired: function (requiredP) {
              this.internal_removeRequired(requiredP, true, true);
            },
            get_removeAllRequiredCurrentlyProcessing: function () {
              return this.$removeAllRequiredCurrentlyProcessing;
            },
            set_removeAllRequiredCurrentlyProcessing: function (tmp$0) {
              this.$removeAllRequiredCurrentlyProcessing = tmp$0;
            },
            removeAllRequired: function () {
              this.internal_removeAllRequired(true, true);
            },
            internal_removeRequired: function (requiredP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__required().size() !== 0 && this.get__required().containsKey((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__required().remove((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllRequiredCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), requiredP));
                }
              }
            },
            internal_removeAllRequired: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllRequiredCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_required()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__required().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_required(), temp_els));
                this.set_removeAllRequiredCurrentlyProcessing(false);
              }
            },
            get__integrationPatterns: function () {
              return this.$_integrationPatterns;
            },
            get_integrationPatterns: function () {
              return _.kotlin.toList(this.get__integrationPatterns().values());
            },
            set_integrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (integrationPatternsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_integrationPatterns(integrationPatternsP, true, true);
            },
            internal_integrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__integrationPatterns().values(), integrationPatternsP)) {
                this.get__integrationPatterns().clear();
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__integrationPatterns().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), el), _.org.kevoree.util.Constants.get_Ref_integrationPatterns());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
                }
              }
            },
            doAddIntegrationPatterns: function (integrationPatternsP) {
              var _key_ = (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__integrationPatterns().containsKey(_key_)) {
                this.get__integrationPatterns().put(_key_, integrationPatternsP);
                (integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP), _.org.kevoree.util.Constants.get_Ref_integrationPatterns());
              }
            },
            addIntegrationPatterns: function (integrationPatternsP) {
              this.internal_addIntegrationPatterns(integrationPatternsP, true, true);
            },
            addAllIntegrationPatterns: function (integrationPatternsP) {
              this.internal_addAllIntegrationPatterns(integrationPatternsP, true, true);
            },
            internal_addIntegrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddIntegrationPatterns(integrationPatternsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
              }
            },
            internal_addAllIntegrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddIntegrationPatterns(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = integrationPatternsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddIntegrationPatterns(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
              }
            },
            removeIntegrationPatterns: function (integrationPatternsP) {
              this.internal_removeIntegrationPatterns(integrationPatternsP, true, true);
            },
            get_removeAllIntegrationPatternsCurrentlyProcessing: function () {
              return this.$removeAllIntegrationPatternsCurrentlyProcessing;
            },
            set_removeAllIntegrationPatternsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllIntegrationPatternsCurrentlyProcessing = tmp$0;
            },
            removeAllIntegrationPatterns: function () {
              this.internal_removeAllIntegrationPatterns(true, true);
            },
            internal_removeIntegrationPatterns: function (integrationPatternsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__integrationPatterns().remove((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()).internalGetKey());
                ((integrationPatternsP != null ? integrationPatternsP : Kotlin.throwNPE()) != null ? integrationPatternsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllIntegrationPatternsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), integrationPatternsP));
                }
              }
            },
            internal_removeAllIntegrationPatterns: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllIntegrationPatternsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_integrationPatterns()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__integrationPatterns().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_integrationPatterns(), temp_els));
                this.set_removeAllIntegrationPatternsCurrentlyProcessing(false);
              }
            },
            get_extraFonctionalProperties: function () {
              return this.$extraFonctionalProperties;
            },
            set_extraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_extraFonctionalProperties(extraFonctionalPropertiesP, true, true);
            },
            internal_extraFonctionalProperties: function (extraFonctionalPropertiesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$extraFonctionalProperties, extraFonctionalPropertiesP)) {
                if (this.$extraFonctionalProperties != null) {
                  var tmp$0;
                  (((tmp$0 = this.$extraFonctionalProperties) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (extraFonctionalPropertiesP != null) {
                  (extraFonctionalPropertiesP != null ? extraFonctionalPropertiesP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                }
                this.$extraFonctionalProperties = extraFonctionalPropertiesP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), extraFonctionalPropertiesP));
                }
              }
            },
            get__provided: function () {
              return this.$_provided;
            },
            get_provided: function () {
              return _.kotlin.toList(this.get__provided().values());
            },
            set_provided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_provided(providedP, true, true);
            },
            internal_provided: function (providedP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__provided().values(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__provided().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_provided(), el), _.org.kevoree.util.Constants.get_Ref_provided());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            doAddProvided: function (providedP) {
              var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__provided().containsKey(_key_)) {
                this.get__provided().put(_key_, providedP);
                (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP), _.org.kevoree.util.Constants.get_Ref_provided());
              }
            },
            addProvided: function (providedP) {
              this.internal_addProvided(providedP, true, true);
            },
            addAllProvided: function (providedP) {
              this.internal_addAllProvided(providedP, true, true);
            },
            internal_addProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddProvided(providedP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            internal_addAllProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddProvided(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddProvided(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
              }
            },
            removeProvided: function (providedP) {
              this.internal_removeProvided(providedP, true, true);
            },
            get_removeAllProvidedCurrentlyProcessing: function () {
              return this.$removeAllProvidedCurrentlyProcessing;
            },
            set_removeAllProvidedCurrentlyProcessing: function (tmp$0) {
              this.$removeAllProvidedCurrentlyProcessing = tmp$0;
            },
            removeAllProvided: function () {
              this.internal_removeAllProvided(true, true);
            },
            internal_removeProvided: function (providedP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__provided().remove((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllProvidedCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), providedP));
                }
              }
            },
            internal_removeAllProvided: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllProvidedCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_provided()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__provided().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_provided(), temp_els));
                this.set_removeAllProvidedCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                this.internal_factoryBean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                this.internal_bean(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                this.internal_startMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                this.internal_stopMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                this.internal_updateMethod(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__deployUnits().remove(value);
                    this.get__deployUnits().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_dictionaryType(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_dictionaryType(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_0 == null) {
                      throw new Error('Key newed to null ' + obj_0);
                    }
                    this.get__superTypes().remove(value);
                    this.get__superTypes().put(objNewKey_0, obj_0);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_1 = this.get__required().get(value);
                    var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_1 == null) {
                      throw new Error('Key newed to null ' + obj_1);
                    }
                    this.get__required().remove(value);
                    this.get__required().put(objNewKey_1, obj_1);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addIntegrationPatterns(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllIntegrationPatterns(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeIntegrationPatterns(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllIntegrationPatterns();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(value)) {
                    var obj_2 = this.get__integrationPatterns().get(value);
                    var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_2 == null) {
                      throw new Error('Key newed to null ' + obj_2);
                    }
                    this.get__integrationPatterns().remove(value);
                    this.get__integrationPatterns().put(objNewKey_2, obj_2);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_extraFonctionalProperties(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_extraFonctionalProperties(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_extraFonctionalProperties(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj_3 = this.get__provided().get(value);
                    var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey_3 == null) {
                      throw new Error('Key newed to null ' + obj_3);
                    }
                    this.get__provided().remove(value);
                    this.get__provided().put(objNewKey_3, obj_3);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findIntegrationPatternsByID: function (key) {
              return this.get__integrationPatterns().get(key);
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                return this.findDeployUnitsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                var objFound = this.get_dictionaryType();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                return this.findSuperTypesByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                return this.findRequiredByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                return this.findIntegrationPatternsByID(idP);
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                var objFound_0 = this.get_extraFonctionalProperties();
                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound_0;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                return this.findProvidedByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType(), _.org.kevoree.util.Constants.get_org_kevoree_DictionaryType());
                this.internal_visit(visitor, this.get_dictionaryType(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_dictionaryType());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_required(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$0 = this.get__required().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__required().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_required());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_required());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_integrationPatterns(), _.org.kevoree.util.Constants.get_org_kevoree_IntegrationPattern());
                {
                  var tmp$1 = this.get__integrationPatterns().keySet().iterator();
                  while (tmp$1.hasNext()) {
                    var KMFLoopEntryKey_0 = tmp$1.next();
                    this.internal_visit(visitor, this.get__integrationPatterns().get(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_integrationPatterns());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_integrationPatterns());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties(), _.org.kevoree.util.Constants.get_org_kevoree_ExtraFonctionalProperty());
                this.internal_visit(visitor, this.get_extraFonctionalProperties(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_provided(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$2 = this.get__provided().keySet().iterator();
                  while (tmp$2.hasNext()) {
                    var KMFLoopEntryKey_1 = tmp$2.next();
                    this.internal_visit(visitor, this.get__provided().get(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_provided());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_provided());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits(), _.org.kevoree.util.Constants.get_org_kevoree_DeployUnit());
                {
                  var tmp$3 = this.get__deployUnits().keySet().iterator();
                  while (tmp$3.hasNext()) {
                    var KMFLoopEntryKey_2 = tmp$3.next();
                    this.internal_visit(visitor, this.get__deployUnits().get(KMFLoopEntryKey_2), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_deployUnits());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_deployUnits());
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes(), _.org.kevoree.util.Constants.get_org_kevoree_TypeDefinition());
                {
                  var tmp$4 = this.get__superTypes().keySet().iterator();
                  while (tmp$4.hasNext()) {
                    var KMFLoopEntryKey_3 = tmp$4.next();
                    this.internal_visit(visitor, this.get__superTypes().get(KMFLoopEntryKey_3), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_superTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_superTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_stopMethod(), _.org.kevoree.util.Constants.get_Att_stopMethod(), this);
              visitor.visit(this.get_abstract(), _.org.kevoree.util.Constants.get_Att_abstract(), this);
              visitor.visit(this.get_bean(), _.org.kevoree.util.Constants.get_Att_bean(), this);
              visitor.visit(this.get_updateMethod(), _.org.kevoree.util.Constants.get_Att_updateMethod(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
              visitor.visit(this.get_factoryBean(), _.org.kevoree.util.Constants.get_Att_factoryBean(), this);
              visitor.visit(this.get_startMethod(), _.org.kevoree.util.Constants.get_Att_startMethod(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ComponentType();
            },
            getStopMethod: function () {
              return this.get_stopMethod();
            },
            setStopMethod: function (internal_p) {
              this.set_stopMethod(internal_p);
            },
            getAbstract: function () {
              return this.get_abstract();
            },
            setAbstract: function (internal_p) {
              this.set_abstract(internal_p);
            },
            getBean: function () {
              return this.get_bean();
            },
            setBean: function (internal_p) {
              this.set_bean(internal_p);
            },
            getUpdateMethod: function () {
              return this.get_updateMethod();
            },
            setUpdateMethod: function (internal_p) {
              this.set_updateMethod(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getFactoryBean: function () {
              return this.get_factoryBean();
            },
            setFactoryBean: function (internal_p) {
              this.set_factoryBean(internal_p);
            },
            getStartMethod: function () {
              return this.get_startMethod();
            },
            setStartMethod: function (internal_p) {
              this.set_startMethod(internal_p);
            },
            getDeployUnits: function () {
              return this.get_deployUnits();
            },
            setDeployUnits: function (internal_p) {
              this.set_deployUnits(internal_p);
            },
            getDictionaryType: function () {
              return this.get_dictionaryType();
            },
            setDictionaryType: function (internal_p) {
              this.set_dictionaryType(internal_p);
            },
            getSuperTypes: function () {
              return this.get_superTypes();
            },
            setSuperTypes: function (internal_p) {
              this.set_superTypes(internal_p);
            },
            getRequired: function () {
              return this.get_required();
            },
            setRequired: function (internal_p) {
              this.set_required(internal_p);
            },
            getIntegrationPatterns: function () {
              return this.get_integrationPatterns();
            },
            setIntegrationPatterns: function (internal_p) {
              this.set_integrationPatterns(internal_p);
            },
            getExtraFonctionalProperties: function () {
              return this.get_extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (internal_p) {
              this.set_extraFonctionalProperties(internal_p);
            },
            getProvided: function () {
              return this.get_provided();
            },
            setProvided: function (internal_p) {
              this.set_provided(internal_p);
            }
          }),
          ExtraFonctionalPropertyImpl: Kotlin.createClass([classes.cv, classes.c1d], /** @lends _.org.kevoree.impl.ExtraFonctionalPropertyImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$generated_KMF_ID = '' + Math.random() + (new Date()).getTime();
              this.$_portTypes = new Kotlin.PrimitiveHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__portTypes()) != null ? tmp$0.clear() : null;
            },
            get_generated_KMF_ID: function () {
              return this.$generated_KMF_ID;
            },
            set_generated_KMF_ID: function (iP) {
              this.internal_generated_KMF_ID(iP, true);
            },
            internal_generated_KMF_ID: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_generated_KMF_ID())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$generated_KMF_ID = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.get_generated_KMF_ID()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this.path()));
                }
              }
            },
            get__portTypes: function () {
              return this.$_portTypes;
            },
            get_portTypes: function () {
              return _.kotlin.toList(this.get__portTypes().values());
            },
            set_portTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_portTypes(portTypesP, true, true);
            },
            internal_portTypes: function (portTypesP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__portTypes().values(), portTypesP)) {
                this.get__portTypes().clear();
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__portTypes().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
                }
              }
            },
            doAddPortTypes: function (portTypesP) {
              var _key_ = (portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__portTypes().containsKey(_key_)) {
                this.get__portTypes().put(_key_, portTypesP);
              }
            },
            addPortTypes: function (portTypesP) {
              this.internal_addPortTypes(portTypesP, true, true);
            },
            addAllPortTypes: function (portTypesP) {
              this.internal_addAllPortTypes(portTypesP, true, true);
            },
            internal_addPortTypes: function (portTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddPortTypes(portTypesP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            internal_addAllPortTypes: function (portTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddPortTypes(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = portTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddPortTypes(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
              }
            },
            removePortTypes: function (portTypesP) {
              this.internal_removePortTypes(portTypesP, true, true);
            },
            removeAllPortTypes: function () {
              this.internal_removeAllPortTypes(true, true);
            },
            internal_removePortTypes: function (portTypesP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__portTypes().remove((portTypesP != null ? portTypesP : Kotlin.throwNPE()).internalGetKey());
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), portTypesP));
                }
              }
            },
            internal_removeAllPortTypes: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_portTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__portTypes().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), temp_els));
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                this.internal_generated_KMF_ID(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addPortTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllPortTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removePortTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPortTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(value)) {
                    var obj = this.get__portTypes().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__portTypes().remove(value);
                    this.get__portTypes().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_generated_KMF_ID();
            },
            findPortTypesByID: function (key) {
              return this.get__portTypes().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                return this.findPortTypesByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_portTypes(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef());
                {
                  var tmp$0 = this.get__portTypes().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__portTypes().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_portTypes());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_portTypes());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_generated_KMF_ID(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_ExtraFonctionalProperty();
            },
            getGenerated_KMF_ID: function () {
              return this.get_generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (internal_p) {
              this.set_generated_KMF_ID(internal_p);
            },
            getPortTypes: function () {
              return this.get_portTypes();
            },
            setPortTypes: function (internal_p) {
              this.set_portTypes(internal_p);
            }
          }),
          PortTypeRefImpl: Kotlin.createClass([classes.cv, classes.c16], /** @lends _.org.kevoree.impl.PortTypeRefImpl.prototype */ {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$internal_modelElementListeners = null;
              this.$internal_modelTreeListeners = null;
              this.$path_cache = null;
              this.$name = null;
              this.$optional = null;
              this.$noDependency = null;
              this.$ref = null;
              this.$_mappings = new Kotlin.PrimitiveHashMap(0);
              this.$removeAllMappingsCurrentlyProcessing = false;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get_internal_modelElementListeners: function () {
              return this.$internal_modelElementListeners;
            },
            set_internal_modelElementListeners: function (tmp$0) {
              this.$internal_modelElementListeners = tmp$0;
            },
            get_internal_modelTreeListeners: function () {
              return this.$internal_modelTreeListeners;
            },
            set_internal_modelTreeListeners: function (tmp$0) {
              this.$internal_modelTreeListeners = tmp$0;
            },
            get_path_cache: function () {
              return this.$path_cache;
            },
            set_path_cache: function (tmp$0) {
              this.$path_cache = tmp$0;
            },
            delete: function () {
              this.set_ref(null);
              var tmp$0;
              (tmp$0 = this.get__mappings()) != null ? tmp$0.clear() : null;
            },
            get_name: function () {
              return this.$name;
            },
            set_name: function (iP) {
              this.internal_name(iP, true);
            },
            internal_name: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_name())) {
                var oldPath = this.path();
                var oldId = this.internalGetKey();
                var previousParent = this.eContainer();
                var previousRefNameInParent = this.getRefInParent();
                this.$name = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_name(), this.get_name()));
                }
                if (previousParent != null) {
                  previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Att_name(), this.path()));
                }
              }
            },
            get_optional: function () {
              return this.$optional;
            },
            set_optional: function (iP) {
              this.internal_optional(iP, true);
            },
            internal_optional: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_optional())) {
                var oldPath = this.path();
                this.$optional = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_optional(), this.get_optional()));
                }
              }
            },
            get_noDependency: function () {
              return this.$noDependency;
            },
            set_noDependency: function (iP) {
              this.internal_noDependency(iP, true);
            },
            internal_noDependency: function (iP, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(iP, this.get_noDependency())) {
                var oldPath = this.path();
                this.$noDependency = iP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE(), _.org.kevoree.util.Constants.get_Att_noDependency(), this.get_noDependency()));
                }
              }
            },
            get_ref: function () {
              return this.$ref;
            },
            set_ref: function (refP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.internal_ref(refP, true, true);
            },
            internal_ref: function (refP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.$ref, refP)) {
                this.$ref = refP;
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_REFERENCE(), _.org.kevoree.util.Constants.get_Ref_ref(), refP));
                }
              }
            },
            get__mappings: function () {
              return this.$_mappings;
            },
            get_mappings: function () {
              return _.kotlin.toList(this.get__mappings().values());
            },
            set_mappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (mappingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.internal_mappings(mappingsP, true, true);
            },
            internal_mappings: function (mappingsP, setOpposite, fireEvents) {
              if (!Kotlin.equals(this.get__mappings().values(), mappingsP)) {
                this.get__mappings().clear();
                {
                  var tmp$0 = mappingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                    if (elKey == null) {
                      throw new Error(_.org.kevoree.util.Constants.get_ELEMENT_HAS_NO_KEY_IN_COLLECTION());
                    }
                    this.get__mappings().put(elKey != null ? elKey : Kotlin.throwNPE(), el);
                    (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_mappings(), el), _.org.kevoree.util.Constants.get_Ref_mappings());
                  }
                }
                if (fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_SET(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
                }
              }
            },
            doAddMappings: function (mappingsP) {
              var _key_ = (mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Error(_.org.kevoree.util.Constants.get_EMPTY_KEY());
              }
              if (!this.get__mappings().containsKey(_key_)) {
                this.get__mappings().put(_key_, mappingsP);
                (mappingsP != null ? mappingsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP), _.org.kevoree.util.Constants.get_Ref_mappings());
              }
            },
            addMappings: function (mappingsP) {
              this.internal_addMappings(mappingsP, true, true);
            },
            addAllMappings: function (mappingsP) {
              this.internal_addAllMappings(mappingsP, true, true);
            },
            internal_addMappings: function (mappingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.doAddMappings(mappingsP);
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
              }
            },
            internal_addAllMappings: function (mappingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (setOpposite) {
                {
                  var tmp$0 = mappingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.doAddMappings(el);
                  }
                }
              }
               else {
                {
                  var tmp$1 = mappingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var el_0 = tmp$1.next();
                    this.doAddMappings(el_0);
                  }
                }
              }
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
              }
            },
            removeMappings: function (mappingsP) {
              this.internal_removeMappings(mappingsP, true, true);
            },
            get_removeAllMappingsCurrentlyProcessing: function () {
              return this.$removeAllMappingsCurrentlyProcessing;
            },
            set_removeAllMappingsCurrentlyProcessing: function (tmp$0) {
              this.$removeAllMappingsCurrentlyProcessing = tmp$0;
            },
            removeAllMappings: function () {
              this.internal_removeAllMappings(true, true);
            },
            internal_removeMappings: function (mappingsP, setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (this.get__mappings().size() !== 0 && this.get__mappings().containsKey((mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey())) {
                this.get__mappings().remove((mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey());
                ((mappingsP != null ? mappingsP : Kotlin.throwNPE()) != null ? mappingsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                if (!this.get_removeAllMappingsCurrentlyProcessing() && fireEvents) {
                  this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), mappingsP));
                }
              }
            },
            internal_removeAllMappings: function (setOpposite, fireEvents) {
              if (this.isReadOnly()) {
                throw new Error(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (fireEvents) {
                this.set_removeAllMappingsCurrentlyProcessing(true);
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.get_mappings()) != null ? tmp$0 : Kotlin.throwNPE();
              this.get__mappings().clear();
              if (fireEvents) {
                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), _.org.kevoree.modeling.api.util.ElementAttributeType.get_CONTAINMENT(), _.org.kevoree.util.Constants.get_Ref_mappings(), temp_els));
                this.set_removeAllMappingsCurrentlyProcessing(false);
              }
            },
            reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                this.internal_name(value, fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_optional()) {
                this.internal_optional(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_noDependency()) {
                this.internal_noDependency(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.internal_ref(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_ref(null, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_ref(value, setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_mappings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.internal_addMappings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.internal_addAllMappings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.internal_removeMappings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllMappings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__mappings().size() !== 0 && this.get__mappings().containsKey(value)) {
                    var obj = this.get__mappings().get(value);
                    var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                    if (objNewKey == null) {
                      throw new Error('Key newed to null ' + obj);
                    }
                    this.get__mappings().remove(value);
                    this.get__mappings().put(objNewKey, obj);
                  }
                }
                 else {
                  throw new Error(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Error('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.get_name();
            },
            findMappingsByID: function (key) {
              return this.get__mappings().get(key);
            },
            findByID: function (relationName, idP) {
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                var objFound = this.get_ref();
                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                  return objFound;
                }
                 else {
                  return null;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_mappings()) {
                return this.findMappingsByID(idP);
              }
               else {
                return null;
              }
            },
            visit: function (visitor, recursive, containedReference, nonContainedReference) {
              visitor.beginVisitElem(this);
              if (containedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_mappings(), _.org.kevoree.util.Constants.get_org_kevoree_PortTypeMapping());
                {
                  var tmp$0 = this.get__mappings().keySet().iterator();
                  while (tmp$0.hasNext()) {
                    var KMFLoopEntryKey = tmp$0.next();
                    this.internal_visit(visitor, this.get__mappings().get(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_mappings());
                  }
                }
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_mappings());
              }
              if (nonContainedReference) {
                visitor.beginVisitRef(_.org.kevoree.util.Constants.get_Ref_ref(), _.org.kevoree.util.Constants.get_org_kevoree_PortType());
                this.internal_visit(visitor, this.get_ref(), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.get_Ref_ref());
                visitor.endVisitRef(_.org.kevoree.util.Constants.get_Ref_ref());
              }
              visitor.endVisitElem(this);
            },
            visitAttributes: function (visitor) {
              visitor.visit(this.get_noDependency(), _.org.kevoree.util.Constants.get_Att_noDependency(), this);
              visitor.visit(this.get_optional(), _.org.kevoree.util.Constants.get_Att_optional(), this);
              visitor.visit(this.get_name(), _.org.kevoree.util.Constants.get_Att_name(), this);
            },
            metaClassName: function () {
              return _.org.kevoree.util.Constants.get_org_kevoree_PortTypeRef();
            },
            getNoDependency: function () {
              return this.get_noDependency();
            },
            setNoDependency: function (internal_p) {
              this.set_noDependency(internal_p);
            },
            getOptional: function () {
              return this.get_optional();
            },
            setOptional: function (internal_p) {
              this.set_optional(internal_p);
            },
            getName: function () {
              return this.get_name();
            },
            setName: function (internal_p) {
              this.set_name(internal_p);
            },
            getRef: function () {
              return this.get_ref();
            },
            setRef: function (internal_p) {
              this.set_ref(internal_p);
            },
            getMappings: function () {
              return this.get_mappings();
            },
            setMappings: function (internal_p) {
              this.set_mappings(internal_p);
            }
          })
        }),
        modeling: Kotlin.definePackage({
          api: Kotlin.definePackage({
            ModelLoader: classes.c4,
            KMFFactory: classes.c5,
            ModelCloner: classes.c8,
            ModelSerializer: classes.ca,
            KMFContainer: classes.ci,
            xmi: Kotlin.definePackage({
              XMIModelLoader: classes.c6,
              LoadingContext: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.xmi.LoadingContext.prototype */ {
                initialize: function () {
                  this.$xmiReader = null;
                  this.$loadedRoots = new Kotlin.ArrayList(0);
                  this.$map = new Kotlin.PrimitiveHashMap(0);
                  this.$elementsCount = new Kotlin.PrimitiveHashMap(0);
                  this.$resolvers = new Kotlin.ArrayList(0);
                  this.$stats = new Kotlin.PrimitiveHashMap(0);
                  this.$oppositesAlreadySet = new Kotlin.PrimitiveHashMap(0);
                },
                get_xmiReader: function () {
                  return this.$xmiReader;
                },
                set_xmiReader: function (tmp$0) {
                  this.$xmiReader = tmp$0;
                },
                get_loadedRoots: function () {
                  return this.$loadedRoots;
                },
                set_loadedRoots: function (tmp$0) {
                  this.$loadedRoots = tmp$0;
                },
                get_map: function () {
                  return this.$map;
                },
                get_elementsCount: function () {
                  return this.$elementsCount;
                },
                get_resolvers: function () {
                  return this.$resolvers;
                },
                get_stats: function () {
                  return this.$stats;
                },
                get_oppositesAlreadySet: function () {
                  return this.$oppositesAlreadySet;
                },
                isOppositeAlreadySet: function (localRef, oppositeRef) {
                  var res = this.get_oppositesAlreadySet().get(oppositeRef + '_' + localRef) != null || this.get_oppositesAlreadySet().get(localRef + '_' + oppositeRef) != null;
                  return res;
                },
                storeOppositeRelation: function (localRef, oppositeRef) {
                  this.get_oppositesAlreadySet().put(localRef + '_' + oppositeRef, true);
                }
              }),
              XMIResolveCommand: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.xmi.XMIResolveCommand.prototype */ {
                initialize: function (context, target, mutatorType, refName, ref) {
                  this.$context = context;
                  this.$target = target;
                  this.$mutatorType = mutatorType;
                  this.$refName = refName;
                  this.$ref = ref;
                },
                get_context: function () {
                  return this.$context;
                },
                get_target: function () {
                  return this.$target;
                },
                get_mutatorType: function () {
                  return this.$mutatorType;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_ref: function () {
                  return this.$ref;
                },
                run: function () {
                  var referencedElement = this.get_context().get_map().get(this.get_ref());
                  if (referencedElement != null) {
                    this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), referencedElement, true, false);
                    return;
                  }
                  if (Kotlin.equals(this.get_ref(), '/0/') || Kotlin.equals(this.get_ref(), '/')) {
                    referencedElement = this.get_context().get_map().get('/0');
                    if (referencedElement != null) {
                      this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), referencedElement, true, false);
                      return;
                    }
                  }
                  throw new Error('KMF Load error : reference ' + this.get_ref() + ' not found in map when trying to  ' + this.get_mutatorType() + ' ' + this.get_refName() + '  on ' + Kotlin.toString(this.get_target()));
                }
              }),
              ReferencesVisitor: Kotlin.createClass(classes.cj, /** @lends _.org.kevoree.modeling.api.xmi.ReferencesVisitor.prototype */ {
                initialize: function (ostream, addressTable, elementsCount) {
                  this.$ostream = ostream;
                  this.$addressTable = addressTable;
                  this.$elementsCount = elementsCount;
                  this.super_init();
                  this.$value = null;
                },
                get_ostream: function () {
                  return this.$ostream;
                },
                get_addressTable: function () {
                  return this.$addressTable;
                },
                get_elementsCount: function () {
                  return this.$elementsCount;
                },
                get_value: function () {
                  return this.$value;
                },
                set_value: function (tmp$0) {
                  this.$value = tmp$0;
                },
                beginVisitElem: function (elem) {
                },
                endVisitElem: function (elem) {
                },
                beginVisitRef: function (refName, refType) {
                },
                endVisitRef: function (refName) {
                  if (this.get_value() != null) {
                    this.get_ostream().print(' ' + refName + '="' + Kotlin.toString(this.get_value()) + '"');
                    this.set_value(null);
                  }
                },
                visit: function (elem, refNameInParent, parent) {
                  var adjustedAddress = this.get_addressTable().get(elem);
                  if (this.get_value() == null) {
                    this.set_value(adjustedAddress);
                  }
                   else {
                    this.set_value(_.jet.plus(this.get_value(), ' ' + adjustedAddress));
                  }
                }
              }),
              AttributesVisitor: Kotlin.createClass(classes.ck, /** @lends _.org.kevoree.modeling.api.xmi.AttributesVisitor.prototype */ {
                initialize: function (ostream) {
                  this.$ostream = ostream;
                },
                get_ostream: function () {
                  return this.$ostream;
                },
                visit: function (value, name, parent) {
                  if (value != null) {
                    this.get_ostream().print(' ' + name + '="');
                    this.escapeXml(this.get_ostream(), Kotlin.toString(value));
                    this.get_ostream().print('"');
                  }
                },
                escapeXml: function (ostream, chain) {
                  if (chain == null) {
                    return;
                  }
                  var i = 0;
                  var max = chain.length;
                  while (i < max) {
                    var c = chain.charAt(i);
                    if (c === '"') {
                      ostream.print('&quot;');
                    }
                     else if (c === '&') {
                      ostream.print('&amp;');
                    }
                     else if (c === "'") {
                      ostream.print('&apos;');
                    }
                     else if (c === '<') {
                      ostream.print('&lt;');
                    }
                     else if (c === '>') {
                      ostream.print('&gt;');
                    }
                     else {
                      ostream.print_0(c);
                    }
                    i = i + 1;
                  }
                }
              }),
              ModelSerializationVisitor: Kotlin.createClass(classes.cj, /** @lends _.org.kevoree.modeling.api.xmi.ModelSerializationVisitor.prototype */ {
                initialize: function (ostream, addressTable, elementsCount) {
                  this.$ostream = ostream;
                  this.$addressTable = addressTable;
                  this.$elementsCount = elementsCount;
                  this.super_init();
                  this.$attributeVisitor = new _.org.kevoree.modeling.api.xmi.AttributesVisitor(this.get_ostream());
                  this.$referenceVisitor = new _.org.kevoree.modeling.api.xmi.ReferencesVisitor(this.get_ostream(), this.get_addressTable(), this.get_elementsCount());
                },
                get_ostream: function () {
                  return this.$ostream;
                },
                get_addressTable: function () {
                  return this.$addressTable;
                },
                get_elementsCount: function () {
                  return this.$elementsCount;
                },
                get_attributeVisitor: function () {
                  return this.$attributeVisitor;
                },
                get_referenceVisitor: function () {
                  return this.$referenceVisitor;
                },
                beginVisitElem: function (elem) {
                },
                endVisitElem: function (elem) {
                },
                beginVisitRef: function (refName, refType) {
                },
                endVisitRef: function (refName) {
                },
                visit: function (elem, refNameInParent, parent) {
                  this.get_ostream().print_0('<');
                  this.get_ostream().print(refNameInParent);
                  this.get_ostream().print(' xsi:type="' + this.formatMetaClassName(elem.metaClassName()) + '"');
                  elem.visitAttributes(this.get_attributeVisitor());
                  elem.visit(this.get_referenceVisitor(), false, false, true);
                  this.get_ostream().println_0('>');
                  elem.visit(this, false, true, false);
                  this.get_ostream().print('<\/');
                  this.get_ostream().print(refNameInParent);
                  this.get_ostream().print_0('>');
                  this.get_ostream().println_1();
                },
                formatMetaClassName: function (metaClassName) {
                  var lastPoint = _.js.lastIndexOf_0(metaClassName, '.');
                  var pack = metaClassName.substring(0, lastPoint);
                  var cls = metaClassName.substring(lastPoint + 1);
                  return pack + ':' + cls;
                }
              }),
              ModelAddressVisitor: Kotlin.createClass(classes.cj, /** @lends _.org.kevoree.modeling.api.xmi.ModelAddressVisitor.prototype */ {
                initialize: function (addressTable, elementsCount, packageList) {
                  this.$addressTable = addressTable;
                  this.$elementsCount = elementsCount;
                  this.$packageList = packageList;
                  this.super_init();
                },
                get_addressTable: function () {
                  return this.$addressTable;
                },
                get_elementsCount: function () {
                  return this.$elementsCount;
                },
                get_packageList: function () {
                  return this.$packageList;
                },
                beginVisitElem: function (elem) {
                },
                endVisitElem: function (elem) {
                },
                beginVisitRef: function (refName, refType) {
                },
                endVisitRef: function (refName) {
                },
                visit: function (elem, refNameInParent, parent) {
                  var tmp$0;
                  var parentXmiAddress = (tmp$0 = this.get_addressTable().get(parent)) != null ? tmp$0 : Kotlin.throwNPE();
                  var i = this.get_elementsCount().get(parentXmiAddress + '/@' + refNameInParent) !== null ? this.get_elementsCount().get(parentXmiAddress + '/@' + refNameInParent) : 0;
                  this.get_addressTable().put(elem, parentXmiAddress + '/@' + refNameInParent + '.' + i);
                  this.get_elementsCount().put(parentXmiAddress + '/@' + refNameInParent, i + 1);
                  var pack = elem.metaClassName().substring(0, _.js.lastIndexOf_0(elem.metaClassName(), '.'));
                  if (!this.get_packageList().contains(pack))
                    this.get_packageList().add(pack);
                }
              }),
              XMIModelSerializer: classes.c7,
              XmlParser: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.xmi.XmlParser.prototype */ {
                initialize: function (inputStream) {
                  this.$inputStream = inputStream;
                  this.$bytes = this.get_inputStream().readBytes();
                  this.$index = -1;
                  this.$currentChar = null;
                  this.$xmlVersion = null;
                  this.$xmlCharset = null;
                  this.$tagName = '';
                  this.$tagPrefix = null;
                  this.$attributesNames = new Kotlin.ArrayList(0);
                  this.$attributesPrefixes = new Kotlin.ArrayList(0);
                  this.$attributesValues = new Kotlin.ArrayList(0);
                  this.$attributeName = new _.java.lang.StringBuilder();
                  this.$attributePrefix = null;
                  this.$attributeValue = new _.java.lang.StringBuilder();
                  this.$readSingleton = false;
                },
                get_inputStream: function () {
                  return this.$inputStream;
                },
                get_bytes: function () {
                  return this.$bytes;
                },
                get_index: function () {
                  return this.$index;
                },
                set_index: function (tmp$0) {
                  this.$index = tmp$0;
                },
                get_currentChar: function () {
                  return this.$currentChar;
                },
                set_currentChar: function (tmp$0) {
                  this.$currentChar = tmp$0;
                },
                get_xmlVersion: function () {
                  return this.$xmlVersion;
                },
                set_xmlVersion: function (tmp$0) {
                  this.$xmlVersion = tmp$0;
                },
                get_xmlCharset: function () {
                  return this.$xmlCharset;
                },
                set_xmlCharset: function (tmp$0) {
                  this.$xmlCharset = tmp$0;
                },
                get_tagName: function () {
                  return this.$tagName;
                },
                set_tagName: function (tmp$0) {
                  this.$tagName = tmp$0;
                },
                get_tagPrefix: function () {
                  return this.$tagPrefix;
                },
                set_tagPrefix: function (tmp$0) {
                  this.$tagPrefix = tmp$0;
                },
                get_attributesNames: function () {
                  return this.$attributesNames;
                },
                set_attributesNames: function (tmp$0) {
                  this.$attributesNames = tmp$0;
                },
                get_attributesPrefixes: function () {
                  return this.$attributesPrefixes;
                },
                set_attributesPrefixes: function (tmp$0) {
                  this.$attributesPrefixes = tmp$0;
                },
                get_attributesValues: function () {
                  return this.$attributesValues;
                },
                set_attributesValues: function (tmp$0) {
                  this.$attributesValues = tmp$0;
                },
                get_attributeName: function () {
                  return this.$attributeName;
                },
                set_attributeName: function (tmp$0) {
                  this.$attributeName = tmp$0;
                },
                get_attributePrefix: function () {
                  return this.$attributePrefix;
                },
                set_attributePrefix: function (tmp$0) {
                  this.$attributePrefix = tmp$0;
                },
                get_attributeValue: function () {
                  return this.$attributeValue;
                },
                set_attributeValue: function (tmp$0) {
                  this.$attributeValue = tmp$0;
                },
                get_readSingleton: function () {
                  return this.$readSingleton;
                },
                set_readSingleton: function (tmp$0) {
                  this.$readSingleton = tmp$0;
                },
                hasNext: function () {
                  return this.get_bytes().length - this.get_index() > 2;
                },
                getLocalName: function () {
                  return this.get_tagName();
                },
                getAttributeCount: function () {
                  return this.get_attributesNames().size();
                },
                getAttributeLocalName: function (i) {
                  return this.get_attributesNames().get(i);
                },
                getAttributePrefix: function (i) {
                  return this.get_attributesPrefixes().get(i);
                },
                getAttributeValue: function (i) {
                  return this.get_attributesValues().get(i);
                },
                readChar: function () {
                  return _.org.kevoree.modeling.api.util.ByteConverter.toChar(this.get_bytes()[this.set_index(this.get_index() + 1), this.get_index()]);
                },
                next: function () {
                  if (this.get_readSingleton()) {
                    this.set_readSingleton(false);
                    return _.org.kevoree.modeling.api.xmi.Token.get_END_TAG();
                  }
                  if (!this.hasNext()) {
                    return _.org.kevoree.modeling.api.xmi.Token.get_END_DOCUMENT();
                  }
                  this.get_attributesNames().clear();
                  this.get_attributesPrefixes().clear();
                  this.get_attributesValues().clear();
                  this.read_lessThan();
                  this.set_currentChar(this.readChar());
                  if (this.get_currentChar() === '?') {
                    this.set_currentChar(this.readChar());
                    this.read_xmlHeader();
                    return _.org.kevoree.modeling.api.xmi.Token.get_XML_HEADER();
                  }
                   else if (this.get_currentChar() === '!') {
                    do {
                      this.set_currentChar(this.readChar());
                    }
                     while (this.get_currentChar() !== '>');
                    return _.org.kevoree.modeling.api.xmi.Token.get_COMMENT();
                  }
                   else if (this.get_currentChar() === '/') {
                    this.set_currentChar(this.readChar());
                    this.read_closingTag();
                    return _.org.kevoree.modeling.api.xmi.Token.get_END_TAG();
                  }
                   else {
                    this.read_openTag();
                    if (this.get_currentChar() === '/') {
                      this.read_upperThan();
                      this.set_readSingleton(true);
                    }
                    return _.org.kevoree.modeling.api.xmi.Token.get_START_TAG();
                  }
                },
                read_lessThan: function () {
                  do {
                    this.set_currentChar(this.readChar());
                  }
                   while (this.get_currentChar() !== '<');
                },
                read_upperThan: function () {
                  while (this.get_currentChar() !== '>') {
                    this.set_currentChar(this.readChar());
                  }
                },
                read_xmlHeader: function () {
                  this.read_tagName();
                  this.read_attributes();
                  this.read_upperThan();
                },
                read_closingTag: function () {
                  this.read_tagName();
                  this.read_upperThan();
                },
                read_openTag: function () {
                  this.read_tagName();
                  if (this.get_currentChar() !== '>') {
                    this.read_attributes();
                  }
                },
                read_tagName: function () {
                  this.set_tagName('' + this.get_currentChar());
                  this.set_tagPrefix(null);
                  this.set_currentChar(this.readChar());
                  while (this.get_currentChar() !== ' ' && this.get_currentChar() !== '>') {
                    if (this.get_currentChar() === ':') {
                      this.set_tagPrefix(this.get_tagName());
                      this.set_tagName('');
                    }
                     else {
                      this.set_tagName(this.get_tagName() + this.get_currentChar());
                    }
                    this.set_currentChar(this.readChar());
                  }
                },
                read_attributes: function () {
                  var end_of_tag = false;
                  while (this.get_currentChar() === ' ') {
                    this.set_currentChar(this.readChar());
                  }
                  while (!end_of_tag) {
                    while (this.get_currentChar() !== '=') {
                      if (this.get_currentChar() === ':') {
                        this.set_attributePrefix(this.get_attributeName().toString());
                        this.get_attributeName().delete(0, this.get_attributeName().length());
                      }
                       else {
                        var tmp$0;
                        this.get_attributeName().append_0((tmp$0 = this.get_currentChar()) != null ? tmp$0 : Kotlin.throwNPE());
                      }
                      this.set_currentChar(this.readChar());
                    }
                    do {
                      this.set_currentChar(this.readChar());
                    }
                     while (this.get_currentChar() !== '"');
                    this.set_currentChar(this.readChar());
                    while (this.get_currentChar() !== '"') {
                      var tmp$1;
                      this.get_attributeValue().append_0((tmp$1 = this.get_currentChar()) != null ? tmp$1 : Kotlin.throwNPE());
                      this.set_currentChar(this.readChar());
                    }
                    this.get_attributesNames().add(this.get_attributeName().toString());
                    this.get_attributesPrefixes().add(this.get_attributePrefix());
                    this.get_attributesValues().add(this.get_attributeValue().toString());
                    this.get_attributeName().delete(0, this.get_attributeName().length());
                    this.set_attributePrefix(null);
                    this.get_attributeValue().delete(0, this.get_attributeValue().length());
                    do {
                      this.set_currentChar(this.readChar());
                      if (this.get_currentChar() === '?' || this.get_currentChar() === '/' || this.get_currentChar() === '-' || this.get_currentChar() === '>') {
                        end_of_tag = true;
                      }
                    }
                     while (!end_of_tag && this.get_currentChar() === ' ');
                  }
                }
              })
            }),
            compare: Kotlin.definePackage({
              ModelCompare: classes.c9
            }),
            json: Kotlin.definePackage({
              Token: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.json.Token.prototype */ {
                initialize: function (tokenType, value) {
                  this.$tokenType = tokenType;
                  this.$value = value;
                },
                get_tokenType: function () {
                  return this.$tokenType;
                },
                get_value: function () {
                  return this.$value;
                },
                toString: function () {
                  var tmp$0;
                  if (this.get_value() != null) {
                    tmp$0 = ' (' + this.get_value() + ')';
                  }
                   else {
                    tmp$0 = '';
                  }
                  var v = tmp$0;
                  var result = Kotlin.toString(this.get_tokenType()) + v;
                  return result;
                }
              }),
              Lexer: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.json.Lexer.prototype */ {
                initialize: function (inputStream) {
                  this.$inputStream = inputStream;
                  this.$bytes = this.get_inputStream().readBytes();
                  this.$EOF = new _.org.kevoree.modeling.api.json.Token(_.org.kevoree.modeling.api.json.Type.get_EOF(), null);
                  this.$index = 0;
                  this.$BOOLEAN_LETTERS = null;
                  this.$DIGIT = null;
                },
                get_inputStream: function () {
                  return this.$inputStream;
                },
                get_bytes: function () {
                  return this.$bytes;
                },
                get_EOF: function () {
                  return this.$EOF;
                },
                get_index: function () {
                  return this.$index;
                },
                set_index: function (tmp$0) {
                  this.$index = tmp$0;
                },
                isSpace: function (c) {
                  return c === ' ' || c === '\r' || c === '\n' || c === '\t';
                },
                nextChar: function () {
                  var tmp$0, tmp$1;
                  return _.org.kevoree.modeling.api.util.ByteConverter.toChar(this.get_bytes()[tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1]);
                },
                peekChar: function () {
                  return _.org.kevoree.modeling.api.util.ByteConverter.toChar(this.get_bytes()[this.get_index()]);
                },
                isDone: function () {
                  return this.get_index() >= this.get_bytes().length;
                },
                get_BOOLEAN_LETTERS: function () {
                  return this.$BOOLEAN_LETTERS;
                },
                set_BOOLEAN_LETTERS: function (tmp$0) {
                  this.$BOOLEAN_LETTERS = tmp$0;
                },
                isBooleanLetter: function (c) {
                  if (this.get_BOOLEAN_LETTERS() == null) {
                    this.set_BOOLEAN_LETTERS(new Kotlin.PrimitiveHashSet());
                    var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7;
                    ((tmp$0 = this.get_BOOLEAN_LETTERS()) != null ? tmp$0 : Kotlin.throwNPE()).add('f');
                    ((tmp$1 = this.get_BOOLEAN_LETTERS()) != null ? tmp$1 : Kotlin.throwNPE()).add('a');
                    ((tmp$2 = this.get_BOOLEAN_LETTERS()) != null ? tmp$2 : Kotlin.throwNPE()).add('l');
                    ((tmp$3 = this.get_BOOLEAN_LETTERS()) != null ? tmp$3 : Kotlin.throwNPE()).add('s');
                    ((tmp$4 = this.get_BOOLEAN_LETTERS()) != null ? tmp$4 : Kotlin.throwNPE()).add('e');
                    ((tmp$5 = this.get_BOOLEAN_LETTERS()) != null ? tmp$5 : Kotlin.throwNPE()).add('t');
                    ((tmp$6 = this.get_BOOLEAN_LETTERS()) != null ? tmp$6 : Kotlin.throwNPE()).add('r');
                    ((tmp$7 = this.get_BOOLEAN_LETTERS()) != null ? tmp$7 : Kotlin.throwNPE()).add('u');
                  }
                  var tmp$8;
                  return ((tmp$8 = this.get_BOOLEAN_LETTERS()) != null ? tmp$8 : Kotlin.throwNPE()).contains(c);
                },
                get_DIGIT: function () {
                  return this.$DIGIT;
                },
                set_DIGIT: function (tmp$0) {
                  this.$DIGIT = tmp$0;
                },
                isDigit: function (c) {
                  if (this.get_DIGIT() == null) {
                    this.set_DIGIT(new Kotlin.PrimitiveHashSet());
                    var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
                    ((tmp$0 = this.get_DIGIT()) != null ? tmp$0 : Kotlin.throwNPE()).add('0');
                    ((tmp$1 = this.get_DIGIT()) != null ? tmp$1 : Kotlin.throwNPE()).add('1');
                    ((tmp$2 = this.get_DIGIT()) != null ? tmp$2 : Kotlin.throwNPE()).add('2');
                    ((tmp$3 = this.get_DIGIT()) != null ? tmp$3 : Kotlin.throwNPE()).add('3');
                    ((tmp$4 = this.get_DIGIT()) != null ? tmp$4 : Kotlin.throwNPE()).add('4');
                    ((tmp$5 = this.get_DIGIT()) != null ? tmp$5 : Kotlin.throwNPE()).add('5');
                    ((tmp$6 = this.get_DIGIT()) != null ? tmp$6 : Kotlin.throwNPE()).add('6');
                    ((tmp$7 = this.get_DIGIT()) != null ? tmp$7 : Kotlin.throwNPE()).add('7');
                    ((tmp$8 = this.get_DIGIT()) != null ? tmp$8 : Kotlin.throwNPE()).add('8');
                    ((tmp$9 = this.get_DIGIT()) != null ? tmp$9 : Kotlin.throwNPE()).add('9');
                  }
                  var tmp$10;
                  return ((tmp$10 = this.get_DIGIT()) != null ? tmp$10 : Kotlin.throwNPE()).contains(c);
                },
                isValueLetter: function (c) {
                  return c === '-' || c === '+' || c === '.' || this.isDigit(c) || this.isBooleanLetter(c);
                },
                nextToken: function () {
                  if (this.isDone()) {
                    return this.get_EOF();
                  }
                  var tokenType = _.org.kevoree.modeling.api.json.Type.get_EOF();
                  var c = this.nextChar();
                  var currentValue = new _.java.lang.StringBuilder();
                  var jsonValue = null;
                  while (!this.isDone() && this.isSpace(c)) {
                    c = this.nextChar();
                  }
                  if ('"' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_VALUE();
                    if (!this.isDone()) {
                      c = this.nextChar();
                      while (this.get_index() < this.get_bytes().length && c !== '"') {
                        currentValue.append_0(c);
                        if (c === '\\' && this.get_index() < this.get_bytes().length) {
                          c = this.nextChar();
                          currentValue.append_0(c);
                        }
                        c = this.nextChar();
                      }
                      jsonValue = currentValue.toString();
                    }
                     else {
                      throw new Kotlin.RuntimeException('Unterminated string');
                    }
                  }
                   else if ('{' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACE();
                  }
                   else if ('}' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_RIGHT_BRACE();
                  }
                   else if ('[' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_LEFT_BRACKET();
                  }
                   else if (']' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_RIGHT_BRACKET();
                  }
                   else if (':' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_COLON();
                  }
                   else if (',' === c) {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_COMMA();
                  }
                   else if (!this.isDone()) {
                    while (this.isValueLetter(c)) {
                      currentValue.append_0(c);
                      if (!this.isValueLetter(this.peekChar())) {
                        break;
                      }
                       else {
                        c = this.nextChar();
                      }
                    }
                    var v = currentValue.toString();
                    if (Kotlin.equals('true', v.toLowerCase())) {
                      jsonValue = true;
                    }
                     else if (Kotlin.equals('false', v.toLowerCase())) {
                      jsonValue = false;
                    }
                     else {
                      jsonValue = v.toLowerCase();
                    }
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_VALUE();
                  }
                   else {
                    tokenType = _.org.kevoree.modeling.api.json.Type.get_EOF();
                  }
                  return new _.org.kevoree.modeling.api.json.Token(tokenType, jsonValue);
                }
              }),
              JSONModelLoader: classes.cb,
              ResolveCommand: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.json.ResolveCommand.prototype */ {
                initialize: function (roots, ref, currentRootElem, refName) {
                  this.$roots = roots;
                  this.$ref = ref;
                  this.$currentRootElem = currentRootElem;
                  this.$refName = refName;
                },
                get_roots: function () {
                  return this.$roots;
                },
                get_ref: function () {
                  return this.$ref;
                },
                get_currentRootElem: function () {
                  return this.$currentRootElem;
                },
                get_refName: function () {
                  return this.$refName;
                },
                run: function () {
                  var referencedElement = null;
                  var i = 0;
                  while (referencedElement == null && i < this.get_roots().size()) {
                    referencedElement = this.get_roots().get(i++).findByPath(this.get_ref());
                  }
                  if (referencedElement != null) {
                    this.get_currentRootElem().reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), this.get_refName(), referencedElement, false, false);
                  }
                   else {
                    throw new Error('Unresolved ' + this.get_ref());
                  }
                }
              }),
              ModelReferenceVisitor: Kotlin.createClass(classes.cj, /** @lends _.org.kevoree.modeling.api.json.ModelReferenceVisitor.prototype */ {
                initialize: function (out) {
                  this.$out = out;
                  this.super_init();
                  this.$isFirst = true;
                },
                get_out: function () {
                  return this.$out;
                },
                beginVisitRef: function (refName, refType) {
                  this.get_out().print(',"' + refName + '":[');
                  this.set_isFirst(true);
                },
                endVisitRef: function (refName) {
                  this.get_out().print(']');
                },
                get_isFirst: function () {
                  return this.$isFirst;
                },
                set_isFirst: function (tmp$0) {
                  this.$isFirst = tmp$0;
                },
                visit: function (elem, refNameInParent, parent) {
                  if (!this.get_isFirst()) {
                    this.get_out().print(',');
                  }
                   else {
                    this.set_isFirst(false);
                  }
                  this.get_out().print('"' + elem.path() + '"');
                }
              }),
              JSONModelSerializer: classes.cc
            }),
            events: Kotlin.definePackage({
              ModelElementListener: classes.cd,
              ModelEvent: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.events.ModelEvent.prototype */ {
                initialize: function (internal_sourcePath, internal_etype, internal_elementAttributeType, internal_elementAttributeName, internal_value) {
                  this.$internal_sourcePath = internal_sourcePath;
                  this.$internal_etype = internal_etype;
                  this.$internal_elementAttributeType = internal_elementAttributeType;
                  this.$internal_elementAttributeName = internal_elementAttributeName;
                  this.$internal_value = internal_value;
                },
                get_internal_sourcePath: function () {
                  return this.$internal_sourcePath;
                },
                get_internal_etype: function () {
                  return this.$internal_etype;
                },
                get_internal_elementAttributeType: function () {
                  return this.$internal_elementAttributeType;
                },
                get_internal_elementAttributeName: function () {
                  return this.$internal_elementAttributeName;
                },
                get_internal_value: function () {
                  return this.$internal_value;
                },
                getSourcePath: function () {
                  return this.get_internal_sourcePath();
                },
                getType: function () {
                  return this.get_internal_etype();
                },
                getElementAttributeType: function () {
                  return this.get_internal_elementAttributeType();
                },
                getElementAttributeName: function () {
                  return this.get_internal_elementAttributeName();
                },
                getValue: function () {
                  return this.get_internal_value();
                },
                toString: function () {
                  return 'ModelEvent[src:' + this.getSourcePath() + ', type:' + this.getType() + ', elementAttributeType:' + this.getElementAttributeType() + ', elementAttributeName:' + this.getElementAttributeName() + ', value:' + this.getValue() + ']';
                }
              }),
              ModelTreeListener: classes.ce
            }),
            trace: Kotlin.definePackage({
              TraceConverter: classes.cf,
              ModelTrace: classes.cg,
              ModelAddTrace: Kotlin.createClass(classes.cg, /** @lends _.org.kevoree.modeling.api.trace.ModelAddTrace.prototype */ {
                initialize: function (srcPath, refName, previousPath, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$previousPath = previousPath;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_previousPath: function () {
                  return this.$previousPath;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_ADD() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_previousPath() != null) {
                    buffer.append(', "previouspath" : "' + this.get_previousPath() + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.get_typeName() + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelAddAllTrace: Kotlin.createClass(classes.cg, /** @lends _.org.kevoree.modeling.api.trace.ModelAddAllTrace.prototype */ {
                initialize: function (srcPath, refName, previousPath, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$previousPath = previousPath;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_previousPath: function () {
                  return this.$previousPath;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                mkString: function (ss) {
                  if (ss == null) {
                    return null;
                  }
                  var buffer = new _.java.lang.StringBuilder();
                  var isFirst = true;
                  {
                    var tmp$0 = ss.iterator();
                    while (tmp$0.hasNext()) {
                      var s = tmp$0.next();
                      if (!isFirst) {
                        buffer.append(',');
                      }
                      buffer.append(s);
                      isFirst = false;
                    }
                  }
                  return buffer.toString();
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_previousPath() != null) {
                    buffer.append(', "previouspath" : "' + this.mkString(this.get_previousPath()) + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.mkString(this.get_typeName()) + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelRemoveTrace: Kotlin.createClass(classes.cg, /** @lends _.org.kevoree.modeling.api.trace.ModelRemoveTrace.prototype */ {
                initialize: function (srcPath, refName, objPath) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$objPath = objPath;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_objPath: function () {
                  return this.$objPath;
                },
                toString: function () {
                  return '{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_REMOVE() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '", "objpath" : "' + this.get_objPath() + '" }';
                }
              }),
              ModelRemoveAllTrace: Kotlin.createClass(classes.cg, /** @lends _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace.prototype */ {
                initialize: function (srcPath, refName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                toString: function () {
                  return '{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '" }';
                }
              }),
              ModelSetTrace: Kotlin.createClass(classes.cg, /** @lends _.org.kevoree.modeling.api.trace.ModelSetTrace.prototype */ {
                initialize: function (srcPath, refName, objPath, content, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$objPath = objPath;
                  this.$content = content;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_objPath: function () {
                  return this.$objPath;
                },
                get_content: function () {
                  return this.$content;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_SET() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_objPath() != null) {
                    buffer.append(', "objpath" : "' + this.get_objPath() + '"');
                  }
                  if (this.get_content() != null) {
                    buffer.append(', "content" : "' + this.get_content() + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.get_typeName() + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              DefaultTraceConverter: Kotlin.createClass(classes.cf, /** @lends _.org.kevoree.modeling.api.trace.DefaultTraceConverter.prototype */ {
                initialize: function () {
                  this.$metaClassNameEquivalence_1 = new Kotlin.PrimitiveHashMap(0);
                  this.$metaClassNameEquivalence_2 = new Kotlin.PrimitiveHashMap(0);
                  this.$attNameEquivalence_1 = new Kotlin.PrimitiveHashMap(0);
                  this.$attNameEquivalence_2 = new Kotlin.PrimitiveHashMap(0);
                },
                get_metaClassNameEquivalence_1: function () {
                  return this.$metaClassNameEquivalence_1;
                },
                set_metaClassNameEquivalence_1: function (tmp$0) {
                  this.$metaClassNameEquivalence_1 = tmp$0;
                },
                get_metaClassNameEquivalence_2: function () {
                  return this.$metaClassNameEquivalence_2;
                },
                set_metaClassNameEquivalence_2: function (tmp$0) {
                  this.$metaClassNameEquivalence_2 = tmp$0;
                },
                get_attNameEquivalence_1: function () {
                  return this.$attNameEquivalence_1;
                },
                set_attNameEquivalence_1: function (tmp$0) {
                  this.$attNameEquivalence_1 = tmp$0;
                },
                get_attNameEquivalence_2: function () {
                  return this.$attNameEquivalence_2;
                },
                set_attNameEquivalence_2: function (tmp$0) {
                  this.$attNameEquivalence_2 = tmp$0;
                },
                addMetaClassEquivalence: function (name1, name2) {
                  this.get_metaClassNameEquivalence_1().put(name1, name2);
                  this.get_metaClassNameEquivalence_2().put(name2, name2);
                },
                addAttEquivalence: function (name1, name2) {
                  var fqnArray_1 = Kotlin.splitString(name1, '#');
                  var fqnArray_2 = Kotlin.splitString(name1, '#');
                  this.get_attNameEquivalence_1().put(name1, name2);
                  this.get_attNameEquivalence_2().put(name2, name2);
                },
                convert: function (trace) {
                  if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                    var addTrace = trace != null ? trace : Kotlin.throwNPE();
                    var newTrace = new _.org.kevoree.modeling.api.trace.ModelAddTrace(addTrace.get_srcPath(), addTrace.get_refName(), addTrace.get_previousPath(), this.tryConvertClassName(addTrace.get_typeName()));
                    return newTrace;
                  }
                   else if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                    var setTrace = trace != null ? trace : Kotlin.throwNPE();
                    var newTrace_0 = new _.org.kevoree.modeling.api.trace.ModelSetTrace(setTrace.get_srcPath(), setTrace.get_refName(), setTrace.get_objPath(), setTrace.get_content(), this.tryConvertClassName(setTrace.get_typeName()));
                    return newTrace_0;
                  }
                   else {
                    return trace;
                  }
                },
                tryConvertPath: function (previousPath) {
                  if (previousPath == null) {
                    return null;
                  }
                  return previousPath;
                },
                tryConvertClassName: function (previousClassName) {
                  if (previousClassName == null) {
                    return null;
                  }
                  if (this.get_metaClassNameEquivalence_1().containsKey(previousClassName)) {
                    var tmp$0;
                    return (tmp$0 = this.get_metaClassNameEquivalence_1().get(previousClassName)) != null ? tmp$0 : Kotlin.throwNPE();
                  }
                  if (this.get_metaClassNameEquivalence_2().containsKey(previousClassName)) {
                    var tmp$1;
                    return (tmp$1 = this.get_metaClassNameEquivalence_2().get(previousClassName)) != null ? tmp$1 : Kotlin.throwNPE();
                  }
                  return previousClassName;
                },
                tryConvertAttName: function (previousAttName) {
                  if (previousAttName == null) {
                    return null;
                  }
                  var FQNattName = previousAttName;
                  if (this.get_attNameEquivalence_1().containsKey(FQNattName)) {
                    var tmp$0;
                    return (tmp$0 = this.get_attNameEquivalence_1().get(FQNattName)) != null ? tmp$0 : Kotlin.throwNPE();
                  }
                  if (this.get_attNameEquivalence_2().containsKey(FQNattName)) {
                    var tmp$1;
                    return (tmp$1 = this.get_attNameEquivalence_2().get(FQNattName)) != null ? tmp$1 : Kotlin.throwNPE();
                  }
                  return previousAttName;
                }
              }),
              ModelTraceApplicator: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.trace.ModelTraceApplicator.prototype */ {
                initialize: function (targetModel, factory) {
                  this.$targetModel = targetModel;
                  this.$factory = factory;
                  this.$pendingObj = null;
                  this.$pendingParent = null;
                  this.$pendingParentRefName = null;
                  this.$pendingObjPath = null;
                },
                get_targetModel: function () {
                  return this.$targetModel;
                },
                get_factory: function () {
                  return this.$factory;
                },
                get_pendingObj: function () {
                  return this.$pendingObj;
                },
                set_pendingObj: function (tmp$0) {
                  this.$pendingObj = tmp$0;
                },
                get_pendingParent: function () {
                  return this.$pendingParent;
                },
                set_pendingParent: function (tmp$0) {
                  this.$pendingParent = tmp$0;
                },
                get_pendingParentRefName: function () {
                  return this.$pendingParentRefName;
                },
                set_pendingParentRefName: function (tmp$0) {
                  this.$pendingParentRefName = tmp$0;
                },
                get_pendingObjPath: function () {
                  return this.$pendingObjPath;
                },
                set_pendingObjPath: function (tmp$0) {
                  this.$pendingObjPath = tmp$0;
                },
                tryClosePending: function (srcPath) {
                  if (this.get_pendingObj() != null && !Kotlin.equals(this.get_pendingObjPath(), srcPath)) {
                    var tmp$0, tmp$1;
                    ((tmp$0 = this.get_pendingParent()) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), (tmp$1 = this.get_pendingParentRefName()) != null ? tmp$1 : Kotlin.throwNPE(), this.get_pendingObj(), true, true);
                    this.set_pendingObj(null);
                    this.set_pendingObjPath(null);
                    this.set_pendingParentRefName(null);
                    this.set_pendingParent(null);
                  }
                },
                createOrAdd: function (previousPath, target, refName, potentialTypeName) {
                  var tmp$0;
                  if (previousPath != null) {
                    tmp$0 = this.get_targetModel().findByPath(previousPath);
                  }
                   else {
                    tmp$0 = null;
                  }
                  var targetElem = tmp$0;
                  if (targetElem != null) {
                    target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), refName, targetElem, true, true);
                  }
                   else {
                    this.set_pendingObj(this.get_factory().create(potentialTypeName != null ? potentialTypeName : Kotlin.throwNPE()));
                    this.set_pendingObjPath(previousPath);
                    this.set_pendingParentRefName(refName);
                    this.set_pendingParent(target);
                  }
                },
                applyTraceOnModel: function (traceSeq) {
                  {
                    var tmp$0 = traceSeq.get_traces().iterator();
                    while (tmp$0.hasNext()) {
                      var trace = tmp$0.next();
                      var target = this.get_targetModel();
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                        var castedTrace = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(null);
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          var tmp$1;
                          target = (tmp$1 = this.get_targetModel().findByPath(castedTrace.get_srcPath())) != null ? tmp$1 : Kotlin.throwNPE();
                        }
                        this.createOrAdd(castedTrace.get_previousPath(), target, castedTrace.get_refName(), castedTrace.get_typeName());
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddAllTrace)) {
                        var castedTrace_0 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(null);
                        var i = 0;
                        var tmp$2;
                        {
                          var tmp$3 = ((tmp$2 = castedTrace_0.get_previousPath()) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                          while (tmp$3.hasNext()) {
                            var path = tmp$3.next();
                            var tmp$4;
                            this.createOrAdd(path, target, castedTrace_0.get_refName(), ((tmp$4 = castedTrace_0.get_typeName()) != null ? tmp$4 : Kotlin.throwNPE()).get(i));
                            i++;
                          }
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveTrace)) {
                        var castedTrace_1 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(trace.get_srcPath());
                        var tempTarget = this.get_targetModel();
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          tempTarget = this.get_targetModel().findByPath(castedTrace_1.get_srcPath());
                        }
                        if (tempTarget != null) {
                          (tempTarget != null ? tempTarget : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), castedTrace_1.get_refName(), this.get_targetModel().findByPath(castedTrace_1.get_objPath()), true, true);
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace)) {
                        var castedTrace_2 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(trace.get_srcPath());
                        var tempTarget_0 = this.get_targetModel();
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          tempTarget_0 = this.get_targetModel().findByPath(castedTrace_2.get_srcPath());
                        }
                        if (tempTarget_0 != null) {
                          (tempTarget_0 != null ? tempTarget_0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), castedTrace_2.get_refName(), null, true, true);
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                        var castedTrace_3 = trace != null ? trace : Kotlin.throwNPE();
                        this.tryClosePending(trace.get_srcPath());
                        if (!Kotlin.equals(trace.get_srcPath(), '') && !Kotlin.equals(castedTrace_3.get_srcPath(), this.get_pendingObjPath())) {
                          var tempObject = this.get_targetModel().findByPath(castedTrace_3.get_srcPath());
                          if (tempObject == null) {
                            throw new Error('Set Trace source not found for path : ' + castedTrace_3.get_srcPath() + '/ pending ' + this.get_pendingObjPath() + '\n' + trace.toString());
                          }
                          target = tempObject != null ? tempObject : Kotlin.throwNPE();
                        }
                         else {
                          if (Kotlin.equals(castedTrace_3.get_srcPath(), this.get_pendingObjPath()) && this.get_pendingObj() != null) {
                            var tmp$5;
                            target = (tmp$5 = this.get_pendingObj()) != null ? tmp$5 : Kotlin.throwNPE();
                          }
                        }
                        if (castedTrace_3.get_content() != null) {
                          target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), castedTrace_3.get_content(), true, true);
                        }
                         else {
                          var tmp$7;
                          if (castedTrace_3.get_objPath() != null) {
                            var tmp$6;
                            tmp$7 = this.get_targetModel().findByPath((tmp$6 = castedTrace_3.get_objPath()) != null ? tmp$6 : Kotlin.throwNPE());
                          }
                           else {
                            tmp$7 = null;
                          }
                          var targetContentPath = tmp$7;
                          if (targetContentPath != null) {
                            target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), targetContentPath, true, true);
                          }
                           else {
                            if (castedTrace_3.get_typeName() != null && !Kotlin.equals(castedTrace_3.get_typeName(), '')) {
                              this.createOrAdd(castedTrace_3.get_objPath(), target, castedTrace_3.get_refName(), castedTrace_3.get_typeName());
                            }
                             else {
                              target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), targetContentPath, true, true);
                            }
                          }
                        }
                      }
                    }
                  }
                  this.tryClosePending(null);
                }
              }),
              Event2Trace: Kotlin.createClass(null, /** @lends _.org.kevoree.modeling.api.trace.Event2Trace.prototype */ {
                initialize: function (compare) {
                  this.$compare = compare;
                },
                get_compare: function () {
                  return this.$compare;
                },
                convert: function (event) {
                  var result = new Kotlin.ArrayList(0);
                  var tmp$0 = event.getType();
                  if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                    var tmp$1, tmp$2, tmp$3, tmp$4;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$1 = event.getSourcePath()) != null ? tmp$1 : Kotlin.throwNPE(), (tmp$2 = event.getElementAttributeName()) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$4 = ((tmp$3 = event.getValue()) != null ? tmp$3 : Kotlin.throwNPE()).path()) != null ? tmp$4 : Kotlin.throwNPE()));
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                    var tmp$5, tmp$6;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$5 = event.getSourcePath()) != null ? tmp$5 : Kotlin.throwNPE(), (tmp$6 = event.getElementAttributeName()) != null ? tmp$6 : Kotlin.throwNPE()));
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                    var tmp$7, tmp$8, tmp$9;
                    var casted = (tmp$7 = event.getValue()) != null ? tmp$7 : Kotlin.throwNPE();
                    var traces = this.get_compare().inter(casted, casted);
                    result.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$8 = event.getSourcePath()) != null ? tmp$8 : Kotlin.throwNPE(), (tmp$9 = event.getElementAttributeName()) != null ? tmp$9 : Kotlin.throwNPE(), casted.path(), casted.metaClassName()));
                    result.addAll(traces.get_traces());
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                    var tmp$10;
                    var casted_0 = (tmp$10 = event.getValue()) != null ? tmp$10 : Kotlin.throwNPE();
                    {
                      var tmp$11 = (casted_0 != null ? casted_0 : Kotlin.throwNPE()).iterator();
                      while (tmp$11.hasNext()) {
                        var elem = tmp$11.next();
                        var elemCasted = elem != null ? elem : Kotlin.throwNPE();
                        var traces_0 = this.get_compare().inter(elemCasted, elemCasted);
                        var tmp$12, tmp$13;
                        result.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$12 = event.getSourcePath()) != null ? tmp$12 : Kotlin.throwNPE(), (tmp$13 = event.getElementAttributeName()) != null ? tmp$13 : Kotlin.throwNPE(), elemCasted.path(), elemCasted.metaClassName()));
                        result.addAll(traces_0.get_traces());
                      }
                    }
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                    if (event.getElementAttributeType() === _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE()) {
                      var tmp$14, tmp$15;
                      result.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = event.getSourcePath()) != null ? tmp$14 : Kotlin.throwNPE(), (tmp$15 = event.getElementAttributeName()) != null ? tmp$15 : Kotlin.throwNPE(), null, Kotlin.toString(event.getValue()), null));
                    }
                     else {
                      var tmp$16, tmp$17, tmp$18;
                      result.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = event.getSourcePath()) != null ? tmp$16 : Kotlin.throwNPE(), (tmp$17 = event.getElementAttributeName()) != null ? tmp$17 : Kotlin.throwNPE(), ((tmp$18 = event.getValue()) != null ? tmp$18 : Kotlin.throwNPE()).path(), null, null));
                    }
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  }
                   else {
                    throw new Error("Can't convert event : " + event);
                  }
                  return this.get_compare().createSequence().populate(result);
                }
              }),
              TraceSequence: classes.ch
            }),
            util: Kotlin.definePackage({
              ModelVisitor: classes.cj,
              ModelAttributeVisitor: classes.ck
            })
          })
        }),
        log: Kotlin.definePackage({
          Logger: Kotlin.createClass(null, /** @lends _.org.kevoree.log.Logger.prototype */ {
            initialize: function () {
              this.$firstLogTime = (new Date()).getTime();
              this.$error_msg = ' ERROR: ';
              this.$warn_msg = ' WARN: ';
              this.$info_msg = ' INFO: ';
              this.$debug_msg = ' DEBUG: ';
              this.$trace_msg = ' TRACE: ';
              this.$category = null;
            },
            get_firstLogTime: function () {
              return this.$firstLogTime;
            },
            get_error_msg: function () {
              return this.$error_msg;
            },
            get_warn_msg: function () {
              return this.$warn_msg;
            },
            get_info_msg: function () {
              return this.$info_msg;
            },
            get_debug_msg: function () {
              return this.$debug_msg;
            },
            get_trace_msg: function () {
              return this.$trace_msg;
            },
            get_category: function () {
              return this.$category;
            },
            set_category: function (tmp$0) {
              this.$category = tmp$0;
            },
            setCategory: function (category) {
              this.set_category(category);
            },
            log: function (level, message, ex) {
              var builder = new _.java.lang.StringBuilder();
              var time = (new Date()).getTime() - this.get_firstLogTime();
              var minutes = time / (1000 * 60) | 0;
              var seconds = (time / 1000 | 0) % 60;
              if (minutes <= 9)
                builder.append_0('0');
              builder.append(Kotlin.toString(minutes));
              builder.append_0(':');
              if (seconds <= 9)
                builder.append_0('0');
              builder.append(Kotlin.toString(seconds));
              if (level === _.org.kevoree.log.Log.get_LEVEL_ERROR()) {
                builder.append(this.get_error_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_WARN()) {
                builder.append(this.get_warn_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_INFO()) {
                builder.append(this.get_info_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_DEBUG()) {
                builder.append(this.get_debug_msg());
              }
               else if (level === _.org.kevoree.log.Log.get_LEVEL_TRACE()) {
                builder.append(this.get_trace_msg());
              }
               else {
              }
              if (this.get_category() != null) {
                builder.append_0('[');
                var tmp$0;
                builder.append(((tmp$0 = this.get_category()) != null ? tmp$0 : Kotlin.throwNPE()).toString());
                builder.append('] ');
              }
              builder.append(message);
              if (ex != null) {
                builder.append(Kotlin.toString(ex.getMessage()));
              }
              this.print(builder.toString());
            },
            print: function (message) {
              Kotlin.println(message);
            }
          })
        }),
        container: Kotlin.definePackage({
          KMFContainerImpl: classes.cv,
          RemoveFromContainerCommand: Kotlin.createClass(null, /** @lends _.org.kevoree.container.RemoveFromContainerCommand.prototype */ {
            initialize: function (target, mutatorType, refName, element) {
              this.$target = target;
              this.$mutatorType = mutatorType;
              this.$refName = refName;
              this.$element = element;
            },
            get_target: function () {
              return this.$target;
            },
            get_mutatorType: function () {
              return this.$mutatorType;
            },
            get_refName: function () {
              return this.$refName;
            },
            get_element: function () {
              return this.$element;
            },
            run: function () {
              this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), this.get_element(), true, true);
            }
          })
        }),
        serializer: Kotlin.definePackage({
          XMIModelSerializer: Kotlin.createClass(classes.c7, /** @lends _.org.kevoree.serializer.XMIModelSerializer.prototype */ {
            initialize: function () {
              this.super_init();
            }
          }),
          JSONModelSerializer: Kotlin.createClass(classes.cc, /** @lends _.org.kevoree.serializer.JSONModelSerializer.prototype */ {
            initialize: function () {
              this.super_init();
            }
          })
        }),
        cloner: Kotlin.definePackage({
          DefaultModelCloner: Kotlin.createClass(classes.c8, /** @lends _.org.kevoree.cloner.DefaultModelCloner.prototype */ {
            initialize: function () {
              this.$mainFactory = new _.org.kevoree.factory.MainFactory();
            },
            createContext: function () {
              return new Kotlin.ComplexHashMap(0);
            },
            get_mainFactory: function () {
              return this.$mainFactory;
            },
            set_mainFactory: function (tmp$0) {
              this.$mainFactory = tmp$0;
            }
          })
        }),
        compare: Kotlin.definePackage({
          DefaultModelCompare: Kotlin.createClass(classes.c9, /** @lends _.org.kevoree.compare.DefaultModelCompare.prototype */ {
            initialize: function () {
            },
            createSequence: function () {
              return new _.org.kevoree.trace.DefaultTraceSequence();
            }
          })
        }),
        factory: Kotlin.definePackage({
          MainFactory: Kotlin.createClass(classes.c5, /** @lends _.org.kevoree.factory.MainFactory.prototype */ {
            initialize: function () {
              this.$factories = Kotlin.arrayFromFun(1, function (i) {
                return null;
              });
              this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = new _.org.kevoree.impl.DefaultKevoreeFactory();
            },
            get_factories: function () {
              return this.$factories;
            },
            set_factories: function (tmp$0) {
              this.$factories = tmp$0;
            },
            getFactoryForPackage: function (pack) {
              return this.get_factories()[pack];
            },
            getKevoreeFactory: function () {
              var tmp$0;
              return (tmp$0 = this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()]) != null ? tmp$0 : Kotlin.throwNPE();
            },
            setKevoreeFactory: function (fct) {
              this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = fct;
            },
            create: function (metaClassName) {
              var pack = _.org.kevoree.factory.Package.getPackageForName(metaClassName);
              if (pack !== -1) {
                var tmp$0;
                return (tmp$0 = this.getFactoryForPackage(pack)) != null ? tmp$0.create(metaClassName) : null;
              }
               else {
                var tmp$1, tmp$2, tmp$3, tmp$4;
                {
                  tmp$1 = Kotlin.arrayIndices(this.get_factories()), tmp$2 = tmp$1.get_start(), tmp$3 = tmp$1.get_end(), tmp$4 = tmp$1.get_increment();
                  for (var i = tmp$2; i <= tmp$3; i += tmp$4) {
                    var tmp$5;
                    var obj = ((tmp$5 = this.get_factories()[i]) != null ? tmp$5 : Kotlin.throwNPE()).create(metaClassName);
                    if (obj != null) {
                      return obj;
                    }
                  }
                }
                return null;
              }
            }
          })
        }),
        trace: Kotlin.definePackage({
          DefaultTraceSequence: Kotlin.createClass(classes.ch, /** @lends _.org.kevoree.trace.DefaultTraceSequence.prototype */ {
            initialize: function () {
              this.$traces = new Kotlin.ArrayList(0);
              this.$factory = new _.org.kevoree.factory.MainFactory();
            },
            get_traces: function () {
              return this.$traces;
            },
            set_traces: function (tmp$0) {
              this.$traces = tmp$0;
            },
            get_factory: function () {
              return this.$factory;
            },
            set_factory: function (tmp$0) {
              this.$factory = tmp$0;
            }
          })
        }),
        util: Kotlin.definePackage({
        })
      }),
      w3c: Kotlin.definePackage({
        dom: Kotlin.definePackage({
          events: Kotlin.definePackage({
            EventListener: classes.c1p
          })
        })
      })
    }),
    js: Kotlin.definePackage({
      toChar: function ($receiver) {
        return $receiver != null ? $receiver : Kotlin.throwNPE();
      },
      lastIndexOf: function ($receiver, ch, fromIndex) {
        return $receiver.lastIndexOf(Kotlin.toString(ch), fromIndex);
      },
      lastIndexOf_0: function ($receiver, ch) {
        return $receiver.lastIndexOf(Kotlin.toString(ch));
      },
      indexOf: function ($receiver, ch) {
        return $receiver.indexOf(Kotlin.toString(ch));
      },
      indexOf_0: function ($receiver, ch, fromIndex) {
        return $receiver.indexOf(Kotlin.toString(ch), fromIndex);
      },
      matches: function ($receiver, regex) {
        var result = $receiver.match(regex);
        return result != null && result.length > 0;
      },
      capitalize: function ($receiver) {
        return _.kotlin.isNotEmpty($receiver) ? $receiver.substring(0, 1).toUpperCase() + $receiver.substring(1) : $receiver;
      },
      decapitalize: function ($receiver) {
        return _.kotlin.isNotEmpty($receiver) ? $receiver.substring(0, 1).toLowerCase() + $receiver.substring(1) : $receiver;
      }
    }),
    java: Kotlin.definePackage({
      lang: Kotlin.definePackage({
        StringBuilder: Kotlin.createClass(null, /** @lends _.java.lang.StringBuilder.prototype */ {
          initialize: function () {
            this.$content = '';
          },
          get_content: function () {
            return this.$content;
          },
          set_content: function (tmp$0) {
            this.$content = tmp$0;
          },
          append: function (sub) {
            this.set_content(this.get_content() + sub);
          },
          append_0: function (sub) {
            this.set_content(this.get_content() + sub);
          },
          delete: function (startIndex, endIndex) {
            this.set_content('');
          },
          length: function () {
            return this.get_content().length;
          },
          toString: function () {
            return this.get_content();
          }
        })
      }),
      io: Kotlin.definePackage({
        InputStream: classes.c1n,
        OutputStream: classes.c1o,
        BufferedOutputStream: Kotlin.createClass(classes.c1o, /** @lends _.java.io.BufferedOutputStream.prototype */ {
          initialize: function (oo) {
            this.$oo = oo;
          },
          get_oo: function () {
            return this.$oo;
          },
          write: function (s) {
            var tmp$0;
            ((tmp$0 = this.get_oo()) != null ? tmp$0 : Kotlin.throwNPE()).set_result(s);
          }
        }),
        ByteArrayInputStream: Kotlin.createClass(classes.c1n, /** @lends _.java.io.ByteArrayInputStream.prototype */ {
          initialize: function (inputBytes) {
            this.$inputBytes = inputBytes;
          },
          get_inputBytes: function () {
            return this.$inputBytes;
          },
          readBytes: function () {
            return this.get_inputBytes();
          }
        }),
        ByteArrayOutputStream: Kotlin.createClass(classes.c1o, /** @lends _.java.io.ByteArrayOutputStream.prototype */ {
          initialize: function () {
            this.$result = '';
          },
          flush: function () {
          },
          close: function () {
          },
          toString: function () {
            return this.get_result();
          },
          get_result: function () {
            return this.$result;
          },
          set_result: function (tmp$0) {
            this.$result = tmp$0;
          }
        }),
        PrintStream: Kotlin.createClass(null, /** @lends _.java.io.PrintStream.prototype */ {
          initialize: function (oo, autoflush) {
            this.$oo = oo;
            this.$result = '';
          },
          get_oo: function () {
            return this.$oo;
          },
          get_result: function () {
            return this.$result;
          },
          set_result: function (tmp$0) {
            this.$result = tmp$0;
          },
          println_1: function () {
            this.set_result(this.get_result() + '\n');
          },
          print: function (s) {
            this.set_result(this.get_result() + s);
          },
          println: function (s) {
            this.print(s);
            this.println_1();
          },
          print_0: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_1: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_2: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_3: function (s) {
            if (s) {
              this.set_result(this.get_result() + 'true');
            }
             else {
              this.set_result(this.get_result() + 'false');
            }
          },
          println_0: function (s) {
            this.print_0(s);
            this.println_1();
          },
          flush: function () {
            var tmp$0;
            ((tmp$0 = this.get_oo()) != null ? tmp$0 : Kotlin.throwNPE()).write(this.get_result());
          },
          close: function () {
          }
        })
      }),
      util: Kotlin.definePackage({
        Collections: Kotlin.definePackage({
        })
      })
    })
  };
  (function () {
    this.Token = Kotlin.createObject(null, {
      initialize: function () {
        this.$XML_HEADER = 0;
        this.$END_DOCUMENT = 1;
        this.$START_TAG = 2;
        this.$END_TAG = 3;
        this.$COMMENT = 4;
        this.$SINGLETON_TAG = 5;
      },
      get_XML_HEADER: function () {
        return this.$XML_HEADER;
      },
      get_END_DOCUMENT: function () {
        return this.$END_DOCUMENT;
      },
      get_START_TAG: function () {
        return this.$START_TAG;
      },
      get_END_TAG: function () {
        return this.$END_TAG;
      },
      get_COMMENT: function () {
        return this.$COMMENT;
      },
      get_SINGLETON_TAG: function () {
        return this.$SINGLETON_TAG;
      }
    });
  }.call(_.org.kevoree.modeling.api.xmi));
  (function () {
    this.Type = Kotlin.createObject(null, {
      initialize: function () {
        this.$VALUE = 0;
        this.$LEFT_BRACE = 1;
        this.$RIGHT_BRACE = 2;
        this.$LEFT_BRACKET = 3;
        this.$RIGHT_BRACKET = 4;
        this.$COMMA = 5;
        this.$COLON = 6;
        this.$EOF = 42;
      },
      get_VALUE: function () {
        return this.$VALUE;
      },
      get_LEFT_BRACE: function () {
        return this.$LEFT_BRACE;
      },
      get_RIGHT_BRACE: function () {
        return this.$RIGHT_BRACE;
      },
      get_LEFT_BRACKET: function () {
        return this.$LEFT_BRACKET;
      },
      get_RIGHT_BRACKET: function () {
        return this.$RIGHT_BRACKET;
      },
      get_COMMA: function () {
        return this.$COMMA;
      },
      get_COLON: function () {
        return this.$COLON;
      },
      get_EOF: function () {
        return this.$EOF;
      }
    });
  }.call(_.org.kevoree.modeling.api.json));
  (function () {
    this.ElementAttributeType = Kotlin.createObject(null, {
      initialize: function () {
        this.$ATTRIBUTE = 0;
        this.$REFERENCE = 1;
        this.$CONTAINMENT = 2;
      },
      get_ATTRIBUTE: function () {
        return this.$ATTRIBUTE;
      },
      get_REFERENCE: function () {
        return this.$REFERENCE;
      },
      get_CONTAINMENT: function () {
        return this.$CONTAINMENT;
      }
    });
    this.ActionType = Kotlin.createObject(null, {
      initialize: function () {
        this.$SET = 0;
        this.$ADD = 1;
        this.$REMOVE = 2;
        this.$ADD_ALL = 3;
        this.$REMOVE_ALL = 4;
        this.$RENEW_INDEX = 5;
      },
      get_SET: function () {
        return this.$SET;
      },
      get_ADD: function () {
        return this.$ADD;
      },
      get_REMOVE: function () {
        return this.$REMOVE;
      },
      get_ADD_ALL: function () {
        return this.$ADD_ALL;
      },
      get_REMOVE_ALL: function () {
        return this.$REMOVE_ALL;
      },
      get_RENEW_INDEX: function () {
        return this.$RENEW_INDEX;
      }
    });
    this.ByteConverter = Kotlin.createObject(null, {
      initialize: function () {
      },
      toChar: function (b) {
        return b != null ? b : Kotlin.throwNPE();
      },
      fromChar: function (b) {
        return b != null ? b : Kotlin.throwNPE();
      },
      byteArrayInputStreamFromString: function (str) {
        var bytes = Kotlin.numberArrayOfSize(str.length);
        var i = 0;
        while (i < str.length) {
          var tmp$0;
          bytes[i] = (tmp$0 = str.charAt(i)) != null ? tmp$0 : Kotlin.throwNPE();
          i = i + 1;
        }
        return new _.java.io.ByteArrayInputStream(bytes);
      }
    });
  }.call(_.org.kevoree.modeling.api.util));
  (function () {
    this.Log = Kotlin.createObject(null, {
      initialize: function () {
        this.$LEVEL_NONE = 6;
        this.$LEVEL_ERROR = 5;
        this.$LEVEL_WARN = 4;
        this.$LEVEL_INFO = 3;
        this.$LEVEL_DEBUG = 2;
        this.$LEVEL_TRACE = 1;
        this.$level = this.get_LEVEL_INFO();
        this.$ERROR = this.get_level() <= this.get_LEVEL_ERROR();
        this.$WARN = this.get_level() <= this.get_LEVEL_WARN();
        this.$INFO = this.get_level() <= this.get_LEVEL_INFO();
        this.$DEBUG = this.get_level() <= this.get_LEVEL_DEBUG();
        this.$TRACE = this.get_level() <= this.get_LEVEL_TRACE();
        this.$logger = new _.org.kevoree.log.Logger();
        this.$beginParam = '{';
        this.$endParam = '}';
      },
      get_LEVEL_NONE: function () {
        return this.$LEVEL_NONE;
      },
      get_LEVEL_ERROR: function () {
        return this.$LEVEL_ERROR;
      },
      get_LEVEL_WARN: function () {
        return this.$LEVEL_WARN;
      },
      get_LEVEL_INFO: function () {
        return this.$LEVEL_INFO;
      },
      get_LEVEL_DEBUG: function () {
        return this.$LEVEL_DEBUG;
      },
      get_LEVEL_TRACE: function () {
        return this.$LEVEL_TRACE;
      },
      get_level: function () {
        return this.$level;
      },
      set_level: function (tmp$0) {
        this.$level = tmp$0;
      },
      get_ERROR: function () {
        return this.$ERROR;
      },
      set_ERROR: function (tmp$0) {
        this.$ERROR = tmp$0;
      },
      get_WARN: function () {
        return this.$WARN;
      },
      set_WARN: function (tmp$0) {
        this.$WARN = tmp$0;
      },
      get_INFO: function () {
        return this.$INFO;
      },
      set_INFO: function (tmp$0) {
        this.$INFO = tmp$0;
      },
      get_DEBUG: function () {
        return this.$DEBUG;
      },
      set_DEBUG: function (tmp$0) {
        this.$DEBUG = tmp$0;
      },
      get_TRACE: function () {
        return this.$TRACE;
      },
      set_TRACE: function (tmp$0) {
        this.$TRACE = tmp$0;
      },
      set: function (level) {
        _.org.kevoree.log.Log.set_level(level);
        this.set_ERROR(level <= this.get_LEVEL_ERROR());
        this.set_WARN(level <= this.get_LEVEL_WARN());
        this.set_INFO(level <= this.get_LEVEL_INFO());
        this.set_DEBUG(level <= this.get_LEVEL_DEBUG());
        this.set_TRACE(level <= this.get_LEVEL_TRACE());
      },
      NONE: function () {
        this.set(this.get_LEVEL_NONE());
      },
      ERROR: function () {
        this.set(this.get_LEVEL_ERROR());
      },
      WARN: function () {
        this.set(this.get_LEVEL_WARN());
      },
      INFO: function () {
        this.set(this.get_LEVEL_INFO());
      },
      DEBUG: function () {
        this.set(this.get_LEVEL_DEBUG());
      },
      TRACE: function () {
        this.set(this.get_LEVEL_TRACE());
      },
      setLogger: function (logger) {
        _.org.kevoree.log.Log.set_logger(logger);
      },
      get_logger: function () {
        return this.$logger;
      },
      set_logger: function (tmp$0) {
        this.$logger = tmp$0;
      },
      get_beginParam: function () {
        return this.$beginParam;
      },
      get_endParam: function () {
        return this.$endParam;
      },
      processMessage: function (message, p1, p2, p3, p4, p5) {
        if (p1 == null) {
          return message;
        }
        var buffer = new _.java.lang.StringBuilder();
        var previousCharfound = false;
        var param = 0;
        var i = 0;
        while (i < message.length) {
          var currentChar = message.charAt(i);
          if (previousCharfound) {
            if (currentChar === this.get_endParam()) {
              param++;
              if (param === 1) {
                buffer = new _.java.lang.StringBuilder();
                buffer.append(message.substring(0, i - 1));
                buffer.append(Kotlin.toString(p1 != null ? p1 : Kotlin.throwNPE()));
              }
               else if (param === 2) {
                buffer.append(Kotlin.toString(p2 != null ? p2 : Kotlin.throwNPE()));
              }
               else if (param === 3) {
                buffer.append(Kotlin.toString(p3 != null ? p3 : Kotlin.throwNPE()));
              }
               else if (param === 4) {
                buffer.append(Kotlin.toString(p4 != null ? p4 : Kotlin.throwNPE()));
              }
               else if (param === 5) {
                buffer.append(Kotlin.toString(p5 != null ? p5 : Kotlin.throwNPE()));
              }
               else {
              }
              previousCharfound = false;
            }
             else {
              if (buffer != null) {
                message.charAt(i - 1);
                buffer.append_0(currentChar);
              }
              previousCharfound = false;
            }
          }
           else {
            if (currentChar === this.get_beginParam()) {
              previousCharfound = true;
            }
             else {
              if (buffer != null) {
                buffer.append_0(currentChar);
              }
            }
          }
          i = i + 1;
        }
        if (buffer != null) {
          return buffer.toString();
        }
         else {
          return message;
        }
      },
      error: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_ERROR()) {
          this.internal_error(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      error_0: function (message, p1, p2, p3, p4, p5) {
        if (this.get_ERROR()) {
          this.internal_error(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      internal_error: function (message, ex) {
        this.get_logger().log(this.get_LEVEL_ERROR(), message, ex);
      },
      warn: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_WARN()) {
          this.internal_warn(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      warn_0: function (message, p1, p2, p3, p4, p5) {
        if (this.get_WARN()) {
          this.internal_warn(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      internal_warn: function (message, ex) {
        this.get_logger().log(this.get_LEVEL_WARN(), message, ex);
      },
      info: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_INFO()) {
          this.internal_info(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      info_0: function (message, p1, p2, p3, p4, p5) {
        if (this.get_INFO()) {
          this.internal_info(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      internal_info: function (message, ex) {
        this.get_logger().log(this.get_LEVEL_INFO(), message, ex);
      },
      debug: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_DEBUG()) {
          this.internal_debug(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      debug_0: function (message, p1, p2, p3, p4, p5) {
        if (this.get_DEBUG()) {
          this.internal_debug(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      internal_debug: function (message, ex) {
        this.get_logger().log(this.get_LEVEL_DEBUG(), message, ex);
      },
      trace: function (message, ex, p1, p2, p3, p4, p5) {
        if (this.get_TRACE()) {
          this.internal_trace(this.processMessage(message, p1, p2, p3, p4, p5), ex);
        }
      },
      trace_0: function (message, p1, p2, p3, p4, p5) {
        if (this.get_TRACE()) {
          this.internal_trace(this.processMessage(message, p1, p2, p3, p4, p5), null);
        }
      },
      internal_trace: function (message, ex) {
        this.get_logger().log(this.get_LEVEL_TRACE(), message, ex);
      }
    });
  }.call(_.org.kevoree.log));
  (function () {
    this.Package = Kotlin.createObject(null, {
      initialize: function () {
        this.$ORG_KEVOREE = 0;
      },
      get_ORG_KEVOREE: function () {
        return this.$ORG_KEVOREE;
      },
      getPackageForName: function (metaClassName) {
        if (metaClassName.startsWith('org.kevoree')) {
          return 0;
        }
        return -1;
      }
    });
  }.call(_.org.kevoree.factory));
  (function () {
    this.Constants = Kotlin.createObject(null, {
      initialize: function () {
        this.$UNKNOWN_MUTATION_TYPE_EXCEPTION = 'Unknown mutation type: ';
        this.$READ_ONLY_EXCEPTION = 'This model is ReadOnly. Elements are not modifiable.';
        this.$LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION = 'The list in parameter of the setter cannot be null. Use removeAll to empty a collection.';
        this.$ELEMENT_HAS_NO_KEY_IN_COLLECTION = 'Cannot set the collection, because at least one element of it has no key!';
        this.$EMPTY_KEY = 'Key empty : please set the attribute key before adding the object.';
        this.$KMFQL_CONTAINED = 'contained';
        this.$org_kevoree_Instance = 'org.kevoree.Instance';
        this.$Ref_superTypes = 'superTypes';
        this.$Ref_ports = 'ports';
        this.$Att_started = 'started';
        this.$org_kevoree_NodeNetwork = 'org.kevoree.NodeNetwork';
        this.$org_kevoree_TypedElement = 'org.kevoree.TypedElement';
        this.$Ref_hub = 'hub';
        this.$Ref_defaultValues = 'defaultValues';
        this.$Ref_dataTypes = 'dataTypes';
        this.$Att_factoryBean = 'factoryBean';
        this.$Ref_port = 'port';
        this.$Ref_returnType = 'returnType';
        this.$CN_AdaptationPrimitiveType = 'AdaptationPrimitiveType';
        this.$CN_Dictionary = 'Dictionary';
        this.$Ref_portTypeRef = 'portTypeRef';
        this.$CN_ContainerRoot = 'ContainerRoot';
        this.$CN_Operation = 'Operation';
        this.$CN_PortType = 'PortType';
        this.$Att_networkType = 'networkType';
        this.$Ref_values = 'values';
        this.$Ref_initBy = 'initBy';
        this.$Ref_link = 'link';
        this.$org_kevoree_ContainerRoot = 'org.kevoree.ContainerRoot';
        this.$CN_Group = 'Group';
        this.$Ref_hosts = 'hosts';
        this.$Att_interface = 'interface';
        this.$org_kevoree_MBinding = 'org.kevoree.MBinding';
        this.$Ref_subTypes = 'subTypes';
        this.$Ref_groups = 'groups';
        this.$org_kevoree_Group = 'org.kevoree.Group';
        this.$Att_type = 'type';
        this.$CN_TypedElement = 'TypedElement';
        this.$Ref_dictionary = 'dictionary';
        this.$Att_updateMethod = 'updateMethod';
        this.$Ref_integrationPatterns = 'integrationPatterns';
        this.$org_kevoree_DeployUnit = 'org.kevoree.DeployUnit';
        this.$Att_unitName = 'unitName';
        this.$Ref_hubs = 'hubs';
        this.$Ref_parent = 'parent';
        this.$Ref_mappings = 'mappings';
        this.$Ref_attributes = 'attributes';
        this.$Att_hashcode = 'hashcode';
        this.$Att_lowerFragments = 'lowerFragments';
        this.$Ref_targetNodeType = 'targetNodeType';
        this.$Att_datatype = 'datatype';
        this.$Ref_type = 'type';
        this.$org_kevoree_LifeCycleTypeDefinition = 'org.kevoree.LifeCycleTypeDefinition';
        this.$Att_abstract = 'abstract';
        this.$org_kevoree_AdaptationPrimitiveType = 'org.kevoree.AdaptationPrimitiveType';
        this.$Att_version = 'version';
        this.$CN_Namespace = 'Namespace';
        this.$org_kevoree_ContainerNode = 'org.kevoree.ContainerNode';
        this.$Ref_components = 'components';
        this.$org_kevoree_AdaptationPrimitiveTypeRef = 'org.kevoree.AdaptationPrimitiveTypeRef';
        this.$Att_stopMethod = 'stopMethod';
        this.$CN_ExtraFonctionalProperty = 'ExtraFonctionalProperty';
        this.$Ref_childs = 'childs';
        this.$CN_ChannelType = 'ChannelType';
        this.$CN_GroupType = 'GroupType';
        this.$Ref_typeDefinitions = 'typeDefinitions';
        this.$Ref_genericTypes = 'genericTypes';
        this.$CN_CompositeType = 'CompositeType';
        this.$Ref_requiredLibs = 'requiredLibs';
        this.$CN_PortTypeRef = 'PortTypeRef';
        this.$Att_maxTime = 'maxTime';
        this.$org_kevoree_DictionaryValue = 'org.kevoree.DictionaryValue';
        this.$Ref_units = 'units';
        this.$CN_DeployUnit = 'DeployUnit';
        this.$org_kevoree_NodeLink = 'org.kevoree.NodeLink';
        this.$org_kevoree_Parameter = 'org.kevoree.Parameter';
        this.$org_kevoree_Repository = 'org.kevoree.Repository';
        this.$CN_NamedElement = 'NamedElement';
        this.$Att_serviceMethodName = 'serviceMethodName';
        this.$CN_Instance = 'Instance';
        this.$Ref_networkProperties = 'networkProperties';
        this.$CN_AdaptationPrimitiveTypeRef = 'AdaptationPrimitiveTypeRef';
        this.$Att_name = 'name';
        this.$CN_Repository = 'Repository';
        this.$CN_ComponentType = 'ComponentType';
        this.$Att_order = 'order';
        this.$Att_startMethod = 'startMethod';
        this.$Att_lowerBindings = 'lowerBindings';
        this.$org_kevoree_CompositeType = 'org.kevoree.CompositeType';
        this.$org_kevoree_GroupType = 'org.kevoree.GroupType';
        this.$org_kevoree_Operation = 'org.kevoree.Operation';
        this.$CN_Port = 'Port';
        this.$Att_optional = 'optional';
        this.$Ref_targetNode = 'targetNode';
        this.$Ref_attribute = 'attribute';
        this.$Att_metaData = 'metaData';
        this.$Att_beanMethodName = 'beanMethodName';
        this.$org_kevoree_TypeDefinition = 'org.kevoree.TypeDefinition';
        this.$Ref_target = 'target';
        this.$org_kevoree_TypeLibrary = 'org.kevoree.TypeLibrary';
        this.$Att_paramTypes = 'paramTypes';
        this.$CN_MBinding = 'MBinding';
        this.$Att_noDependency = 'noDependency';
        this.$CN_NodeLink = 'NodeLink';
        this.$CN_PortTypeMapping = 'PortTypeMapping';
        this.$Ref_provided = 'provided';
        this.$org_kevoree_PortTypeMapping = 'org.kevoree.PortTypeMapping';
        this.$Ref_dictionaryType = 'dictionaryType';
        this.$CN_ComponentInstance = 'ComponentInstance';
        this.$Att_zoneID = 'zoneID';
        this.$Att_upperBindings = 'upperBindings';
        this.$Ref_host = 'host';
        this.$CN_TypeLibrary = 'TypeLibrary';
        this.$Ref_adaptationPrimitiveTypes = 'adaptationPrimitiveTypes';
        this.$Att_url = 'url';
        this.$Ref_namespace = 'namespace';
        this.$org_kevoree_NodeType = 'org.kevoree.NodeType';
        this.$Ref_managedPrimitiveTypes = 'managedPrimitiveTypes';
        this.$CN_LifeCycleTypeDefinition = 'LifeCycleTypeDefinition';
        this.$CN_ServicePortType = 'ServicePortType';
        this.$CN_NodeNetwork = 'NodeNetwork';
        this.$Att_state = 'state';
        this.$Att_fragmentDependant = 'fragmentDependant';
        this.$org_kevoree_ServicePortType = 'org.kevoree.ServicePortType';
        this.$org_kevoree_PortType = 'org.kevoree.PortType';
        this.$CN_MessagePortType = 'MessagePortType';
        this.$Ref_operations = 'operations';
        this.$CN_DictionaryAttribute = 'DictionaryAttribute';
        this.$Att_generated_KMF_ID = 'generated_KMF_ID';
        this.$org_kevoree_NamedElement = 'org.kevoree.NamedElement';
        this.$CN_TypeDefinition = 'TypeDefinition';
        this.$org_kevoree_ComponentType = 'org.kevoree.ComponentType';
        this.$Ref_mBindings = 'mBindings';
        this.$Ref_subNodes = 'subNodes';
        this.$Ref_nodes = 'nodes';
        this.$org_kevoree_ChannelType = 'org.kevoree.ChannelType';
        this.$Ref_nodeNetworks = 'nodeNetworks';
        this.$Ref_parameters = 'parameters';
        this.$Ref_portTypes = 'portTypes';
        this.$Att_estimatedRate = 'estimatedRate';
        this.$Att_value = 'value';
        this.$org_kevoree_NetworkProperty = 'org.kevoree.NetworkProperty';
        this.$org_kevoree_Port = 'org.kevoree.Port';
        this.$Ref_managedPrimitiveTypeRefs = 'managedPrimitiveTypeRefs';
        this.$org_kevoree_ComponentInstance = 'org.kevoree.ComponentInstance';
        this.$org_kevoree_IntegrationPattern = 'org.kevoree.IntegrationPattern';
        this.$org_kevoree_DictionaryAttribute = 'org.kevoree.DictionaryAttribute';
        this.$Ref_wires = 'wires';
        this.$org_kevoree_Namespace = 'org.kevoree.Namespace';
        this.$Ref_typeDefinition = 'typeDefinition';
        this.$org_kevoree_Channel = 'org.kevoree.Channel';
        this.$Ref_deployUnits = 'deployUnits';
        this.$org_kevoree_Wire = 'org.kevoree.Wire';
        this.$org_kevoree_Dictionary = 'org.kevoree.Dictionary';
        this.$Att_synchrone = 'synchrone';
        this.$CN_Wire = 'Wire';
        this.$Ref_repositories = 'repositories';
        this.$Ref_required = 'required';
        this.$org_kevoree_ExtraFonctionalProperty = 'org.kevoree.ExtraFonctionalProperty';
        this.$Att_lastCheck = 'lastCheck';
        this.$Ref_libraries = 'libraries';
        this.$Att_upperFragments = 'upperFragments';
        this.$CN_IntegrationPattern = 'IntegrationPattern';
        this.$CN_ContainerNode = 'ContainerNode';
        this.$Att_groupName = 'groupName';
        this.$CN_Parameter = 'Parameter';
        this.$CN_DictionaryValue = 'DictionaryValue';
        this.$org_kevoree_PortTypeRef = 'org.kevoree.PortTypeRef';
        this.$Ref_filters = 'filters';
        this.$CN_NetworkProperty = 'NetworkProperty';
        this.$org_kevoree_DictionaryType = 'org.kevoree.DictionaryType';
        this.$CN_NodeType = 'NodeType';
        this.$Att_bean = 'bean';
        this.$CN_Channel = 'Channel';
        this.$Ref_bindings = 'bindings';
        this.$Ref_ref = 'ref';
        this.$CN_DictionaryType = 'DictionaryType';
        this.$Ref_extraFonctionalProperties = 'extraFonctionalProperties';
        this.$org_kevoree_MessagePortType = 'org.kevoree.MessagePortType';
      },
      get_UNKNOWN_MUTATION_TYPE_EXCEPTION: function () {
        return this.$UNKNOWN_MUTATION_TYPE_EXCEPTION;
      },
      get_READ_ONLY_EXCEPTION: function () {
        return this.$READ_ONLY_EXCEPTION;
      },
      get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION: function () {
        return this.$LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION;
      },
      get_ELEMENT_HAS_NO_KEY_IN_COLLECTION: function () {
        return this.$ELEMENT_HAS_NO_KEY_IN_COLLECTION;
      },
      get_EMPTY_KEY: function () {
        return this.$EMPTY_KEY;
      },
      get_KMFQL_CONTAINED: function () {
        return this.$KMFQL_CONTAINED;
      },
      get_org_kevoree_Instance: function () {
        return this.$org_kevoree_Instance;
      },
      get_Ref_superTypes: function () {
        return this.$Ref_superTypes;
      },
      get_Ref_ports: function () {
        return this.$Ref_ports;
      },
      get_Att_started: function () {
        return this.$Att_started;
      },
      get_org_kevoree_NodeNetwork: function () {
        return this.$org_kevoree_NodeNetwork;
      },
      get_org_kevoree_TypedElement: function () {
        return this.$org_kevoree_TypedElement;
      },
      get_Ref_hub: function () {
        return this.$Ref_hub;
      },
      get_Ref_defaultValues: function () {
        return this.$Ref_defaultValues;
      },
      get_Ref_dataTypes: function () {
        return this.$Ref_dataTypes;
      },
      get_Att_factoryBean: function () {
        return this.$Att_factoryBean;
      },
      get_Ref_port: function () {
        return this.$Ref_port;
      },
      get_Ref_returnType: function () {
        return this.$Ref_returnType;
      },
      get_CN_AdaptationPrimitiveType: function () {
        return this.$CN_AdaptationPrimitiveType;
      },
      get_CN_Dictionary: function () {
        return this.$CN_Dictionary;
      },
      get_Ref_portTypeRef: function () {
        return this.$Ref_portTypeRef;
      },
      get_CN_ContainerRoot: function () {
        return this.$CN_ContainerRoot;
      },
      get_CN_Operation: function () {
        return this.$CN_Operation;
      },
      get_CN_PortType: function () {
        return this.$CN_PortType;
      },
      get_Att_networkType: function () {
        return this.$Att_networkType;
      },
      get_Ref_values: function () {
        return this.$Ref_values;
      },
      get_Ref_initBy: function () {
        return this.$Ref_initBy;
      },
      get_Ref_link: function () {
        return this.$Ref_link;
      },
      get_org_kevoree_ContainerRoot: function () {
        return this.$org_kevoree_ContainerRoot;
      },
      get_CN_Group: function () {
        return this.$CN_Group;
      },
      get_Ref_hosts: function () {
        return this.$Ref_hosts;
      },
      get_Att_interface: function () {
        return this.$Att_interface;
      },
      get_org_kevoree_MBinding: function () {
        return this.$org_kevoree_MBinding;
      },
      get_Ref_subTypes: function () {
        return this.$Ref_subTypes;
      },
      get_Ref_groups: function () {
        return this.$Ref_groups;
      },
      get_org_kevoree_Group: function () {
        return this.$org_kevoree_Group;
      },
      get_Att_type: function () {
        return this.$Att_type;
      },
      get_CN_TypedElement: function () {
        return this.$CN_TypedElement;
      },
      get_Ref_dictionary: function () {
        return this.$Ref_dictionary;
      },
      get_Att_updateMethod: function () {
        return this.$Att_updateMethod;
      },
      get_Ref_integrationPatterns: function () {
        return this.$Ref_integrationPatterns;
      },
      get_org_kevoree_DeployUnit: function () {
        return this.$org_kevoree_DeployUnit;
      },
      get_Att_unitName: function () {
        return this.$Att_unitName;
      },
      get_Ref_hubs: function () {
        return this.$Ref_hubs;
      },
      get_Ref_parent: function () {
        return this.$Ref_parent;
      },
      get_Ref_mappings: function () {
        return this.$Ref_mappings;
      },
      get_Ref_attributes: function () {
        return this.$Ref_attributes;
      },
      get_Att_hashcode: function () {
        return this.$Att_hashcode;
      },
      get_Att_lowerFragments: function () {
        return this.$Att_lowerFragments;
      },
      get_Ref_targetNodeType: function () {
        return this.$Ref_targetNodeType;
      },
      get_Att_datatype: function () {
        return this.$Att_datatype;
      },
      get_Ref_type: function () {
        return this.$Ref_type;
      },
      get_org_kevoree_LifeCycleTypeDefinition: function () {
        return this.$org_kevoree_LifeCycleTypeDefinition;
      },
      get_Att_abstract: function () {
        return this.$Att_abstract;
      },
      get_org_kevoree_AdaptationPrimitiveType: function () {
        return this.$org_kevoree_AdaptationPrimitiveType;
      },
      get_Att_version: function () {
        return this.$Att_version;
      },
      get_CN_Namespace: function () {
        return this.$CN_Namespace;
      },
      get_org_kevoree_ContainerNode: function () {
        return this.$org_kevoree_ContainerNode;
      },
      get_Ref_components: function () {
        return this.$Ref_components;
      },
      get_org_kevoree_AdaptationPrimitiveTypeRef: function () {
        return this.$org_kevoree_AdaptationPrimitiveTypeRef;
      },
      get_Att_stopMethod: function () {
        return this.$Att_stopMethod;
      },
      get_CN_ExtraFonctionalProperty: function () {
        return this.$CN_ExtraFonctionalProperty;
      },
      get_Ref_childs: function () {
        return this.$Ref_childs;
      },
      get_CN_ChannelType: function () {
        return this.$CN_ChannelType;
      },
      get_CN_GroupType: function () {
        return this.$CN_GroupType;
      },
      get_Ref_typeDefinitions: function () {
        return this.$Ref_typeDefinitions;
      },
      get_Ref_genericTypes: function () {
        return this.$Ref_genericTypes;
      },
      get_CN_CompositeType: function () {
        return this.$CN_CompositeType;
      },
      get_Ref_requiredLibs: function () {
        return this.$Ref_requiredLibs;
      },
      get_CN_PortTypeRef: function () {
        return this.$CN_PortTypeRef;
      },
      get_Att_maxTime: function () {
        return this.$Att_maxTime;
      },
      get_org_kevoree_DictionaryValue: function () {
        return this.$org_kevoree_DictionaryValue;
      },
      get_Ref_units: function () {
        return this.$Ref_units;
      },
      get_CN_DeployUnit: function () {
        return this.$CN_DeployUnit;
      },
      get_org_kevoree_NodeLink: function () {
        return this.$org_kevoree_NodeLink;
      },
      get_org_kevoree_Parameter: function () {
        return this.$org_kevoree_Parameter;
      },
      get_org_kevoree_Repository: function () {
        return this.$org_kevoree_Repository;
      },
      get_CN_NamedElement: function () {
        return this.$CN_NamedElement;
      },
      get_Att_serviceMethodName: function () {
        return this.$Att_serviceMethodName;
      },
      get_CN_Instance: function () {
        return this.$CN_Instance;
      },
      get_Ref_networkProperties: function () {
        return this.$Ref_networkProperties;
      },
      get_CN_AdaptationPrimitiveTypeRef: function () {
        return this.$CN_AdaptationPrimitiveTypeRef;
      },
      get_Att_name: function () {
        return this.$Att_name;
      },
      get_CN_Repository: function () {
        return this.$CN_Repository;
      },
      get_CN_ComponentType: function () {
        return this.$CN_ComponentType;
      },
      get_Att_order: function () {
        return this.$Att_order;
      },
      get_Att_startMethod: function () {
        return this.$Att_startMethod;
      },
      get_Att_lowerBindings: function () {
        return this.$Att_lowerBindings;
      },
      get_org_kevoree_CompositeType: function () {
        return this.$org_kevoree_CompositeType;
      },
      get_org_kevoree_GroupType: function () {
        return this.$org_kevoree_GroupType;
      },
      get_org_kevoree_Operation: function () {
        return this.$org_kevoree_Operation;
      },
      get_CN_Port: function () {
        return this.$CN_Port;
      },
      get_Att_optional: function () {
        return this.$Att_optional;
      },
      get_Ref_targetNode: function () {
        return this.$Ref_targetNode;
      },
      get_Ref_attribute: function () {
        return this.$Ref_attribute;
      },
      get_Att_metaData: function () {
        return this.$Att_metaData;
      },
      get_Att_beanMethodName: function () {
        return this.$Att_beanMethodName;
      },
      get_org_kevoree_TypeDefinition: function () {
        return this.$org_kevoree_TypeDefinition;
      },
      get_Ref_target: function () {
        return this.$Ref_target;
      },
      get_org_kevoree_TypeLibrary: function () {
        return this.$org_kevoree_TypeLibrary;
      },
      get_Att_paramTypes: function () {
        return this.$Att_paramTypes;
      },
      get_CN_MBinding: function () {
        return this.$CN_MBinding;
      },
      get_Att_noDependency: function () {
        return this.$Att_noDependency;
      },
      get_CN_NodeLink: function () {
        return this.$CN_NodeLink;
      },
      get_CN_PortTypeMapping: function () {
        return this.$CN_PortTypeMapping;
      },
      get_Ref_provided: function () {
        return this.$Ref_provided;
      },
      get_org_kevoree_PortTypeMapping: function () {
        return this.$org_kevoree_PortTypeMapping;
      },
      get_Ref_dictionaryType: function () {
        return this.$Ref_dictionaryType;
      },
      get_CN_ComponentInstance: function () {
        return this.$CN_ComponentInstance;
      },
      get_Att_zoneID: function () {
        return this.$Att_zoneID;
      },
      get_Att_upperBindings: function () {
        return this.$Att_upperBindings;
      },
      get_Ref_host: function () {
        return this.$Ref_host;
      },
      get_CN_TypeLibrary: function () {
        return this.$CN_TypeLibrary;
      },
      get_Ref_adaptationPrimitiveTypes: function () {
        return this.$Ref_adaptationPrimitiveTypes;
      },
      get_Att_url: function () {
        return this.$Att_url;
      },
      get_Ref_namespace: function () {
        return this.$Ref_namespace;
      },
      get_org_kevoree_NodeType: function () {
        return this.$org_kevoree_NodeType;
      },
      get_Ref_managedPrimitiveTypes: function () {
        return this.$Ref_managedPrimitiveTypes;
      },
      get_CN_LifeCycleTypeDefinition: function () {
        return this.$CN_LifeCycleTypeDefinition;
      },
      get_CN_ServicePortType: function () {
        return this.$CN_ServicePortType;
      },
      get_CN_NodeNetwork: function () {
        return this.$CN_NodeNetwork;
      },
      get_Att_state: function () {
        return this.$Att_state;
      },
      get_Att_fragmentDependant: function () {
        return this.$Att_fragmentDependant;
      },
      get_org_kevoree_ServicePortType: function () {
        return this.$org_kevoree_ServicePortType;
      },
      get_org_kevoree_PortType: function () {
        return this.$org_kevoree_PortType;
      },
      get_CN_MessagePortType: function () {
        return this.$CN_MessagePortType;
      },
      get_Ref_operations: function () {
        return this.$Ref_operations;
      },
      get_CN_DictionaryAttribute: function () {
        return this.$CN_DictionaryAttribute;
      },
      get_Att_generated_KMF_ID: function () {
        return this.$Att_generated_KMF_ID;
      },
      get_org_kevoree_NamedElement: function () {
        return this.$org_kevoree_NamedElement;
      },
      get_CN_TypeDefinition: function () {
        return this.$CN_TypeDefinition;
      },
      get_org_kevoree_ComponentType: function () {
        return this.$org_kevoree_ComponentType;
      },
      get_Ref_mBindings: function () {
        return this.$Ref_mBindings;
      },
      get_Ref_subNodes: function () {
        return this.$Ref_subNodes;
      },
      get_Ref_nodes: function () {
        return this.$Ref_nodes;
      },
      get_org_kevoree_ChannelType: function () {
        return this.$org_kevoree_ChannelType;
      },
      get_Ref_nodeNetworks: function () {
        return this.$Ref_nodeNetworks;
      },
      get_Ref_parameters: function () {
        return this.$Ref_parameters;
      },
      get_Ref_portTypes: function () {
        return this.$Ref_portTypes;
      },
      get_Att_estimatedRate: function () {
        return this.$Att_estimatedRate;
      },
      get_Att_value: function () {
        return this.$Att_value;
      },
      get_org_kevoree_NetworkProperty: function () {
        return this.$org_kevoree_NetworkProperty;
      },
      get_org_kevoree_Port: function () {
        return this.$org_kevoree_Port;
      },
      get_Ref_managedPrimitiveTypeRefs: function () {
        return this.$Ref_managedPrimitiveTypeRefs;
      },
      get_org_kevoree_ComponentInstance: function () {
        return this.$org_kevoree_ComponentInstance;
      },
      get_org_kevoree_IntegrationPattern: function () {
        return this.$org_kevoree_IntegrationPattern;
      },
      get_org_kevoree_DictionaryAttribute: function () {
        return this.$org_kevoree_DictionaryAttribute;
      },
      get_Ref_wires: function () {
        return this.$Ref_wires;
      },
      get_org_kevoree_Namespace: function () {
        return this.$org_kevoree_Namespace;
      },
      get_Ref_typeDefinition: function () {
        return this.$Ref_typeDefinition;
      },
      get_org_kevoree_Channel: function () {
        return this.$org_kevoree_Channel;
      },
      get_Ref_deployUnits: function () {
        return this.$Ref_deployUnits;
      },
      get_org_kevoree_Wire: function () {
        return this.$org_kevoree_Wire;
      },
      get_org_kevoree_Dictionary: function () {
        return this.$org_kevoree_Dictionary;
      },
      get_Att_synchrone: function () {
        return this.$Att_synchrone;
      },
      get_CN_Wire: function () {
        return this.$CN_Wire;
      },
      get_Ref_repositories: function () {
        return this.$Ref_repositories;
      },
      get_Ref_required: function () {
        return this.$Ref_required;
      },
      get_org_kevoree_ExtraFonctionalProperty: function () {
        return this.$org_kevoree_ExtraFonctionalProperty;
      },
      get_Att_lastCheck: function () {
        return this.$Att_lastCheck;
      },
      get_Ref_libraries: function () {
        return this.$Ref_libraries;
      },
      get_Att_upperFragments: function () {
        return this.$Att_upperFragments;
      },
      get_CN_IntegrationPattern: function () {
        return this.$CN_IntegrationPattern;
      },
      get_CN_ContainerNode: function () {
        return this.$CN_ContainerNode;
      },
      get_Att_groupName: function () {
        return this.$Att_groupName;
      },
      get_CN_Parameter: function () {
        return this.$CN_Parameter;
      },
      get_CN_DictionaryValue: function () {
        return this.$CN_DictionaryValue;
      },
      get_org_kevoree_PortTypeRef: function () {
        return this.$org_kevoree_PortTypeRef;
      },
      get_Ref_filters: function () {
        return this.$Ref_filters;
      },
      get_CN_NetworkProperty: function () {
        return this.$CN_NetworkProperty;
      },
      get_org_kevoree_DictionaryType: function () {
        return this.$org_kevoree_DictionaryType;
      },
      get_CN_NodeType: function () {
        return this.$CN_NodeType;
      },
      get_Att_bean: function () {
        return this.$Att_bean;
      },
      get_CN_Channel: function () {
        return this.$CN_Channel;
      },
      get_Ref_bindings: function () {
        return this.$Ref_bindings;
      },
      get_Ref_ref: function () {
        return this.$Ref_ref;
      },
      get_CN_DictionaryType: function () {
        return this.$CN_DictionaryType;
      },
      get_Ref_extraFonctionalProperties: function () {
        return this.$Ref_extraFonctionalProperties;
      },
      get_org_kevoree_MessagePortType: function () {
        return this.$org_kevoree_MessagePortType;
      }
    });
  }.call(_.org.kevoree.util));
  (function () {
    this.$asserter = new _.kotlin.test.QUnitAsserter();
  }.call(_.kotlin.test));
  (function () {
    this.State = Kotlin.createObject(null, {
      initialize: function () {
        this.$Ready = 0;
        this.$NotReady = 1;
        this.$Done = 2;
        this.$Failed = 3;
      },
      get_Ready: function () {
        return this.$Ready;
      },
      get_NotReady: function () {
        return this.$NotReady;
      },
      get_Done: function () {
        return this.$Done;
      },
      get_Failed: function () {
        return this.$Failed;
      }
    });
  }.call(_.kotlin.support));
  Kotlin.defineModule('org.kevoree.model.js', _);
}());
if(typeof(module)!='undefined'){module.exports = Kotlin.modules['org.kevoree.model.js'];}
